{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.234bc0.css","path":"main.234bc0.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/main.234bc0.js","path":"main.234bc0.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e39b58f822a2d490fb91d44bf5a23143406a96e5","modified":1503143674000},{"_id":"themes/hexo-theme-yilia/.DS_Store","hash":"0b84e5f7597e3782645374e9f52c0659b08ad8f0","modified":1491093678000},{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"e6e4703e61fe97e4d8029db7b5b80fcfda797c0c","modified":1503145710000},{"_id":"themes/hexo-theme-yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1491092347000},{"_id":"source/_posts/.DS_Store","hash":"873254f9fe4d45869506a1f72febcec2ad3c1dff","modified":1503204392000},{"_id":"source/_posts/2017-04-10.md","hash":"2007b7532a86a9a051c140444b8c8d672c5fed10","modified":1503148897000},{"_id":"source/_posts/2017-04-11.md","hash":"b6540a66f0ae229bbf600f9933541ae7bbab51e7","modified":1503148901000},{"_id":"source/_posts/2017-04-04.md","hash":"f1d6ff2755b2f2e675d11f4998124200b779ba4f","modified":1503148893000},{"_id":"source/_posts/ajax.md","hash":"abf9d6aa1428ddb55cd6de21ba4bc4fc4a2fa065","modified":1503148909000},{"_id":"source/categories/index.md","hash":"8cdcbc26f07f436675a5a5eb3bc84a1a7bbd63e2","modified":1491115574000},{"_id":"themes/hexo-theme-yilia/.git/FETCH_HEAD","hash":"5885194d6adf0f9790b410a42f0f9642e9f2a770","modified":1491092391000},{"_id":"themes/hexo-theme-yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/ORIG_HEAD","hash":"ec274ad8176ea701ec280f2352a47451b498c39a","modified":1491092391000},{"_id":"themes/hexo-theme-yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/index","hash":"c7b923e00796b22d767e3c94462519b22db44001","modified":1503124616000},{"_id":"themes/hexo-theme-yilia/.git/packed-refs","hash":"144a02fde3eaced071755091d413698cb7e8382d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/.DS_Store","hash":"4cf2103ba402ede4e35924760df7b32fff7525cb","modified":1491093678000},{"_id":"themes/hexo-theme-yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/main.234bc0.css","hash":"b9f93c2b98c7f060dd6cbea5f919d705f19bb0a0","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/.DS_Store","hash":"6bd59b6930c3f152d22826a8daeea4fd54fe7cc1","modified":1491543561000},{"_id":"themes/hexo-theme-yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/main.234bc0.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1491092347000},{"_id":"source/_posts/ajax/111.png","hash":"2055c99c7528d767b60e30d092f940bdeae34507","modified":1491095615000},{"_id":"themes/hexo-theme-yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1491092317000},{"_id":"themes/hexo-theme-yilia/.git/logs/HEAD","hash":"a809e105d052f880c1d2aa45840dff50e85330e7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"8cc7bb06d93bf658c404f1e065cf28ae26085f37","modified":1503149457000},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"1b91850e8708ce4c83e3cc3f474921182d792308","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"1d1ba016fc3999e43d5a3af7908cd4fb4113cfab","modified":1491114892000},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"c4a0f16d554e7e7007856d45b78443d7bf0b40b7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/img/.DS_Store","hash":"41f7a9ee288351775c90932ff8bf81531ef86115","modified":1491094418000},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"3f5808a49a7365e3f813f78ba96b692f7ca27886","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1503194536000},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"b5324302815491d0a5e63142f1ead2048ad3f72f","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source/img/logo.jpg","hash":"7ddb617f784f4b5dbfecddf32600c19749087ecd","modified":1491093635000},{"_id":"themes/hexo-theme-yilia/.git/refs/heads/master","hash":"ec274ad8176ea701ec280f2352a47451b498c39a","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-7cbda1a00de83cde49bfab56b11029c9d89eaeba.idx","hash":"a61b8f72c229073a53ea75276b885df11940a11a","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"57018a5825aca8d277b161ed0990dd9c5a031cc0","modified":1503149201000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/heads/master","hash":"a809e105d052f880c1d2aa45840dff50e85330e7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/logs/refs/remotes/origin/HEAD","hash":"a809e105d052f880c1d2aa45840dff50e85330e7","modified":1491092347000},{"_id":"themes/hexo-theme-yilia/.git/objects/pack/pack-7cbda1a00de83cde49bfab56b11029c9d89eaeba.pack","hash":"20c4b1f9c67efe010d0ae13728a02a3bb7d29a84","modified":1491092347000},{"_id":"public/content.json","hash":"847850dfac18c9aef9bcc7f90d5f0c884dcda1e3","modified":1503204558486},{"_id":"public/categories/index.html","hash":"571aae1f495b9ae5bf418aaa10296e42182d3016","modified":1503149465895},{"_id":"public/2017-04-11/index.html","hash":"2859ca9952174bb92e46f08a7baa1c2c98e8bbf4","modified":1503149465896},{"_id":"public/2017-04-10/index.html","hash":"d431d7684d148298b4b78620cd15c517fdb19b8e","modified":1503149465896},{"_id":"public/2017-04-04/index.html","hash":"d64b12a7359057ae15cd842f9f5c7cd4c6c7a332","modified":1503149465896},{"_id":"public/ajax/index.html","hash":"c8ef658ae2514aed5122a7306c1e327904ff970a","modified":1503149465896},{"_id":"public/archives/index.html","hash":"5f26330bdcf84ff26af48737725af53b97295584","modified":1503194516309},{"_id":"public/archives/2017/index.html","hash":"209496a8fa752571a0336d26e4bf1c1ffc89f8ba","modified":1503194516309},{"_id":"public/archives/2017/04/index.html","hash":"bd8964d3cc7935cca95fad2f7fe23f5630e7f7f8","modified":1503145720535},{"_id":"public/categories/js/index.html","hash":"9e50dbb895a9ee944213f99cbe0208651fac677c","modified":1503145720535},{"_id":"public/index.html","hash":"f3c246002d774b6a4289529cf13c21c69428eb0e","modified":1503204558651},{"_id":"public/tags/javascript/index.html","hash":"5809f91cfd3673622384187491feceedf432b11d","modified":1503194516309},{"_id":"public/tags/es6/index.html","hash":"b970c42561f8e17e4e29810ce5ffb50832c3bd41","modified":1503145720535},{"_id":"public/tags/node/index.html","hash":"b847120ad368e3dccbb69c8126a7c742a9e3a974","modified":1503145720535},{"_id":"public/tags/ajax/index.html","hash":"b69303a520fec4dad1d84b6bff0e0f81ba12f078","modified":1503145720536},{"_id":"public/tags/302/index.html","hash":"72837eee8a045dcaa6d559674de99022609b430b","modified":1503145720536},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1492933286258},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1492933286258},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492933286259},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1492933286259},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1492933286259},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"772383b62548e2a4fa560d589e05929b9f6f7f7b","modified":1492933286259},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1492933286259},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1492933286259},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1492933286259},{"_id":"public/ajax/111.png","hash":"2055c99c7528d767b60e30d092f940bdeae34507","modified":1492933286259},{"_id":"public/img/logo.jpg","hash":"7ddb617f784f4b5dbfecddf32600c19749087ecd","modified":1492933286261},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1492933286267},{"_id":"public/main.234bc0.css","hash":"b9f93c2b98c7f060dd6cbea5f919d705f19bb0a0","modified":1492933286267},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1492933286267},{"_id":"public/main.234bc0.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1492933286267},{"_id":"source/_posts/2017-05-07.md","hash":"659c113fdeec3ee0af857e7a678e13bf68a2d5e2","modified":1503148905000},{"_id":"source/_posts/webworker/1.png","hash":"b3afc9f9b15595ca71cb9f7a3f9a150009c41f4e","modified":1494162933000},{"_id":"source/_posts/webworker/2.png","hash":"63dc5115954f65778dac9be5b64da7a66d28b997","modified":1494162948000},{"_id":"source/_posts/webworker/3.png","hash":"f35883f1d4a930a5ed9090f32c58fe6f4ec21841","modified":1494163229000},{"_id":"public/2017-05-07/index.html","hash":"b51ba822311868078ea033d0aef67a875301b83a","modified":1503149465896},{"_id":"public/archives/2017/05/index.html","hash":"9be0e207e3b7710b5d3fd7718faafbe968526df0","modified":1503145720535},{"_id":"source/_posts/2017-05-07/1.png","hash":"b3afc9f9b15595ca71cb9f7a3f9a150009c41f4e","modified":1494162933000},{"_id":"source/_posts/2017-05-07/2.png","hash":"63dc5115954f65778dac9be5b64da7a66d28b997","modified":1494162948000},{"_id":"source/_posts/2017-05-07/3.png","hash":"f35883f1d4a930a5ed9090f32c58fe6f4ec21841","modified":1494163229000},{"_id":"public/2017-05-07/1.png","hash":"b3afc9f9b15595ca71cb9f7a3f9a150009c41f4e","modified":1502328550448},{"_id":"public/2017-05-07/2.png","hash":"63dc5115954f65778dac9be5b64da7a66d28b997","modified":1502328550448},{"_id":"public/2017-05-07/3.png","hash":"f35883f1d4a930a5ed9090f32c58fe6f4ec21841","modified":1502328550449},{"_id":"source/_posts/vue-ssr.md","hash":"d203eb2182c5db477941c967e0dc9bc5fd1a4ef7","modified":1503148913000},{"_id":"source/_posts/vue-ssr/11.png","hash":"ab5ed2f6789ff7bb6ff7132e8e3df5f01faf69e5","modified":1503143598000},{"_id":"source/_posts/vue-ssr/22.jpeg","hash":"85b1ea4114f8700acb8733a0055ff086f19c11fe","modified":1503144085000},{"_id":"public/vue-ssr/index.html","hash":"f9833f003971ed0d63d8883e39f9b280469c57bf","modified":1503194516308},{"_id":"public/archives/2017/06/index.html","hash":"d60f7a3edacd400dcd08a894a17a6441a065c6a7","modified":1503194516309},{"_id":"public/vue-ssr/11.png","hash":"ab5ed2f6789ff7bb6ff7132e8e3df5f01faf69e5","modified":1503144680627},{"_id":"public/vue-ssr/22.jpeg","hash":"85b1ea4114f8700acb8733a0055ff086f19c11fe","modified":1503144680627},{"_id":"public/tags/vue/index.html","hash":"c5c31926788d5dd8668c8515bd1bb36985ee7129","modified":1503194516309},{"_id":"source/_posts/vue-ssr2.md","hash":"ea8e62902507106a4bf631f47da9bb83fab3b7b4","modified":1503204540000},{"_id":"themes/hexo-theme-yilia/source-src/css/zdy.scss","hash":"96786c4152606b40f78986698c40fed301b853dc","modified":1503194459000},{"_id":"source/_posts/vue-ssr2/1.jpeg","hash":"5749f39a018e4b53e0c332e8208870ad8f82997c","modified":1503193927000},{"_id":"public/vue-ssr2/index.html","hash":"76e2fc0d7ffe325a1242724c2f9d797cb3f14487","modified":1503204558651},{"_id":"public/vue-ssr2/1.jpeg","hash":"5749f39a018e4b53e0c332e8208870ad8f82997c","modified":1503194516324},{"_id":"source/_posts/vue-ssr2/2.jpeg","hash":"2dcb76db17520c9302d7c86b3fa7618b7bd2ce3b","modified":1503194719000},{"_id":"source/_posts/vue-ssr2/3.jpeg","hash":"5b8c1a59b6bb1e55b0beb27b47852718981782f2","modified":1503202486000},{"_id":"source/_posts/vue-ssr2/4.jpeg","hash":"12de3851c4c673e3a549f16d1a9059e9299e0137","modified":1503204353000},{"_id":"public/vue-ssr2/2.jpeg","hash":"2dcb76db17520c9302d7c86b3fa7618b7bd2ce3b","modified":1503204558654},{"_id":"public/vue-ssr2/3.jpeg","hash":"5b8c1a59b6bb1e55b0beb27b47852718981782f2","modified":1503204558654},{"_id":"public/vue-ssr2/4.jpeg","hash":"12de3851c4c673e3a549f16d1a9059e9299e0137","modified":1503204558655}],"Category":[{"name":"javascript","_id":"cj1udxjo50007g6ld3ftvchps"}],"Data":[],"Page":[{"title":"文章类别","date":"2017-04-02T06:43:41.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章类别\ndate: 2017-04-02 14:43:41\n---\n","updated":"2017-04-02T06:46:14.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1udxjnp0001g6ldm3h9ijem","content":"","excerpt":"","more":""}],"Post":[{"title":"详解javascript对象方法Object.assign()痛点","comments":1,"date":"2017-04-11T13:55:28.000Z","_content":"\n## 函数原型\n\n首先看一下函数的定义：\n函数参数为一个目标对象（该对象作为最终的返回值）,源对象(此处可以为任意多个)。通过调用该函数可以拷贝所有可被枚举的自有属性值到目标对象中。\n\nObject.assign(target, ...sources)\n\n这里我们需要强调的三点是：\n\n1. 可被枚举的属性\n1. 自有属性\n1. string或者Symbol类型是可以被直接分配的\n\n拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。\n\n<!-- more -->\n\n## 函数实例\n\n这里我们通过几个MDN上的例子来介绍一下使用方法：\n\n### 实例一\n\n我们参考上面的原型函数说明即可知道其最开始的o1因为设置为target，则调用其setter方法设置了其他对象的属性到自身。\n\n\n``` javascript\n\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\n\n```\n\n### 实例二\n\n我们自定义了一些对象，这些对象有一些包含了不可枚举的属性,另外注意使用 Object.defineProperty 初始化的对象默认是不可枚举的属性。对于可枚举的对象我们可以直接使用Object.keys()获得,或者使用for-in循环遍历出来.\n\n对于不可枚举的属性，使用Object.assign的时候将被自动忽略。\n\n\n``` javascript\n\nvar obj = Object.create({ foo: 1 }, { // foo is an inherit property.\n  bar: {\n    value: 2  // bar is a non-enumerable property.\n  },\n  baz: {\n    value: 3,\n    enumerable: true  // baz is an own enumerable property.\n  }\n});\n\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 } \n\n``` \n\n### 实例三\n\n对于只读的属性，当分配新的对象覆盖他的时候，将抛出异常:\n\n\n``` javascript\n\nvar target = Object.defineProperty({}, 'foo', {\n  value: 1,\n  writable: false\n}); \n\nObject.assign(target, { bar: 2 })\n\n//{bar: 2, foo: 1}\n\nObject.assign(target, { foo: 2 })\n//Uncaught TypeError: Cannot assign to read only property 'foo' of object '#<Object>'(…)\n\n``` \n\n\n## Polyfill\n\n这里我们简单的看下如何实现es5版本的Object.assign：\n\n实现步骤：\n\n判断是否原生支持该函数，如果不存在的话创建一个立即执行函数，该函数将创建一个assign函数绑定到Object上。\n\n判断参数是否正确(目的对象不能为空，我们可以直接设置{}传递进去,但必须设置该值)\n使用Object在原有的对象基础上返回该对象，并保存为out使用for…in循环遍历出所有的可枚举的自有对象。并复制给新的目标对象(hasOwnProperty返回非原型链上的属性)源码如下：\n\n\n``` javascript\n\n if (typeof Object.assign != 'function') {\n  (function () {\n    Object.assign = function (target) {\n     'use strict';\n     if (target === undefined || target === null) {\n       throw new TypeError('Cannot convert undefined or null to object');\n     }\n    \n     var output = Object(target);\n     for (var index = 1; index < arguments.length; index++) {\n       var source = arguments[index];\n       if (source !== undefined && source !== null) {\n         for (var nextKey in source) {\n           if (source.hasOwnProperty(nextKey)) {\n             output[nextKey] = source[nextKey];\n           }\n         }\n       }\n     }\n     return output;\n    };\n})();\n}\n\n``` \n\n## 扩展内容\n\n### 深度拷贝和前拷贝\n\njavascript中存储对象都是存地址的，所以浅拷贝是都指向同一块内存区块，而深拷贝则是另外开辟了一块区域，下面实例也可以看出这一点：\n\n\n``` javascript\n\n// 浅拷贝\nconst a = {t: 1, p: 'gg'};\nconst b = a;\nb.t = 3;\nconsole.log(a); // {t: 3, p: 'gg'}\nconsole.log(b); // {t: 3, p: 'gg'}\n\n//深拷贝\nconst c = {t: 1, p: 'gg'};\nconst d = deepCopy(c);\nd.t = 3;\nconsole.log(c); // {t: 1, p: 'gg'}\nconsole.log(d); // {t: 3, p: 'gg'}\n\n``` \n\n可以明显看出，浅拷贝在改变其中一个值时，会导致其他也一起改变，而深拷贝不会。\n\n我需要的是深拷贝的方法，然后发现原来es6 中有Object.assign() 这个方法，感觉可以拿来用了。 \n贴一下两个官方例子：\n\n\n``` javascript\n\n// Cloning an object\nvar obj = { a: 1 };\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n\n// Merging objects\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\n\n```\n\n是不是很完美，又可以clone又可以merge。在我这种情况下，我觉得我的代码量又可以减少了，比如：\n\n\n``` javascript\n\nconst defaultOpt = {\n    title: 'hello', \n    name: 'oo', \n    type: 'line'\n};\n// 原来可能需要这样\nconst opt1 = deepCopy(a);\nopt1.title = 'opt1';\nopt1.type = 'bar';\nopt1.extra = 'extra'; // 额外增加配置\n// 现在只要这样\nconst opt2 = Object.assign({}, a, {\n    title: 'opt2', \n    type: 'bar', \n    extra: 'extra'\n});\n\n```\n\n不过，很快，问题出现了，那就是merge和我想象的不一样且看例子：\n\n\n``` javascript\n\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    }\n};\n\nconst opt = Object.assign({}, defaultOpt, {\n    title: {\n        subtext: 'Yes, your world.'\n    }\n});\n\nconsole.log(opt);\n\n// 预期结果\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n// 实际结果\n{\n    title: {\n        subtext: 'Yes, your world.'\n    }\n}\n\n```\n\n原本想的是它只会覆盖subtext ，然而其实它直接覆盖了整个title ，这个让我比较郁闷，相当于它只merge根属性，下面的就不做处理了。 \n代码只能重构成相对麻烦一点的：\n\n``` javascript\n\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    }\n};\n\nconst opt = Object.assign({}, defaultOpt);\nopt.title.subtext = 'Yes, your world.';\n\nconsole.log(opt);\n// 结果正常\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n```\n\n这样用虽然麻烦一点，但是也还好，可以用了。不过。。。很快，又出现问题了，如下：\n\n``` javascript\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    } \n};\n\nconst opt1 = Object.assign({}, defaultOpt);\nconst opt2 = Object.assign({}, defaultOpt);\nopt2.title.subtext = 'Yes, your world.';\n\nconsole.log('opt1:');\nconsole.log(opt1);\nconsole.log('opt2:');\nconsole.log(opt2);\n\n// 结果\nopt1:\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\nopt2:\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n```\n\n上面结果发现两个配置变得一模一样，而其实我们并没有去更改opt1 的subtext ，只是改了opt2 的。 \n这说明一点：在title 这一层只是简单的浅拷贝 ，而没有继续深入的深拷贝。 \n\n**Object.assign() 只是一级属性复制，比浅拷贝多深拷贝了一层而已。用的时候，还是要注意这个问题的。**不过github上已经有很多好的解决方案，比如deep-merge 通过递归的方式逐层的去调用assign函数。Lodash提供了深拷贝的api方法，其实熟悉jquery的同学，extend这个api就能直接完美解决深拷贝的问题。\n\n\n#### 附\n\n发现一个可以简单实现深拷贝的方法，当然，有一定限制，如下：\n\n``` bash\nconst obj1 = JSON.parse(JSON.stringify(obj));\n``` \n\n思路就是将一个对象转成json字符串，然后又将字符串转回对象。但是在使用中还是会存在问题，进过测试会把function替换掉，使用的时候还得注意。","source":"_posts/2017-04-11.md","raw":"---\ntitle: 详解javascript对象方法Object.assign()痛点\ncomments: true\ndate: 2017-04-11 21:55:28\ntags: \n    - 'javascript'\n    - 'es6'\n---\n\n## 函数原型\n\n首先看一下函数的定义：\n函数参数为一个目标对象（该对象作为最终的返回值）,源对象(此处可以为任意多个)。通过调用该函数可以拷贝所有可被枚举的自有属性值到目标对象中。\n\nObject.assign(target, ...sources)\n\n这里我们需要强调的三点是：\n\n1. 可被枚举的属性\n1. 自有属性\n1. string或者Symbol类型是可以被直接分配的\n\n拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。\n\n<!-- more -->\n\n## 函数实例\n\n这里我们通过几个MDN上的例子来介绍一下使用方法：\n\n### 实例一\n\n我们参考上面的原型函数说明即可知道其最开始的o1因为设置为target，则调用其setter方法设置了其他对象的属性到自身。\n\n\n``` javascript\n\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\n\n```\n\n### 实例二\n\n我们自定义了一些对象，这些对象有一些包含了不可枚举的属性,另外注意使用 Object.defineProperty 初始化的对象默认是不可枚举的属性。对于可枚举的对象我们可以直接使用Object.keys()获得,或者使用for-in循环遍历出来.\n\n对于不可枚举的属性，使用Object.assign的时候将被自动忽略。\n\n\n``` javascript\n\nvar obj = Object.create({ foo: 1 }, { // foo is an inherit property.\n  bar: {\n    value: 2  // bar is a non-enumerable property.\n  },\n  baz: {\n    value: 3,\n    enumerable: true  // baz is an own enumerable property.\n  }\n});\n\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 } \n\n``` \n\n### 实例三\n\n对于只读的属性，当分配新的对象覆盖他的时候，将抛出异常:\n\n\n``` javascript\n\nvar target = Object.defineProperty({}, 'foo', {\n  value: 1,\n  writable: false\n}); \n\nObject.assign(target, { bar: 2 })\n\n//{bar: 2, foo: 1}\n\nObject.assign(target, { foo: 2 })\n//Uncaught TypeError: Cannot assign to read only property 'foo' of object '#<Object>'(…)\n\n``` \n\n\n## Polyfill\n\n这里我们简单的看下如何实现es5版本的Object.assign：\n\n实现步骤：\n\n判断是否原生支持该函数，如果不存在的话创建一个立即执行函数，该函数将创建一个assign函数绑定到Object上。\n\n判断参数是否正确(目的对象不能为空，我们可以直接设置{}传递进去,但必须设置该值)\n使用Object在原有的对象基础上返回该对象，并保存为out使用for…in循环遍历出所有的可枚举的自有对象。并复制给新的目标对象(hasOwnProperty返回非原型链上的属性)源码如下：\n\n\n``` javascript\n\n if (typeof Object.assign != 'function') {\n  (function () {\n    Object.assign = function (target) {\n     'use strict';\n     if (target === undefined || target === null) {\n       throw new TypeError('Cannot convert undefined or null to object');\n     }\n    \n     var output = Object(target);\n     for (var index = 1; index < arguments.length; index++) {\n       var source = arguments[index];\n       if (source !== undefined && source !== null) {\n         for (var nextKey in source) {\n           if (source.hasOwnProperty(nextKey)) {\n             output[nextKey] = source[nextKey];\n           }\n         }\n       }\n     }\n     return output;\n    };\n})();\n}\n\n``` \n\n## 扩展内容\n\n### 深度拷贝和前拷贝\n\njavascript中存储对象都是存地址的，所以浅拷贝是都指向同一块内存区块，而深拷贝则是另外开辟了一块区域，下面实例也可以看出这一点：\n\n\n``` javascript\n\n// 浅拷贝\nconst a = {t: 1, p: 'gg'};\nconst b = a;\nb.t = 3;\nconsole.log(a); // {t: 3, p: 'gg'}\nconsole.log(b); // {t: 3, p: 'gg'}\n\n//深拷贝\nconst c = {t: 1, p: 'gg'};\nconst d = deepCopy(c);\nd.t = 3;\nconsole.log(c); // {t: 1, p: 'gg'}\nconsole.log(d); // {t: 3, p: 'gg'}\n\n``` \n\n可以明显看出，浅拷贝在改变其中一个值时，会导致其他也一起改变，而深拷贝不会。\n\n我需要的是深拷贝的方法，然后发现原来es6 中有Object.assign() 这个方法，感觉可以拿来用了。 \n贴一下两个官方例子：\n\n\n``` javascript\n\n// Cloning an object\nvar obj = { a: 1 };\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n\n// Merging objects\nvar o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\n\n```\n\n是不是很完美，又可以clone又可以merge。在我这种情况下，我觉得我的代码量又可以减少了，比如：\n\n\n``` javascript\n\nconst defaultOpt = {\n    title: 'hello', \n    name: 'oo', \n    type: 'line'\n};\n// 原来可能需要这样\nconst opt1 = deepCopy(a);\nopt1.title = 'opt1';\nopt1.type = 'bar';\nopt1.extra = 'extra'; // 额外增加配置\n// 现在只要这样\nconst opt2 = Object.assign({}, a, {\n    title: 'opt2', \n    type: 'bar', \n    extra: 'extra'\n});\n\n```\n\n不过，很快，问题出现了，那就是merge和我想象的不一样且看例子：\n\n\n``` javascript\n\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    }\n};\n\nconst opt = Object.assign({}, defaultOpt, {\n    title: {\n        subtext: 'Yes, your world.'\n    }\n});\n\nconsole.log(opt);\n\n// 预期结果\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n// 实际结果\n{\n    title: {\n        subtext: 'Yes, your world.'\n    }\n}\n\n```\n\n原本想的是它只会覆盖subtext ，然而其实它直接覆盖了整个title ，这个让我比较郁闷，相当于它只merge根属性，下面的就不做处理了。 \n代码只能重构成相对麻烦一点的：\n\n``` javascript\n\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    }\n};\n\nconst opt = Object.assign({}, defaultOpt);\nopt.title.subtext = 'Yes, your world.';\n\nconsole.log(opt);\n// 结果正常\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n```\n\n这样用虽然麻烦一点，但是也还好，可以用了。不过。。。很快，又出现问题了，如下：\n\n``` javascript\nconst defaultOpt = {\n    title: {\n        text: 'hello world',\n        subtext: 'It\\'s my world.'\n    } \n};\n\nconst opt1 = Object.assign({}, defaultOpt);\nconst opt2 = Object.assign({}, defaultOpt);\nopt2.title.subtext = 'Yes, your world.';\n\nconsole.log('opt1:');\nconsole.log(opt1);\nconsole.log('opt2:');\nconsole.log(opt2);\n\n// 结果\nopt1:\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\nopt2:\n{\n    title: {\n        text: 'hello world',\n        subtext: 'Yes, your world.'\n    }\n}\n```\n\n上面结果发现两个配置变得一模一样，而其实我们并没有去更改opt1 的subtext ，只是改了opt2 的。 \n这说明一点：在title 这一层只是简单的浅拷贝 ，而没有继续深入的深拷贝。 \n\n**Object.assign() 只是一级属性复制，比浅拷贝多深拷贝了一层而已。用的时候，还是要注意这个问题的。**不过github上已经有很多好的解决方案，比如deep-merge 通过递归的方式逐层的去调用assign函数。Lodash提供了深拷贝的api方法，其实熟悉jquery的同学，extend这个api就能直接完美解决深拷贝的问题。\n\n\n#### 附\n\n发现一个可以简单实现深拷贝的方法，当然，有一定限制，如下：\n\n``` bash\nconst obj1 = JSON.parse(JSON.stringify(obj));\n``` \n\n思路就是将一个对象转成json字符串，然后又将字符串转回对象。但是在使用中还是会存在问题，进过测试会把function替换掉，使用的时候还得注意。","slug":"2017-04-11","published":1,"updated":"2017-08-19T13:21:41.000Z","_id":"cj1udxjnl0000g6ldjobm1u2z","layout":"post","photos":[],"link":"","content":"<h2 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h2><p>首先看一下函数的定义：<br>函数参数为一个目标对象（该对象作为最终的返回值）,源对象(此处可以为任意多个)。通过调用该函数可以拷贝所有可被枚举的自有属性值到目标对象中。</p>\n<p>Object.assign(target, …sources)</p>\n<p>这里我们需要强调的三点是：</p>\n<ol>\n<li>可被枚举的属性</li>\n<li>自有属性</li>\n<li>string或者Symbol类型是可以被直接分配的</li>\n</ol>\n<p>拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。</p>\n<a id=\"more\"></a>\n<h2 id=\"函数实例\"><a href=\"#函数实例\" class=\"headerlink\" title=\"函数实例\"></a>函数实例</h2><p>这里我们通过几个MDN上的例子来介绍一下使用方法：</p>\n<h3 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h3><p>我们参考上面的原型函数说明即可知道其最开始的o1因为设置为target，则调用其setter方法设置了其他对象的属性到自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, target object itself is changed.</span></div></pre></td></tr></table></figure>\n<h3 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h3><p>我们自定义了一些对象，这些对象有一些包含了不可枚举的属性,另外注意使用 Object.defineProperty 初始化的对象默认是不可枚举的属性。对于可枚举的对象我们可以直接使用Object.keys()获得,或者使用for-in循环遍历出来.</p>\n<p>对于不可枚举的属性，使用Object.assign的时候将被自动忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"comment\">// foo is an inherit property.</span></div><div class=\"line\">  bar: &#123;</div><div class=\"line\">    value: <span class=\"number\">2</span>  <span class=\"comment\">// bar is a non-enumerable property.</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  baz: &#123;</div><div class=\"line\">    value: <span class=\"number\">3</span>,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>  <span class=\"comment\">// baz is an own enumerable property.</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(copy); <span class=\"comment\">// &#123; baz: 3 &#125; </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">### 实例三</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">对于只读的属性，当分配新的对象覆盖他的时候，将抛出异常:</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'foo'</span>, &#123;</div><div class=\"line\">  value: <span class=\"number\">1</span>,</div><div class=\"line\">  writable: <span class=\"literal\">false</span></div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, &#123; <span class=\"attr\">bar</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//&#123;bar: 2, foo: 1&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\"><span class=\"comment\">//Uncaught TypeError: Cannot assign to read only property 'foo' of object '#&lt;Object&gt;'(…)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">## Polyfill</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">这里我们简单的看下如何实现es5版本的Object.assign：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">实现步骤：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">判断是否原生支持该函数，如果不存在的话创建一个立即执行函数，该函数将创建一个assign函数绑定到Object上。</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">判断参数是否正确(目的对象不能为空，我们可以直接设置&#123;&#125;传递进去,但必须设置该值)</span></div><div class=\"line\"><span class=\"string\">使用Object在原有的对象基础上返回该对象，并保存为out使用for…in循环遍历出所有的可枚举的自有对象。并复制给新的目标对象(hasOwnProperty返回非原型链上的属性)源码如下：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign != <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">     'use strict'</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (target === <span class=\"literal\">undefined</span> || target === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"keyword\">var</span> output = <span class=\"built_in\">Object</span>(target);</div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"built_in\">arguments</span>.length; index++) &#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index];</div><div class=\"line\">       <span class=\"keyword\">if</span> (source !== <span class=\"literal\">undefined</span> &amp;&amp; source !== <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nextKey <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (source.hasOwnProperty(nextKey)) &#123;</div><div class=\"line\">             output[nextKey] = source[nextKey];</div><div class=\"line\">           &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> output;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">## 扩展内容</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">### 深度拷贝和前拷贝</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">javascript中存储对象都是存地址的，所以浅拷贝是都指向同一块内存区块，而深拷贝则是另外开辟了一块区域，下面实例也可以看出这一点：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 浅拷贝</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">t</span>: <span class=\"number\">1</span>, <span class=\"attr\">p</span>: <span class=\"string\">'gg'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> b = a;</div><div class=\"line\">b.t = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//深拷贝</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = &#123;<span class=\"attr\">t</span>: <span class=\"number\">1</span>, <span class=\"attr\">p</span>: <span class=\"string\">'gg'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> d = deepCopy(c);</div><div class=\"line\">d.t = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;t: 1, p: 'gg'&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">可以明显看出，浅拷贝在改变其中一个值时，会导致其他也一起改变，而深拷贝不会。</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">我需要的是深拷贝的方法，然后发现原来es6 中有Object.assign() 这个方法，感觉可以拿来用了。 </span></div><div class=\"line\"><span class=\"string\">贴一下两个官方例子：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Cloning an object</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(copy); <span class=\"comment\">// &#123; a: 1 &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Merging objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, target object itself is changed.</span></div></pre></td></tr></table></figure>\n<p>是不是很完美，又可以clone又可以merge。在我这种情况下，我觉得我的代码量又可以减少了，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: <span class=\"string\">'hello'</span>, </div><div class=\"line\">    name: <span class=\"string\">'oo'</span>, </div><div class=\"line\">    type: <span class=\"string\">'line'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 原来可能需要这样</span></div><div class=\"line\"><span class=\"keyword\">const</span> opt1 = deepCopy(a);</div><div class=\"line\">opt1.title = <span class=\"string\">'opt1'</span>;</div><div class=\"line\">opt1.type = <span class=\"string\">'bar'</span>;</div><div class=\"line\">opt1.extra = <span class=\"string\">'extra'</span>; <span class=\"comment\">// 额外增加配置</span></div><div class=\"line\"><span class=\"comment\">// 现在只要这样</span></div><div class=\"line\"><span class=\"keyword\">const</span> opt2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, &#123;</div><div class=\"line\">    title: <span class=\"string\">'opt2'</span>, </div><div class=\"line\">    type: <span class=\"string\">'bar'</span>, </div><div class=\"line\">    extra: <span class=\"string\">'extra'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不过，很快，问题出现了，那就是merge和我想象的不一样且看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt, &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 预期结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 实际结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原本想的是它只会覆盖subtext ，然而其实它直接覆盖了整个title ，这个让我比较郁闷，相当于它只merge根属性，下面的就不做处理了。<br>代码只能重构成相对麻烦一点的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\">opt.title.subtext = <span class=\"string\">'Yes, your world.'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt);</div><div class=\"line\"><span class=\"comment\">// 结果正常</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样用虽然麻烦一点，但是也还好，可以用了。不过。。。很快，又出现问题了，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt1 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\"><span class=\"keyword\">const</span> opt2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\">opt2.title.subtext = <span class=\"string\">'Yes, your world.'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'opt1:'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'opt2:'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\">opt1:</div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">opt2:</div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面结果发现两个配置变得一模一样，而其实我们并没有去更改opt1 的subtext ，只是改了opt2 的。<br>这说明一点：在title 这一层只是简单的浅拷贝 ，而没有继续深入的深拷贝。 </p>\n<p><strong>Object.assign() 只是一级属性复制，比浅拷贝多深拷贝了一层而已。用的时候，还是要注意这个问题的。</strong>不过github上已经有很多好的解决方案，比如deep-merge 通过递归的方式逐层的去调用assign函数。Lodash提供了深拷贝的api方法，其实熟悉jquery的同学，extend这个api就能直接完美解决深拷贝的问题。</p>\n<h4 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h4><p>发现一个可以简单实现深拷贝的方法，当然，有一定限制，如下：</p>\n<pre><code class=\"bash\">const obj1 = JSON.parse(JSON.stringify(obj));\n</code></pre>\n<p>思路就是将一个对象转成json字符串，然后又将字符串转回对象。但是在使用中还是会存在问题，进过测试会把function替换掉，使用的时候还得注意。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h2><p>首先看一下函数的定义：<br>函数参数为一个目标对象（该对象作为最终的返回值）,源对象(此处可以为任意多个)。通过调用该函数可以拷贝所有可被枚举的自有属性值到目标对象中。</p>\n<p>Object.assign(target, …sources)</p>\n<p>这里我们需要强调的三点是：</p>\n<ol>\n<li>可被枚举的属性</li>\n<li>自有属性</li>\n<li>string或者Symbol类型是可以被直接分配的</li>\n</ol>\n<p>拷贝过程中将调用源对象的getter方法，并在target对象上使用setter方法实现目标对象的拷贝。</p>","more":"<h2 id=\"函数实例\"><a href=\"#函数实例\" class=\"headerlink\" title=\"函数实例\"></a>函数实例</h2><p>这里我们通过几个MDN上的例子来介绍一下使用方法：</p>\n<h3 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h3><p>我们参考上面的原型函数说明即可知道其最开始的o1因为设置为target，则调用其setter方法设置了其他对象的属性到自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, target object itself is changed.</span></div></pre></td></tr></table></figure>\n<h3 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h3><p>我们自定义了一些对象，这些对象有一些包含了不可枚举的属性,另外注意使用 Object.defineProperty 初始化的对象默认是不可枚举的属性。对于可枚举的对象我们可以直接使用Object.keys()获得,或者使用for-in循环遍历出来.</p>\n<p>对于不可枚举的属性，使用Object.assign的时候将被自动忽略。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"comment\">// foo is an inherit property.</span></div><div class=\"line\">  bar: &#123;</div><div class=\"line\">    value: <span class=\"number\">2</span>  <span class=\"comment\">// bar is a non-enumerable property.</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  baz: &#123;</div><div class=\"line\">    value: <span class=\"number\">3</span>,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>  <span class=\"comment\">// baz is an own enumerable property.</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(copy); <span class=\"comment\">// &#123; baz: 3 &#125; </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">### 实例三</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">对于只读的属性，当分配新的对象覆盖他的时候，将抛出异常:</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"string\">'foo'</span>, &#123;</div><div class=\"line\">  value: <span class=\"number\">1</span>,</div><div class=\"line\">  writable: <span class=\"literal\">false</span></div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, &#123; <span class=\"attr\">bar</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//&#123;bar: 2, foo: 1&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, &#123; <span class=\"attr\">foo</span>: <span class=\"number\">2</span> &#125;)</div><div class=\"line\"><span class=\"comment\">//Uncaught TypeError: Cannot assign to read only property 'foo' of object '#&lt;Object&gt;'(…)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">## Polyfill</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">这里我们简单的看下如何实现es5版本的Object.assign：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">实现步骤：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">判断是否原生支持该函数，如果不存在的话创建一个立即执行函数，该函数将创建一个assign函数绑定到Object上。</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">判断参数是否正确(目的对象不能为空，我们可以直接设置&#123;&#125;传递进去,但必须设置该值)</span></div><div class=\"line\"><span class=\"string\">使用Object在原有的对象基础上返回该对象，并保存为out使用for…in循环遍历出所有的可枚举的自有对象。并复制给新的目标对象(hasOwnProperty返回非原型链上的属性)源码如下：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign != <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">     'use strict'</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span> (target === <span class=\"literal\">undefined</span> || target === <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot convert undefined or null to object'</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">    </div><div class=\"line\">     <span class=\"keyword\">var</span> output = <span class=\"built_in\">Object</span>(target);</div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; <span class=\"built_in\">arguments</span>.length; index++) &#123;</div><div class=\"line\">       <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index];</div><div class=\"line\">       <span class=\"keyword\">if</span> (source !== <span class=\"literal\">undefined</span> &amp;&amp; source !== <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> nextKey <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (source.hasOwnProperty(nextKey)) &#123;</div><div class=\"line\">             output[nextKey] = source[nextKey];</div><div class=\"line\">           &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> output;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">## 扩展内容</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">### 深度拷贝和前拷贝</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">javascript中存储对象都是存地址的，所以浅拷贝是都指向同一块内存区块，而深拷贝则是另外开辟了一块区域，下面实例也可以看出这一点：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 浅拷贝</span></div><div class=\"line\"><span class=\"keyword\">const</span> a = &#123;<span class=\"attr\">t</span>: <span class=\"number\">1</span>, <span class=\"attr\">p</span>: <span class=\"string\">'gg'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> b = a;</div><div class=\"line\">b.t = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//深拷贝</span></div><div class=\"line\"><span class=\"keyword\">const</span> c = &#123;<span class=\"attr\">t</span>: <span class=\"number\">1</span>, <span class=\"attr\">p</span>: <span class=\"string\">'gg'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">const</span> d = deepCopy(c);</div><div class=\"line\">d.t = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// &#123;t: 1, p: 'gg'&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// &#123;t: 3, p: 'gg'&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">可以明显看出，浅拷贝在改变其中一个值时，会导致其他也一起改变，而深拷贝不会。</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">我需要的是深拷贝的方法，然后发现原来es6 中有Object.assign() 这个方法，感觉可以拿来用了。 </span></div><div class=\"line\"><span class=\"string\">贴一下两个官方例子：</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Cloning an object</span></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(copy); <span class=\"comment\">// &#123; a: 1 &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Merging objects</span></div><div class=\"line\"><span class=\"keyword\">var</span> o1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> o3 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(o1, o2, o3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(o1);  <span class=\"comment\">// &#123; a: 1, b: 2, c: 3 &#125;, target object itself is changed.</span></div></pre></td></tr></table></figure>\n<p>是不是很完美，又可以clone又可以merge。在我这种情况下，我觉得我的代码量又可以减少了，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: <span class=\"string\">'hello'</span>, </div><div class=\"line\">    name: <span class=\"string\">'oo'</span>, </div><div class=\"line\">    type: <span class=\"string\">'line'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 原来可能需要这样</span></div><div class=\"line\"><span class=\"keyword\">const</span> opt1 = deepCopy(a);</div><div class=\"line\">opt1.title = <span class=\"string\">'opt1'</span>;</div><div class=\"line\">opt1.type = <span class=\"string\">'bar'</span>;</div><div class=\"line\">opt1.extra = <span class=\"string\">'extra'</span>; <span class=\"comment\">// 额外增加配置</span></div><div class=\"line\"><span class=\"comment\">// 现在只要这样</span></div><div class=\"line\"><span class=\"keyword\">const</span> opt2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a, &#123;</div><div class=\"line\">    title: <span class=\"string\">'opt2'</span>, </div><div class=\"line\">    type: <span class=\"string\">'bar'</span>, </div><div class=\"line\">    extra: <span class=\"string\">'extra'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不过，很快，问题出现了，那就是merge和我想象的不一样且看例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt, &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 预期结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 实际结果</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原本想的是它只会覆盖subtext ，然而其实它直接覆盖了整个title ，这个让我比较郁闷，相当于它只merge根属性，下面的就不做处理了。<br>代码只能重构成相对麻烦一点的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\">opt.title.subtext = <span class=\"string\">'Yes, your world.'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt);</div><div class=\"line\"><span class=\"comment\">// 结果正常</span></div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样用虽然麻烦一点，但是也还好，可以用了。不过。。。很快，又出现问题了，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> defaultOpt = &#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'It\\'s my world.'</span></div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> opt1 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\"><span class=\"keyword\">const</span> opt2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, defaultOpt);</div><div class=\"line\">opt2.title.subtext = <span class=\"string\">'Yes, your world.'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'opt1:'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'opt2:'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(opt2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 结果</span></div><div class=\"line\">opt1:</div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">opt2:</div><div class=\"line\">&#123;</div><div class=\"line\">    title: &#123;</div><div class=\"line\">        text: <span class=\"string\">'hello world'</span>,</div><div class=\"line\">        subtext: <span class=\"string\">'Yes, your world.'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面结果发现两个配置变得一模一样，而其实我们并没有去更改opt1 的subtext ，只是改了opt2 的。<br>这说明一点：在title 这一层只是简单的浅拷贝 ，而没有继续深入的深拷贝。 </p>\n<p><strong>Object.assign() 只是一级属性复制，比浅拷贝多深拷贝了一层而已。用的时候，还是要注意这个问题的。</strong>不过github上已经有很多好的解决方案，比如deep-merge 通过递归的方式逐层的去调用assign函数。Lodash提供了深拷贝的api方法，其实熟悉jquery的同学，extend这个api就能直接完美解决深拷贝的问题。</p>\n<h4 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h4><p>发现一个可以简单实现深拷贝的方法，当然，有一定限制，如下：</p>\n<pre><code class=\"bash\">const obj1 = JSON.parse(JSON.stringify(obj));\n</code></pre>\n<p>思路就是将一个对象转成json字符串，然后又将字符串转回对象。但是在使用中还是会存在问题，进过测试会把function替换掉，使用的时候还得注意。</p>"},{"title":"理解JavaScript函数式编程","comments":1,"date":"2017-04-10T14:14:43.000Z","_content":"JavaScript 函数式编程是一个存在了很久的话题，但似乎从 2016 年开始，它变得越来越火热。这可能是因为 ES6 语法对于函数式编程更为友好，也可能是因为诸如 RxJS (ReactiveX) 等函数式框架的流行。\n\n看过许多关于函数式编程的讲解，但是其中大部分是停留在理论层面，还有一些是仅针对 Haskell 等纯函数式编程语言的。而本文旨在聊一聊我眼中的函数式编程在 JavaScript 中的具体实践，之所以是 “我眼中的” 即我所说的仅代表个人观点，可能和部分 严格概念 是有冲突的。\n\n本文将略去一大堆形式化的概念介绍，重点展示在 JavaScript 中到底什么是函数式的代码、函数式代码与一般写法有什么区别、函数式的代码能给我们带来什么好处以及常见的一些函数式模型都有哪些。\n\n<!-- more -->\n\n## 函数式编程\n\n我认为函数式编程可以理解为，以函数作为主要载体的编程方式，用函数去拆解、抽象一般的表达式\n\n与命令式相比，这样做的好处在哪？主要有以下几点：\n\n1. 语义更加清晰\n1. 可复用性更高\n1. 可维护性更好\n1. 作用域局限，副作用少\n\n## 基本的函数式编程\n下面例子是一个具体的函数式体现\n\n``` javascript\n// 一般写法\nconst arr = ['apple', 'pen', 'apple-pen'];\nfor(const i in arr){\n  const c = arr[i][0];\n  arr[i] = c.toUpperCase() + arr[i].slice(1);\n}\n\nconsole.log(arr);\n\n\n// 函数式写法一\nfunction upperFirst(word) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\nfunction wordToUpperCase(arr) {\n  return arr.map(upperFirst);\n}\n\nconsole.log(wordToUpperCase(['apple', 'pen', 'apple-pen']));\n\n\n// 函数式写法二\nconsole.log(arr.map(['apple', 'pen', 'apple-pen'], word => word[0].toUpperCase() + word.slice(1)));\n\n```\n\n当情况变得更加复杂时，表达式的写法会遇到几个问题：\n\n1. 表意不明显，逐渐变得难以维护\n1. 复用性差，会产生更多的代码量\n1. 会产生很多中间变量\n\n\n函数式编程很好的解决了上述问题。首先参看 函数式写法一，它利用了函数封装性将功能做拆解（粒度不唯一），并封装为不同的函数，而再利用组合的调用达到目的。这样做使得表意清晰，易于维护、复用以及扩展。其次利用 高阶函数，Array.map 代替 for…of 做数组遍历，减少了中间变量和操作。\n\n而 函数式写法一 和 函数式写法二 之间的主要差别在于，可以考虑函数是否后续有复用的可能，如果没有，则后者更优。\n\n\n## 链式优化\n\n从上面 函数式写法二 中我们可以看出，函数式代码在写的过程中，很容易造成 横向延展，即产生多层嵌套，下面我们举个比较极端点的例子。\n\n``` javascript\n// 计算数字之和\n\n\n// 一般写法\nconsole.log(1 + 2 + 3 - 4)\n\n\n// 函数式写法\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sub(a, b) {\n  return a - b;\n}\n\nconsole.log(sub(sum(sum(1, 2), 3), 4);\n\n``` \n\n本例仅为展示 横向延展 的比较极端的情况，随着函数的嵌套层数不断增多，导致代码的可读性大幅下降，还很容易产生错误。\n\n在这种情况下，我们可以考虑多种优化方式，比如下面的 链式优化 。\n\n``` javascript\n// 优化写法 (嗯，你没看错，这就是 lodash 的链式写法)\nconst utils = {\n  chain(a) {\n    this._temp = a;\n    return this;\n  },\n  sum(b) {\n    this._temp += b;\n    return this;\n  },\n  sub(b) {\n    this._temp -= b;\n    return this;\n  },\n  value() {\n    const _temp = this._temp;\n    this._temp = undefined;\n    return _temp;\n  }\n};\n\nconsole.log(utils.chain(1).sum(2).sum(3).sub(4).value());\n\n``` \n\n这样改写后，结构会整体变得比较清晰，而且链的每一环在做什么也可以很容易的展现出来。函数的嵌套和链式的对比还有一个很好的例子，那就是 回调函数 和 Promise 模式。\n\n``` javascript\n// 顺序请求两个接口\n\n\n// 回调函数\nimport $ from 'jquery';\n$.post('a/url/to/target', (rs) => {\n  if(rs){\n    $.post('a/url/to/another/target', (rs2) => {\n      if(rs2){\n        $.post('a/url/to/third/target');\n      }\n    });\n  }\n});\n\n\n// Promise\nimport request from 'catta';  // catta 是一个轻量级请求工具，支持 fetch,jsonp,ajax，无依赖\nrequest('a/url/to/target')\n  .then(rs => rs ? $.post('a/url/to/another/target') : Promise.reject())\n  .then(rs2 => rs2 ? $.post('a/url/to/third/target') : Promise.reject());\n``` \n\n随着回调函数嵌套层级和单层复杂度增加，它将会变得臃肿且难以维护，而 Promise 的链式结构，在高复杂度时，仍能纵向扩展，而且层次隔离很清晰。\n\n## 常见的函数式编程模型\n\n### 闭包（Closure）\n\n可以保留局部变量不被释放的代码块，被称为一个闭包\n\n闭包的概念比较抽象，相信大家都或多或少知道、用到这个特性\n\n那么闭包到底能给我们带来什么好处？\n\n先来看一下如何创建一个闭包：\n\n``` javascript\n// 创建一个闭包\nfunction makeCounter() {\n  let k = 0;\n\n  return function() {\n    return ++k;\n  };\n}\n\nconst counter = makeCounter();\n\nconsole.log(counter());  // 1\nconsole.log(counter());  // 2\n\n``` \nmakeCounter 这个函数的代码块，在返回的函数中，对局部变量 k ，进行了引用，导致局部变量无法在函数执行结束后，被系统回收掉，从而产生了闭包。而这个闭包的作用就是，“保留住“ 了局部变量，使内层函数调用时，可以重复使用该变量；而不同于全局变量，该变量只能在函数内部被引用。\n\n换句话说，闭包其实就是创造出了一些函数私有的 ”持久化变量“。\n\n所以从这个例子，我们可以总结出，闭包的创造条件是：\n\n1. 存在内、外两层函数\n1. 内层函数对外层函数的局部变量进行了引用\n\n\n###闭包的用途\n\n闭包的主要用途就是可以定义一些作用域局限的持久化变量，这些变量可以用来做缓存或者计算的中间量等等。\n\n``` javascript\n// 简单的缓存工具\n// 匿名函数创造了一个闭包\nconst cache = (function() {\n  const store = {};\n  \n  return {\n    get(key) {\n      return store[key];\n    },\n    set(key, val) {\n      store[key] = val;\n    }\n  }\n}());\n\ncache.set('a', 1);\ncache.get('a');  // 1\n\n``` \n上面例子是一个简单的缓存工具的实现，匿名函数创造了一个闭包，使得 store 对象 ，一直可以被引用，不会被回收。\n\n###闭包的弊端\n\n持久化变量不会被正常释放，持续占用内存空间，很容易造成内存浪费，所以一般需要一些额外手动的清理机制。\n\n##高阶函数\n\n接受或者返回一个函数的函数称为高阶函数\n\n听上去很高冷的一个词汇，但是其实我们经常用到，只是原来不知道他们的名字而已。JavaScript 语言是原生支持高阶函数的，因为 JavaScript 的函数是一等公民，它既可以作为参数又可以作为另一个函数的返回值使用。\n\n我们经常可以在 JavaScript 中见到许多原生的高阶函数，例如 Array.map , Array.reduce , Array.filter\n\n下面以 map 为例，我们看看他是如何使用的\n\n###map （映射）\n\n映射是对集合而言的，即把集合的每一项都做相同的变换，产生一个新的集合\n\nmap 作为一个高阶函数，他接受一个函数参数作为映射的逻辑\n\n``` javascript\n\n// 数组中每一项加一，组成一个新数组\n\n// 一般写法\nconst arr = [1,2,3];\nconst rs = [];\nfor(const n of arr){\n  rs.push(++n);\n}\nconsole.log(rs)\n\n\n// map改写\nconst arr = [1,2,3];\nconst rs = arr.map(n => ++n);\n\n``` \n\n上面一般写法，利用 for...of 循环的方式遍历数组会产生额外的操作，而且有改变原数组的风险\n\n而 map 函数封装了必要的操作，使我们仅需要关心映射逻辑的函数实现即可，减少了代码量，也降低了副作用产生的风险。\n\n###柯里化（Currying）\n\n给定一个函数的部分参数，生成一个接受其他参数的新函数\n\n可能不常听到这个名词，但是用过 undescore 或 lodash 的人都见过他。\n\n有一个神奇的 _.partial 函数，它就是柯里化的实现\n\n``` javascript\n// 获取目标文件对基础路径的相对路径\n\n\n// 一般写法\nconst BASE = '/path/to/base';\nconst relativePath = path.relative(BASE, '/some/path');\n\n\n// _.parical 改写\nconst BASE = '/path/to/base';\nconst relativeFromBase = _.partial(path.relative, BASE);\n\nconst relativePath = relativeFromBase('/some/path');\n``` \n通过 _.partial ，我们得到了新的函数 relativeFromBase ，这个函数在调用时就相当于调用 path.relative ，并默认将第一个参数传入 BASE ，后续传入的参数顺序后置。\n\n本例中，我们真正想完成的操作是每次获得相对于 BASE 的路径，而非相对于任何路径。柯里化可以使我们只关心函数的部分参数，使函数的用途更加清晰，调用更加简单。\n\n###组合（Composing）\n\n将多个函数的能力合并，创造一个新的函数\n\n同样你第一次见到他可能还是在 lodash 中，compose 方法（现在叫 flow）\n\n``` javascript\n// 数组中每个单词大写，做 Base64\n\n\n// 一般写法 (其中一种)\nconst arr = ['pen', 'apple', 'applypen'];\nconst rs = [];\nfor(const w of arr){\n  rs.push(btoa(w.toUpperCase()));\n}\nconsole.log(rs);\n\n\n// _.flow 改写\nconst arr = ['pen', 'apple', 'applypen'];\nconst upperAndBase64 = _.partialRight(_.map, _.flow(_.upperCase, btoa));\nconsole.log(upperAndBase64(arr));\n``` \n_.flow 将转大写和转 Base64 的函数的能力合并，生成一个新的函数。方便作为参数函数或后续复用。\n\n##自己的观点\n\n我理解的 JavaScript 函数式编程，将可以复用的功能提取出来，用函数方法来代替其实就是基本的函数编程思想，其实到最后会面临两个问题，一个是函数共用性好还是函数功能细分好，这其实都是根据自己具体需求而定的，个人认为函数功能还是细分好，这样方便维护，功能实现代码逻辑清晰。\n\n函数式编程就是书写清新的逻辑代码，其实也是一种解耦的形式罢了。","source":"_posts/2017-04-10.md","raw":"---\ntitle: 理解JavaScript函数式编程\ncomments: true\ndate: 2017-04-10 22:14:43\ntags: \n    - 'javascript'\n---\nJavaScript 函数式编程是一个存在了很久的话题，但似乎从 2016 年开始，它变得越来越火热。这可能是因为 ES6 语法对于函数式编程更为友好，也可能是因为诸如 RxJS (ReactiveX) 等函数式框架的流行。\n\n看过许多关于函数式编程的讲解，但是其中大部分是停留在理论层面，还有一些是仅针对 Haskell 等纯函数式编程语言的。而本文旨在聊一聊我眼中的函数式编程在 JavaScript 中的具体实践，之所以是 “我眼中的” 即我所说的仅代表个人观点，可能和部分 严格概念 是有冲突的。\n\n本文将略去一大堆形式化的概念介绍，重点展示在 JavaScript 中到底什么是函数式的代码、函数式代码与一般写法有什么区别、函数式的代码能给我们带来什么好处以及常见的一些函数式模型都有哪些。\n\n<!-- more -->\n\n## 函数式编程\n\n我认为函数式编程可以理解为，以函数作为主要载体的编程方式，用函数去拆解、抽象一般的表达式\n\n与命令式相比，这样做的好处在哪？主要有以下几点：\n\n1. 语义更加清晰\n1. 可复用性更高\n1. 可维护性更好\n1. 作用域局限，副作用少\n\n## 基本的函数式编程\n下面例子是一个具体的函数式体现\n\n``` javascript\n// 一般写法\nconst arr = ['apple', 'pen', 'apple-pen'];\nfor(const i in arr){\n  const c = arr[i][0];\n  arr[i] = c.toUpperCase() + arr[i].slice(1);\n}\n\nconsole.log(arr);\n\n\n// 函数式写法一\nfunction upperFirst(word) {\n  return word[0].toUpperCase() + word.slice(1);\n}\n\nfunction wordToUpperCase(arr) {\n  return arr.map(upperFirst);\n}\n\nconsole.log(wordToUpperCase(['apple', 'pen', 'apple-pen']));\n\n\n// 函数式写法二\nconsole.log(arr.map(['apple', 'pen', 'apple-pen'], word => word[0].toUpperCase() + word.slice(1)));\n\n```\n\n当情况变得更加复杂时，表达式的写法会遇到几个问题：\n\n1. 表意不明显，逐渐变得难以维护\n1. 复用性差，会产生更多的代码量\n1. 会产生很多中间变量\n\n\n函数式编程很好的解决了上述问题。首先参看 函数式写法一，它利用了函数封装性将功能做拆解（粒度不唯一），并封装为不同的函数，而再利用组合的调用达到目的。这样做使得表意清晰，易于维护、复用以及扩展。其次利用 高阶函数，Array.map 代替 for…of 做数组遍历，减少了中间变量和操作。\n\n而 函数式写法一 和 函数式写法二 之间的主要差别在于，可以考虑函数是否后续有复用的可能，如果没有，则后者更优。\n\n\n## 链式优化\n\n从上面 函数式写法二 中我们可以看出，函数式代码在写的过程中，很容易造成 横向延展，即产生多层嵌套，下面我们举个比较极端点的例子。\n\n``` javascript\n// 计算数字之和\n\n\n// 一般写法\nconsole.log(1 + 2 + 3 - 4)\n\n\n// 函数式写法\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction sub(a, b) {\n  return a - b;\n}\n\nconsole.log(sub(sum(sum(1, 2), 3), 4);\n\n``` \n\n本例仅为展示 横向延展 的比较极端的情况，随着函数的嵌套层数不断增多，导致代码的可读性大幅下降，还很容易产生错误。\n\n在这种情况下，我们可以考虑多种优化方式，比如下面的 链式优化 。\n\n``` javascript\n// 优化写法 (嗯，你没看错，这就是 lodash 的链式写法)\nconst utils = {\n  chain(a) {\n    this._temp = a;\n    return this;\n  },\n  sum(b) {\n    this._temp += b;\n    return this;\n  },\n  sub(b) {\n    this._temp -= b;\n    return this;\n  },\n  value() {\n    const _temp = this._temp;\n    this._temp = undefined;\n    return _temp;\n  }\n};\n\nconsole.log(utils.chain(1).sum(2).sum(3).sub(4).value());\n\n``` \n\n这样改写后，结构会整体变得比较清晰，而且链的每一环在做什么也可以很容易的展现出来。函数的嵌套和链式的对比还有一个很好的例子，那就是 回调函数 和 Promise 模式。\n\n``` javascript\n// 顺序请求两个接口\n\n\n// 回调函数\nimport $ from 'jquery';\n$.post('a/url/to/target', (rs) => {\n  if(rs){\n    $.post('a/url/to/another/target', (rs2) => {\n      if(rs2){\n        $.post('a/url/to/third/target');\n      }\n    });\n  }\n});\n\n\n// Promise\nimport request from 'catta';  // catta 是一个轻量级请求工具，支持 fetch,jsonp,ajax，无依赖\nrequest('a/url/to/target')\n  .then(rs => rs ? $.post('a/url/to/another/target') : Promise.reject())\n  .then(rs2 => rs2 ? $.post('a/url/to/third/target') : Promise.reject());\n``` \n\n随着回调函数嵌套层级和单层复杂度增加，它将会变得臃肿且难以维护，而 Promise 的链式结构，在高复杂度时，仍能纵向扩展，而且层次隔离很清晰。\n\n## 常见的函数式编程模型\n\n### 闭包（Closure）\n\n可以保留局部变量不被释放的代码块，被称为一个闭包\n\n闭包的概念比较抽象，相信大家都或多或少知道、用到这个特性\n\n那么闭包到底能给我们带来什么好处？\n\n先来看一下如何创建一个闭包：\n\n``` javascript\n// 创建一个闭包\nfunction makeCounter() {\n  let k = 0;\n\n  return function() {\n    return ++k;\n  };\n}\n\nconst counter = makeCounter();\n\nconsole.log(counter());  // 1\nconsole.log(counter());  // 2\n\n``` \nmakeCounter 这个函数的代码块，在返回的函数中，对局部变量 k ，进行了引用，导致局部变量无法在函数执行结束后，被系统回收掉，从而产生了闭包。而这个闭包的作用就是，“保留住“ 了局部变量，使内层函数调用时，可以重复使用该变量；而不同于全局变量，该变量只能在函数内部被引用。\n\n换句话说，闭包其实就是创造出了一些函数私有的 ”持久化变量“。\n\n所以从这个例子，我们可以总结出，闭包的创造条件是：\n\n1. 存在内、外两层函数\n1. 内层函数对外层函数的局部变量进行了引用\n\n\n###闭包的用途\n\n闭包的主要用途就是可以定义一些作用域局限的持久化变量，这些变量可以用来做缓存或者计算的中间量等等。\n\n``` javascript\n// 简单的缓存工具\n// 匿名函数创造了一个闭包\nconst cache = (function() {\n  const store = {};\n  \n  return {\n    get(key) {\n      return store[key];\n    },\n    set(key, val) {\n      store[key] = val;\n    }\n  }\n}());\n\ncache.set('a', 1);\ncache.get('a');  // 1\n\n``` \n上面例子是一个简单的缓存工具的实现，匿名函数创造了一个闭包，使得 store 对象 ，一直可以被引用，不会被回收。\n\n###闭包的弊端\n\n持久化变量不会被正常释放，持续占用内存空间，很容易造成内存浪费，所以一般需要一些额外手动的清理机制。\n\n##高阶函数\n\n接受或者返回一个函数的函数称为高阶函数\n\n听上去很高冷的一个词汇，但是其实我们经常用到，只是原来不知道他们的名字而已。JavaScript 语言是原生支持高阶函数的，因为 JavaScript 的函数是一等公民，它既可以作为参数又可以作为另一个函数的返回值使用。\n\n我们经常可以在 JavaScript 中见到许多原生的高阶函数，例如 Array.map , Array.reduce , Array.filter\n\n下面以 map 为例，我们看看他是如何使用的\n\n###map （映射）\n\n映射是对集合而言的，即把集合的每一项都做相同的变换，产生一个新的集合\n\nmap 作为一个高阶函数，他接受一个函数参数作为映射的逻辑\n\n``` javascript\n\n// 数组中每一项加一，组成一个新数组\n\n// 一般写法\nconst arr = [1,2,3];\nconst rs = [];\nfor(const n of arr){\n  rs.push(++n);\n}\nconsole.log(rs)\n\n\n// map改写\nconst arr = [1,2,3];\nconst rs = arr.map(n => ++n);\n\n``` \n\n上面一般写法，利用 for...of 循环的方式遍历数组会产生额外的操作，而且有改变原数组的风险\n\n而 map 函数封装了必要的操作，使我们仅需要关心映射逻辑的函数实现即可，减少了代码量，也降低了副作用产生的风险。\n\n###柯里化（Currying）\n\n给定一个函数的部分参数，生成一个接受其他参数的新函数\n\n可能不常听到这个名词，但是用过 undescore 或 lodash 的人都见过他。\n\n有一个神奇的 _.partial 函数，它就是柯里化的实现\n\n``` javascript\n// 获取目标文件对基础路径的相对路径\n\n\n// 一般写法\nconst BASE = '/path/to/base';\nconst relativePath = path.relative(BASE, '/some/path');\n\n\n// _.parical 改写\nconst BASE = '/path/to/base';\nconst relativeFromBase = _.partial(path.relative, BASE);\n\nconst relativePath = relativeFromBase('/some/path');\n``` \n通过 _.partial ，我们得到了新的函数 relativeFromBase ，这个函数在调用时就相当于调用 path.relative ，并默认将第一个参数传入 BASE ，后续传入的参数顺序后置。\n\n本例中，我们真正想完成的操作是每次获得相对于 BASE 的路径，而非相对于任何路径。柯里化可以使我们只关心函数的部分参数，使函数的用途更加清晰，调用更加简单。\n\n###组合（Composing）\n\n将多个函数的能力合并，创造一个新的函数\n\n同样你第一次见到他可能还是在 lodash 中，compose 方法（现在叫 flow）\n\n``` javascript\n// 数组中每个单词大写，做 Base64\n\n\n// 一般写法 (其中一种)\nconst arr = ['pen', 'apple', 'applypen'];\nconst rs = [];\nfor(const w of arr){\n  rs.push(btoa(w.toUpperCase()));\n}\nconsole.log(rs);\n\n\n// _.flow 改写\nconst arr = ['pen', 'apple', 'applypen'];\nconst upperAndBase64 = _.partialRight(_.map, _.flow(_.upperCase, btoa));\nconsole.log(upperAndBase64(arr));\n``` \n_.flow 将转大写和转 Base64 的函数的能力合并，生成一个新的函数。方便作为参数函数或后续复用。\n\n##自己的观点\n\n我理解的 JavaScript 函数式编程，将可以复用的功能提取出来，用函数方法来代替其实就是基本的函数编程思想，其实到最后会面临两个问题，一个是函数共用性好还是函数功能细分好，这其实都是根据自己具体需求而定的，个人认为函数功能还是细分好，这样方便维护，功能实现代码逻辑清晰。\n\n函数式编程就是书写清新的逻辑代码，其实也是一种解耦的形式罢了。","slug":"2017-04-10","published":1,"updated":"2017-08-19T13:21:37.000Z","_id":"cj1udxjnr0002g6ldturlh7z6","layout":"post","photos":[],"link":"","content":"<p>JavaScript 函数式编程是一个存在了很久的话题，但似乎从 2016 年开始，它变得越来越火热。这可能是因为 ES6 语法对于函数式编程更为友好，也可能是因为诸如 RxJS (ReactiveX) 等函数式框架的流行。</p>\n<p>看过许多关于函数式编程的讲解，但是其中大部分是停留在理论层面，还有一些是仅针对 Haskell 等纯函数式编程语言的。而本文旨在聊一聊我眼中的函数式编程在 JavaScript 中的具体实践，之所以是 “我眼中的” 即我所说的仅代表个人观点，可能和部分 严格概念 是有冲突的。</p>\n<p>本文将略去一大堆形式化的概念介绍，重点展示在 JavaScript 中到底什么是函数式的代码、函数式代码与一般写法有什么区别、函数式的代码能给我们带来什么好处以及常见的一些函数式模型都有哪些。</p>\n<a id=\"more\"></a>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>我认为函数式编程可以理解为，以函数作为主要载体的编程方式，用函数去拆解、抽象一般的表达式</p>\n<p>与命令式相比，这样做的好处在哪？主要有以下几点：</p>\n<ol>\n<li>语义更加清晰</li>\n<li>可复用性更高</li>\n<li>可维护性更好</li>\n<li>作用域局限，副作用少</li>\n</ol>\n<h2 id=\"基本的函数式编程\"><a href=\"#基本的函数式编程\" class=\"headerlink\" title=\"基本的函数式编程\"></a>基本的函数式编程</h2><p>下面例子是一个具体的函数式体现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般写法</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> arr)&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> c = arr[i][<span class=\"number\">0</span>];</div><div class=\"line\">  arr[i] = c.toUpperCase() + arr[i].slice(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数式写法一</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upperFirst</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wordToUpperCase</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.map(upperFirst);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(wordToUpperCase([<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>]));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数式写法二</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.map([<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>], word =&gt; word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>)));</div></pre></td></tr></table></figure>\n<p>当情况变得更加复杂时，表达式的写法会遇到几个问题：</p>\n<ol>\n<li>表意不明显，逐渐变得难以维护</li>\n<li>复用性差，会产生更多的代码量</li>\n<li>会产生很多中间变量</li>\n</ol>\n<p>函数式编程很好的解决了上述问题。首先参看 函数式写法一，它利用了函数封装性将功能做拆解（粒度不唯一），并封装为不同的函数，而再利用组合的调用达到目的。这样做使得表意清晰，易于维护、复用以及扩展。其次利用 高阶函数，Array.map 代替 for…of 做数组遍历，减少了中间变量和操作。</p>\n<p>而 函数式写法一 和 函数式写法二 之间的主要差别在于，可以考虑函数是否后续有复用的可能，如果没有，则后者更优。</p>\n<h2 id=\"链式优化\"><a href=\"#链式优化\" class=\"headerlink\" title=\"链式优化\"></a>链式优化</h2><p>从上面 函数式写法二 中我们可以看出，函数式代码在写的过程中，很容易造成 横向延展，即产生多层嵌套，下面我们举个比较极端点的例子。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 计算数字之和</span>\n\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> - <span class=\"number\">4</span>)\n\n\n<span class=\"comment\">// 函数式写法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>{\n  <span class=\"keyword\">return</span> a + b;\n}\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">a, b</span>) </span>{\n  <span class=\"keyword\">return</span> a - b;\n}\n\n<span class=\"built_in\">console</span>.log(sub(sum(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>), <span class=\"number\">4</span>);\n</code></pre>\n<p>本例仅为展示 横向延展 的比较极端的情况，随着函数的嵌套层数不断增多，导致代码的可读性大幅下降，还很容易产生错误。</p>\n<p>在这种情况下，我们可以考虑多种优化方式，比如下面的 链式优化 。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 优化写法 (嗯，你没看错，这就是 lodash 的链式写法)</span>\n<span class=\"keyword\">const</span> utils = {\n  chain(a) {\n    <span class=\"keyword\">this</span>._temp = a;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  sum(b) {\n    <span class=\"keyword\">this</span>._temp += b;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  sub(b) {\n    <span class=\"keyword\">this</span>._temp -= b;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  value() {\n    <span class=\"keyword\">const</span> _temp = <span class=\"keyword\">this</span>._temp;\n    <span class=\"keyword\">this</span>._temp = <span class=\"literal\">undefined</span>;\n    <span class=\"keyword\">return</span> _temp;\n  }\n};\n\n<span class=\"built_in\">console</span>.log(utils.chain(<span class=\"number\">1</span>).sum(<span class=\"number\">2</span>).sum(<span class=\"number\">3</span>).sub(<span class=\"number\">4</span>).value());\n</code></pre>\n<p>这样改写后，结构会整体变得比较清晰，而且链的每一环在做什么也可以很容易的展现出来。函数的嵌套和链式的对比还有一个很好的例子，那就是 回调函数 和 Promise 模式。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 顺序请求两个接口</span>\n\n\n<span class=\"comment\">// 回调函数</span>\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;\n$.post(<span class=\"string\">'a/url/to/target'</span>, (rs) =&gt; {\n  <span class=\"keyword\">if</span>(rs){\n    $.post(<span class=\"string\">'a/url/to/another/target'</span>, (rs2) =&gt; {\n      <span class=\"keyword\">if</span>(rs2){\n        $.post(<span class=\"string\">'a/url/to/third/target'</span>);\n      }\n    });\n  }\n});\n\n\n<span class=\"comment\">// Promise</span>\n<span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'catta'</span>;  <span class=\"comment\">// catta 是一个轻量级请求工具，支持 fetch,jsonp,ajax，无依赖</span>\nrequest(<span class=\"string\">'a/url/to/target'</span>)\n  .then(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> rs ? $.post(<span class=\"string\">'a/url/to/another/target'</span>) : <span class=\"built_in\">Promise</span>.reject())\n  .then(<span class=\"function\"><span class=\"params\">rs2</span> =&gt;</span> rs2 ? $.post(<span class=\"string\">'a/url/to/third/target'</span>) : <span class=\"built_in\">Promise</span>.reject());\n</code></pre>\n<p>随着回调函数嵌套层级和单层复杂度增加，它将会变得臃肿且难以维护，而 Promise 的链式结构，在高复杂度时，仍能纵向扩展，而且层次隔离很清晰。</p>\n<h2 id=\"常见的函数式编程模型\"><a href=\"#常见的函数式编程模型\" class=\"headerlink\" title=\"常见的函数式编程模型\"></a>常见的函数式编程模型</h2><h3 id=\"闭包（Closure）\"><a href=\"#闭包（Closure）\" class=\"headerlink\" title=\"闭包（Closure）\"></a>闭包（Closure）</h3><p>可以保留局部变量不被释放的代码块，被称为一个闭包</p>\n<p>闭包的概念比较抽象，相信大家都或多或少知道、用到这个特性</p>\n<p>那么闭包到底能给我们带来什么好处？</p>\n<p>先来看一下如何创建一个闭包：</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 创建一个闭包</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCounter</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">let</span> k = <span class=\"number\">0</span>;\n\n  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> ++k;\n  };\n}\n\n<span class=\"keyword\">const</span> counter = makeCounter();\n\n<span class=\"built_in\">console</span>.log(counter());  <span class=\"comment\">// 1</span>\n<span class=\"built_in\">console</span>.log(counter());  <span class=\"comment\">// 2</span>\n</code></pre>\n<p>makeCounter 这个函数的代码块，在返回的函数中，对局部变量 k ，进行了引用，导致局部变量无法在函数执行结束后，被系统回收掉，从而产生了闭包。而这个闭包的作用就是，“保留住“ 了局部变量，使内层函数调用时，可以重复使用该变量；而不同于全局变量，该变量只能在函数内部被引用。</p>\n<p>换句话说，闭包其实就是创造出了一些函数私有的 ”持久化变量“。</p>\n<p>所以从这个例子，我们可以总结出，闭包的创造条件是：</p>\n<ol>\n<li>存在内、外两层函数</li>\n<li>内层函数对外层函数的局部变量进行了引用</li>\n</ol>\n<p>###闭包的用途</p>\n<p>闭包的主要用途就是可以定义一些作用域局限的持久化变量，这些变量可以用来做缓存或者计算的中间量等等。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 简单的缓存工具</span>\n<span class=\"comment\">// 匿名函数创造了一个闭包</span>\n<span class=\"keyword\">const</span> cache = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">const</span> store = {};\n\n  <span class=\"keyword\">return</span> {\n    get(key) {\n      <span class=\"keyword\">return</span> store[key];\n    },\n    set(key, val) {\n      store[key] = val;\n    }\n  }\n}());\n\ncache.set(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\ncache.get(<span class=\"string\">'a'</span>);  <span class=\"comment\">// 1</span>\n</code></pre>\n<p>上面例子是一个简单的缓存工具的实现，匿名函数创造了一个闭包，使得 store 对象 ，一直可以被引用，不会被回收。</p>\n<p>###闭包的弊端</p>\n<p>持久化变量不会被正常释放，持续占用内存空间，很容易造成内存浪费，所以一般需要一些额外手动的清理机制。</p>\n<p>##高阶函数</p>\n<p>接受或者返回一个函数的函数称为高阶函数</p>\n<p>听上去很高冷的一个词汇，但是其实我们经常用到，只是原来不知道他们的名字而已。JavaScript 语言是原生支持高阶函数的，因为 JavaScript 的函数是一等公民，它既可以作为参数又可以作为另一个函数的返回值使用。</p>\n<p>我们经常可以在 JavaScript 中见到许多原生的高阶函数，例如 Array.map , Array.reduce , Array.filter</p>\n<p>下面以 map 为例，我们看看他是如何使用的</p>\n<p>###map （映射）</p>\n<p>映射是对集合而言的，即把集合的每一项都做相同的变换，产生一个新的集合</p>\n<p>map 作为一个高阶函数，他接受一个函数参数作为映射的逻辑</p>\n<pre><code class=\"javascript\">\n<span class=\"comment\">// 数组中每一项加一，组成一个新数组</span>\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n<span class=\"keyword\">const</span> rs = [];\n<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">of</span> arr){\n  rs.push(++n);\n}\n<span class=\"built_in\">console</span>.log(rs)\n\n\n<span class=\"comment\">// map改写</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n<span class=\"keyword\">const</span> rs = arr.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> ++n);\n</code></pre>\n<p>上面一般写法，利用 for…of 循环的方式遍历数组会产生额外的操作，而且有改变原数组的风险</p>\n<p>而 map 函数封装了必要的操作，使我们仅需要关心映射逻辑的函数实现即可，减少了代码量，也降低了副作用产生的风险。</p>\n<p>###柯里化（Currying）</p>\n<p>给定一个函数的部分参数，生成一个接受其他参数的新函数</p>\n<p>可能不常听到这个名词，但是用过 undescore 或 lodash 的人都见过他。</p>\n<p>有一个神奇的 _.partial 函数，它就是柯里化的实现</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 获取目标文件对基础路径的相对路径</span>\n\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"keyword\">const</span> BASE = <span class=\"string\">'/path/to/base'</span>;\n<span class=\"keyword\">const</span> relativePath = path.relative(BASE, <span class=\"string\">'/some/path'</span>);\n\n\n<span class=\"comment\">// _.parical 改写</span>\n<span class=\"keyword\">const</span> BASE = <span class=\"string\">'/path/to/base'</span>;\n<span class=\"keyword\">const</span> relativeFromBase = _.partial(path.relative, BASE);\n\n<span class=\"keyword\">const</span> relativePath = relativeFromBase(<span class=\"string\">'/some/path'</span>);\n</code></pre>\n<p>通过 _.partial ，我们得到了新的函数 relativeFromBase ，这个函数在调用时就相当于调用 path.relative ，并默认将第一个参数传入 BASE ，后续传入的参数顺序后置。</p>\n<p>本例中，我们真正想完成的操作是每次获得相对于 BASE 的路径，而非相对于任何路径。柯里化可以使我们只关心函数的部分参数，使函数的用途更加清晰，调用更加简单。</p>\n<p>###组合（Composing）</p>\n<p>将多个函数的能力合并，创造一个新的函数</p>\n<p>同样你第一次见到他可能还是在 lodash 中，compose 方法（现在叫 flow）</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 数组中每个单词大写，做 Base64</span>\n\n\n<span class=\"comment\">// 一般写法 (其中一种)</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"string\">'pen'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'applypen'</span>];\n<span class=\"keyword\">const</span> rs = [];\n<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> w <span class=\"keyword\">of</span> arr){\n  rs.push(btoa(w.toUpperCase()));\n}\n<span class=\"built_in\">console</span>.log(rs);\n\n\n<span class=\"comment\">// _.flow 改写</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"string\">'pen'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'applypen'</span>];\n<span class=\"keyword\">const</span> upperAndBase64 = _.partialRight(_.map, _.flow(_.upperCase, btoa));\n<span class=\"built_in\">console</span>.log(upperAndBase64(arr));\n</code></pre>\n<p>_.flow 将转大写和转 Base64 的函数的能力合并，生成一个新的函数。方便作为参数函数或后续复用。</p>\n<p>##自己的观点</p>\n<p>我理解的 JavaScript 函数式编程，将可以复用的功能提取出来，用函数方法来代替其实就是基本的函数编程思想，其实到最后会面临两个问题，一个是函数共用性好还是函数功能细分好，这其实都是根据自己具体需求而定的，个人认为函数功能还是细分好，这样方便维护，功能实现代码逻辑清晰。</p>\n<p>函数式编程就是书写清新的逻辑代码，其实也是一种解耦的形式罢了。</p>\n","site":{"data":{}},"excerpt":"<p>JavaScript 函数式编程是一个存在了很久的话题，但似乎从 2016 年开始，它变得越来越火热。这可能是因为 ES6 语法对于函数式编程更为友好，也可能是因为诸如 RxJS (ReactiveX) 等函数式框架的流行。</p>\n<p>看过许多关于函数式编程的讲解，但是其中大部分是停留在理论层面，还有一些是仅针对 Haskell 等纯函数式编程语言的。而本文旨在聊一聊我眼中的函数式编程在 JavaScript 中的具体实践，之所以是 “我眼中的” 即我所说的仅代表个人观点，可能和部分 严格概念 是有冲突的。</p>\n<p>本文将略去一大堆形式化的概念介绍，重点展示在 JavaScript 中到底什么是函数式的代码、函数式代码与一般写法有什么区别、函数式的代码能给我们带来什么好处以及常见的一些函数式模型都有哪些。</p>","more":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><p>我认为函数式编程可以理解为，以函数作为主要载体的编程方式，用函数去拆解、抽象一般的表达式</p>\n<p>与命令式相比，这样做的好处在哪？主要有以下几点：</p>\n<ol>\n<li>语义更加清晰</li>\n<li>可复用性更高</li>\n<li>可维护性更好</li>\n<li>作用域局限，副作用少</li>\n</ol>\n<h2 id=\"基本的函数式编程\"><a href=\"#基本的函数式编程\" class=\"headerlink\" title=\"基本的函数式编程\"></a>基本的函数式编程</h2><p>下面例子是一个具体的函数式体现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一般写法</span></div><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> arr)&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> c = arr[i][<span class=\"number\">0</span>];</div><div class=\"line\">  arr[i] = c.toUpperCase() + arr[i].slice(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数式写法一</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upperFirst</span>(<span class=\"params\">word</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wordToUpperCase</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.map(upperFirst);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(wordToUpperCase([<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>]));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数式写法二</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr.map([<span class=\"string\">'apple'</span>, <span class=\"string\">'pen'</span>, <span class=\"string\">'apple-pen'</span>], word =&gt; word[<span class=\"number\">0</span>].toUpperCase() + word.slice(<span class=\"number\">1</span>)));</div></pre></td></tr></table></figure>\n<p>当情况变得更加复杂时，表达式的写法会遇到几个问题：</p>\n<ol>\n<li>表意不明显，逐渐变得难以维护</li>\n<li>复用性差，会产生更多的代码量</li>\n<li>会产生很多中间变量</li>\n</ol>\n<p>函数式编程很好的解决了上述问题。首先参看 函数式写法一，它利用了函数封装性将功能做拆解（粒度不唯一），并封装为不同的函数，而再利用组合的调用达到目的。这样做使得表意清晰，易于维护、复用以及扩展。其次利用 高阶函数，Array.map 代替 for…of 做数组遍历，减少了中间变量和操作。</p>\n<p>而 函数式写法一 和 函数式写法二 之间的主要差别在于，可以考虑函数是否后续有复用的可能，如果没有，则后者更优。</p>\n<h2 id=\"链式优化\"><a href=\"#链式优化\" class=\"headerlink\" title=\"链式优化\"></a>链式优化</h2><p>从上面 函数式写法二 中我们可以看出，函数式代码在写的过程中，很容易造成 横向延展，即产生多层嵌套，下面我们举个比较极端点的例子。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 计算数字之和</span>\n\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> - <span class=\"number\">4</span>)\n\n\n<span class=\"comment\">// 函数式写法</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>{\n  <span class=\"keyword\">return</span> a + b;\n}\n\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">a, b</span>) </span>{\n  <span class=\"keyword\">return</span> a - b;\n}\n\n<span class=\"built_in\">console</span>.log(sub(sum(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>), <span class=\"number\">4</span>);\n</code></pre>\n<p>本例仅为展示 横向延展 的比较极端的情况，随着函数的嵌套层数不断增多，导致代码的可读性大幅下降，还很容易产生错误。</p>\n<p>在这种情况下，我们可以考虑多种优化方式，比如下面的 链式优化 。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 优化写法 (嗯，你没看错，这就是 lodash 的链式写法)</span>\n<span class=\"keyword\">const</span> utils = {\n  chain(a) {\n    <span class=\"keyword\">this</span>._temp = a;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  sum(b) {\n    <span class=\"keyword\">this</span>._temp += b;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  sub(b) {\n    <span class=\"keyword\">this</span>._temp -= b;\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  },\n  value() {\n    <span class=\"keyword\">const</span> _temp = <span class=\"keyword\">this</span>._temp;\n    <span class=\"keyword\">this</span>._temp = <span class=\"literal\">undefined</span>;\n    <span class=\"keyword\">return</span> _temp;\n  }\n};\n\n<span class=\"built_in\">console</span>.log(utils.chain(<span class=\"number\">1</span>).sum(<span class=\"number\">2</span>).sum(<span class=\"number\">3</span>).sub(<span class=\"number\">4</span>).value());\n</code></pre>\n<p>这样改写后，结构会整体变得比较清晰，而且链的每一环在做什么也可以很容易的展现出来。函数的嵌套和链式的对比还有一个很好的例子，那就是 回调函数 和 Promise 模式。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 顺序请求两个接口</span>\n\n\n<span class=\"comment\">// 回调函数</span>\n<span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;\n$.post(<span class=\"string\">'a/url/to/target'</span>, (rs) =&gt; {\n  <span class=\"keyword\">if</span>(rs){\n    $.post(<span class=\"string\">'a/url/to/another/target'</span>, (rs2) =&gt; {\n      <span class=\"keyword\">if</span>(rs2){\n        $.post(<span class=\"string\">'a/url/to/third/target'</span>);\n      }\n    });\n  }\n});\n\n\n<span class=\"comment\">// Promise</span>\n<span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">'catta'</span>;  <span class=\"comment\">// catta 是一个轻量级请求工具，支持 fetch,jsonp,ajax，无依赖</span>\nrequest(<span class=\"string\">'a/url/to/target'</span>)\n  .then(<span class=\"function\"><span class=\"params\">rs</span> =&gt;</span> rs ? $.post(<span class=\"string\">'a/url/to/another/target'</span>) : <span class=\"built_in\">Promise</span>.reject())\n  .then(<span class=\"function\"><span class=\"params\">rs2</span> =&gt;</span> rs2 ? $.post(<span class=\"string\">'a/url/to/third/target'</span>) : <span class=\"built_in\">Promise</span>.reject());\n</code></pre>\n<p>随着回调函数嵌套层级和单层复杂度增加，它将会变得臃肿且难以维护，而 Promise 的链式结构，在高复杂度时，仍能纵向扩展，而且层次隔离很清晰。</p>\n<h2 id=\"常见的函数式编程模型\"><a href=\"#常见的函数式编程模型\" class=\"headerlink\" title=\"常见的函数式编程模型\"></a>常见的函数式编程模型</h2><h3 id=\"闭包（Closure）\"><a href=\"#闭包（Closure）\" class=\"headerlink\" title=\"闭包（Closure）\"></a>闭包（Closure）</h3><p>可以保留局部变量不被释放的代码块，被称为一个闭包</p>\n<p>闭包的概念比较抽象，相信大家都或多或少知道、用到这个特性</p>\n<p>那么闭包到底能给我们带来什么好处？</p>\n<p>先来看一下如何创建一个闭包：</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 创建一个闭包</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeCounter</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">let</span> k = <span class=\"number\">0</span>;\n\n  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">return</span> ++k;\n  };\n}\n\n<span class=\"keyword\">const</span> counter = makeCounter();\n\n<span class=\"built_in\">console</span>.log(counter());  <span class=\"comment\">// 1</span>\n<span class=\"built_in\">console</span>.log(counter());  <span class=\"comment\">// 2</span>\n</code></pre>\n<p>makeCounter 这个函数的代码块，在返回的函数中，对局部变量 k ，进行了引用，导致局部变量无法在函数执行结束后，被系统回收掉，从而产生了闭包。而这个闭包的作用就是，“保留住“ 了局部变量，使内层函数调用时，可以重复使用该变量；而不同于全局变量，该变量只能在函数内部被引用。</p>\n<p>换句话说，闭包其实就是创造出了一些函数私有的 ”持久化变量“。</p>\n<p>所以从这个例子，我们可以总结出，闭包的创造条件是：</p>\n<ol>\n<li>存在内、外两层函数</li>\n<li>内层函数对外层函数的局部变量进行了引用</li>\n</ol>\n<p>###闭包的用途</p>\n<p>闭包的主要用途就是可以定义一些作用域局限的持久化变量，这些变量可以用来做缓存或者计算的中间量等等。</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 简单的缓存工具</span>\n<span class=\"comment\">// 匿名函数创造了一个闭包</span>\n<span class=\"keyword\">const</span> cache = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">const</span> store = {};\n\n  <span class=\"keyword\">return</span> {\n    get(key) {\n      <span class=\"keyword\">return</span> store[key];\n    },\n    set(key, val) {\n      store[key] = val;\n    }\n  }\n}());\n\ncache.set(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\ncache.get(<span class=\"string\">'a'</span>);  <span class=\"comment\">// 1</span>\n</code></pre>\n<p>上面例子是一个简单的缓存工具的实现，匿名函数创造了一个闭包，使得 store 对象 ，一直可以被引用，不会被回收。</p>\n<p>###闭包的弊端</p>\n<p>持久化变量不会被正常释放，持续占用内存空间，很容易造成内存浪费，所以一般需要一些额外手动的清理机制。</p>\n<p>##高阶函数</p>\n<p>接受或者返回一个函数的函数称为高阶函数</p>\n<p>听上去很高冷的一个词汇，但是其实我们经常用到，只是原来不知道他们的名字而已。JavaScript 语言是原生支持高阶函数的，因为 JavaScript 的函数是一等公民，它既可以作为参数又可以作为另一个函数的返回值使用。</p>\n<p>我们经常可以在 JavaScript 中见到许多原生的高阶函数，例如 Array.map , Array.reduce , Array.filter</p>\n<p>下面以 map 为例，我们看看他是如何使用的</p>\n<p>###map （映射）</p>\n<p>映射是对集合而言的，即把集合的每一项都做相同的变换，产生一个新的集合</p>\n<p>map 作为一个高阶函数，他接受一个函数参数作为映射的逻辑</p>\n<pre><code class=\"javascript\">\n<span class=\"comment\">// 数组中每一项加一，组成一个新数组</span>\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n<span class=\"keyword\">const</span> rs = [];\n<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">of</span> arr){\n  rs.push(++n);\n}\n<span class=\"built_in\">console</span>.log(rs)\n\n\n<span class=\"comment\">// map改写</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n<span class=\"keyword\">const</span> rs = arr.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> ++n);\n</code></pre>\n<p>上面一般写法，利用 for…of 循环的方式遍历数组会产生额外的操作，而且有改变原数组的风险</p>\n<p>而 map 函数封装了必要的操作，使我们仅需要关心映射逻辑的函数实现即可，减少了代码量，也降低了副作用产生的风险。</p>\n<p>###柯里化（Currying）</p>\n<p>给定一个函数的部分参数，生成一个接受其他参数的新函数</p>\n<p>可能不常听到这个名词，但是用过 undescore 或 lodash 的人都见过他。</p>\n<p>有一个神奇的 _.partial 函数，它就是柯里化的实现</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 获取目标文件对基础路径的相对路径</span>\n\n\n<span class=\"comment\">// 一般写法</span>\n<span class=\"keyword\">const</span> BASE = <span class=\"string\">'/path/to/base'</span>;\n<span class=\"keyword\">const</span> relativePath = path.relative(BASE, <span class=\"string\">'/some/path'</span>);\n\n\n<span class=\"comment\">// _.parical 改写</span>\n<span class=\"keyword\">const</span> BASE = <span class=\"string\">'/path/to/base'</span>;\n<span class=\"keyword\">const</span> relativeFromBase = _.partial(path.relative, BASE);\n\n<span class=\"keyword\">const</span> relativePath = relativeFromBase(<span class=\"string\">'/some/path'</span>);\n</code></pre>\n<p>通过 _.partial ，我们得到了新的函数 relativeFromBase ，这个函数在调用时就相当于调用 path.relative ，并默认将第一个参数传入 BASE ，后续传入的参数顺序后置。</p>\n<p>本例中，我们真正想完成的操作是每次获得相对于 BASE 的路径，而非相对于任何路径。柯里化可以使我们只关心函数的部分参数，使函数的用途更加清晰，调用更加简单。</p>\n<p>###组合（Composing）</p>\n<p>将多个函数的能力合并，创造一个新的函数</p>\n<p>同样你第一次见到他可能还是在 lodash 中，compose 方法（现在叫 flow）</p>\n<pre><code class=\"javascript\"><span class=\"comment\">// 数组中每个单词大写，做 Base64</span>\n\n\n<span class=\"comment\">// 一般写法 (其中一种)</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"string\">'pen'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'applypen'</span>];\n<span class=\"keyword\">const</span> rs = [];\n<span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> w <span class=\"keyword\">of</span> arr){\n  rs.push(btoa(w.toUpperCase()));\n}\n<span class=\"built_in\">console</span>.log(rs);\n\n\n<span class=\"comment\">// _.flow 改写</span>\n<span class=\"keyword\">const</span> arr = [<span class=\"string\">'pen'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'applypen'</span>];\n<span class=\"keyword\">const</span> upperAndBase64 = _.partialRight(_.map, _.flow(_.upperCase, btoa));\n<span class=\"built_in\">console</span>.log(upperAndBase64(arr));\n</code></pre>\n<p>_.flow 将转大写和转 Base64 的函数的能力合并，生成一个新的函数。方便作为参数函数或后续复用。</p>\n<p>##自己的观点</p>\n<p>我理解的 JavaScript 函数式编程，将可以复用的功能提取出来，用函数方法来代替其实就是基本的函数编程思想，其实到最后会面临两个问题，一个是函数共用性好还是函数功能细分好，这其实都是根据自己具体需求而定的，个人认为函数功能还是细分好，这样方便维护，功能实现代码逻辑清晰。</p>\n<p>函数式编程就是书写清新的逻辑代码，其实也是一种解耦的形式罢了。</p>"},{"title":"nodejs的process.nextTick方法理解和使用","comments":1,"date":"2017-04-04T09:49:45.000Z","_content":"今天重新温习了下nodejs开发指南中的核心模块全局对象中的process进程模块，其实nextTick和我目前使用的vue中的nextTick方法有些异曲同工之妙，于是上网搜整理了一些资料，详细的了解下nextTick到底该如何理解并且在实际项目中哪些地方会用到这个方法。\n\nNode.js是单线程的，基于事件循环，非阻塞IO的。事件循环中使用一个事件队列，在每个时间点上，系统只会处理一个事件，即使电脑有多个CPU核心，也无法同时并行的处理多个事件。因此，node.js适合处理I／O型的应用，不适合那种CPU运算密集型的应用。在I／O型的应用中，给每一个输入输出定义一个回调函数，node.js会自动将其加入到事件轮询的处理队列里，当I／O操作完成后，这个回调函数会被触发，系统会继续处理其他的请求。\n\n<!-- more -->\n\n## 理解\n\n在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的**下一个同步方法执行完毕时或异步方法的事件回调函数开始执行时**；与setTimeout(fn, 0) 函数的功能类似，但它的效率高多了。\n\n在这种处理模式下，process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行。我们来看一个例子。例子中有一个foo()，你想在下一个时间点上调用他，可以这么做：\n\n``` javascript\nfunction foo() {\n    console.error('foo');\n}\nprocess.nextTick(foo);\nconsole.error('bar');\n```\n\n运行上面的代码，你从下面终端打印的信息会看到，\"bar\"的输出在“foo”的前面。这就验证了上面的说法，foo()是在下一个时间点运行的。\n\n``` javascript\nbar\nfoo\n```\n\n你也可以使用setTimeout()函数来达到貌似同样的执行效果：\n\n``` javascript\nsetTimeout(foo, 0);\nconsole.log('bar');\n```\n\n但在内部的处理机制上，process.nextTick()和setTimeout(fn, 0)是不同的，process.nextTick()不是一个单纯的延时。process.nextTick()定义的调用会创建一个新的队列。在当前的队列里，你可以执行任意多的操作。但一旦调用netxTick，函数就必须结束队列操作。然后事件轮询机制又重新等待处理新的事件，如果发现nextTick的调用，就会创建一个新的队列。\n\n## 具体使用场景\n#### 在多个事件里交叉执行CPU运算密集型的任务\n\n在下面的例子里有一个compute()，我们希望这个函数尽可能持续的执行，来进行一些运算密集的任务。\n\n但与此同时，我们还希望系统不要被这个函数堵塞住，还需要能响应处理别的事件。这个应用模式就像一个单线程的web服务server。在这里我们就可以使用process.nextTick()来交叉执行compute()和正常的事件响应。\n\n``` javascript\nvar http = require('http');\nfunction compute() {\n    // performs complicated calculations continuously\n   // ...\n    process.nextTick(compute);\n}\nhttp.createServer(function(req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.end('Hello World');\n}).listen(5000, '127.0.0.1');\ncompute();\n```\n\n在这种模式下，我们不需要递归的调用compute()，我们只需要在事件循环中使用process.nextTick()定义compute()在下一个时间点执行即可。在这个过程中，如果有新的http请求进来，事件循环机制会先处理新的请求，然后再调用compute()。反之，如果你把compute()放在一个递归调用里，那系统就会一直阻塞在compute()里，无法处理新的http请求了。你可以自己试试。\n\n当然，我们无法通过process.nextTick()来获得多CPU下并行执行的真正好处，这只是模拟同一个应用在CPU上分段执行而已。\n\n#### 保持回调函数异步执行的原则\n\n当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面我们看一个例子，例子中的回调违反了这一原则：\n\n``` javascript\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat('file', cb);\n}\nmaybeSync(true, function() {\n  foo();\n});\nbar();\n```\n这段代码不明确的地方是, 我们不清楚foo()和bar()哪个会被先调用，使用nextTick将回调函数变成异步的。这样写更好：\n\n``` javascript\nfunction definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\t\n  fs.stat('file', cb);\n}\n```\t\n\n#### 用在事件触发过程中\n\n来看一个例子，你想写一个库实现这样的功能：从源文件里读取数据，当读取完毕后，触发一个事件同时传递读取的数据。可能你会这样写：\n\n``` javascript\nvar EventEmitter = require('events').EventEmitter;\nfunction StreamLibrary(resourceName) { \n    this.emit('start');\n    // read from the file, and for every chunk read, do:       \n    this.emit('data', chunkRead);      \n}\nStreamLibrary.prototype.__proto__ = EventEmitter.prototype;   // inherit from EventEmitter\n```\t\n\n下面是一段调用这个库的客户端程序，我们想在程序中监听这些事件：\n\n``` javascript\nvar stream = new StreamLibrary('fooResource');\nstream.on('start', function() {\n    console.log('Reading has started');\n});\nstream.on('data', function(chunk) {\n    console.log('Received: ' + chunk);\n});\n```\t\n\n但是上面的代码中，将永远接收不到“start”事件，因为在这个库实例化的时候，“start”事件会被立刻触发执行，但此时事件的回调函数还没有准备好，所以在客户端根本无法接收到这个事件。同样，我们可以用process.nextTick()来改写事件触发的过程，下面是一个正确的版本：\n\n``` javascript\nfunction StreamLibrary(resourceName) {\n    var self = this;\n    process.nextTick(function() {\n        self.emit('start');\n    });\n    // read from the file, and for every chunk read, do:       \n    this.emit('data', chunkRead);\n}\n```\t","source":"_posts/2017-04-04.md","raw":"---\ntitle: nodejs的process.nextTick方法理解和使用\ncomments: true\ndate: 2017-04-04 17:49:45\ntags: \n    - 'javascript'\n    - 'node'\n---\n今天重新温习了下nodejs开发指南中的核心模块全局对象中的process进程模块，其实nextTick和我目前使用的vue中的nextTick方法有些异曲同工之妙，于是上网搜整理了一些资料，详细的了解下nextTick到底该如何理解并且在实际项目中哪些地方会用到这个方法。\n\nNode.js是单线程的，基于事件循环，非阻塞IO的。事件循环中使用一个事件队列，在每个时间点上，系统只会处理一个事件，即使电脑有多个CPU核心，也无法同时并行的处理多个事件。因此，node.js适合处理I／O型的应用，不适合那种CPU运算密集型的应用。在I／O型的应用中，给每一个输入输出定义一个回调函数，node.js会自动将其加入到事件轮询的处理队列里，当I／O操作完成后，这个回调函数会被触发，系统会继续处理其他的请求。\n\n<!-- more -->\n\n## 理解\n\n在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的**下一个同步方法执行完毕时或异步方法的事件回调函数开始执行时**；与setTimeout(fn, 0) 函数的功能类似，但它的效率高多了。\n\n在这种处理模式下，process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行。我们来看一个例子。例子中有一个foo()，你想在下一个时间点上调用他，可以这么做：\n\n``` javascript\nfunction foo() {\n    console.error('foo');\n}\nprocess.nextTick(foo);\nconsole.error('bar');\n```\n\n运行上面的代码，你从下面终端打印的信息会看到，\"bar\"的输出在“foo”的前面。这就验证了上面的说法，foo()是在下一个时间点运行的。\n\n``` javascript\nbar\nfoo\n```\n\n你也可以使用setTimeout()函数来达到貌似同样的执行效果：\n\n``` javascript\nsetTimeout(foo, 0);\nconsole.log('bar');\n```\n\n但在内部的处理机制上，process.nextTick()和setTimeout(fn, 0)是不同的，process.nextTick()不是一个单纯的延时。process.nextTick()定义的调用会创建一个新的队列。在当前的队列里，你可以执行任意多的操作。但一旦调用netxTick，函数就必须结束队列操作。然后事件轮询机制又重新等待处理新的事件，如果发现nextTick的调用，就会创建一个新的队列。\n\n## 具体使用场景\n#### 在多个事件里交叉执行CPU运算密集型的任务\n\n在下面的例子里有一个compute()，我们希望这个函数尽可能持续的执行，来进行一些运算密集的任务。\n\n但与此同时，我们还希望系统不要被这个函数堵塞住，还需要能响应处理别的事件。这个应用模式就像一个单线程的web服务server。在这里我们就可以使用process.nextTick()来交叉执行compute()和正常的事件响应。\n\n``` javascript\nvar http = require('http');\nfunction compute() {\n    // performs complicated calculations continuously\n   // ...\n    process.nextTick(compute);\n}\nhttp.createServer(function(req, res) {\n     res.writeHead(200, {'Content-Type': 'text/plain'});\n     res.end('Hello World');\n}).listen(5000, '127.0.0.1');\ncompute();\n```\n\n在这种模式下，我们不需要递归的调用compute()，我们只需要在事件循环中使用process.nextTick()定义compute()在下一个时间点执行即可。在这个过程中，如果有新的http请求进来，事件循环机制会先处理新的请求，然后再调用compute()。反之，如果你把compute()放在一个递归调用里，那系统就会一直阻塞在compute()里，无法处理新的http请求了。你可以自己试试。\n\n当然，我们无法通过process.nextTick()来获得多CPU下并行执行的真正好处，这只是模拟同一个应用在CPU上分段执行而已。\n\n#### 保持回调函数异步执行的原则\n\n当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面我们看一个例子，例子中的回调违反了这一原则：\n\n``` javascript\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat('file', cb);\n}\nmaybeSync(true, function() {\n  foo();\n});\nbar();\n```\n这段代码不明确的地方是, 我们不清楚foo()和bar()哪个会被先调用，使用nextTick将回调函数变成异步的。这样写更好：\n\n``` javascript\nfunction definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\t\n  fs.stat('file', cb);\n}\n```\t\n\n#### 用在事件触发过程中\n\n来看一个例子，你想写一个库实现这样的功能：从源文件里读取数据，当读取完毕后，触发一个事件同时传递读取的数据。可能你会这样写：\n\n``` javascript\nvar EventEmitter = require('events').EventEmitter;\nfunction StreamLibrary(resourceName) { \n    this.emit('start');\n    // read from the file, and for every chunk read, do:       \n    this.emit('data', chunkRead);      \n}\nStreamLibrary.prototype.__proto__ = EventEmitter.prototype;   // inherit from EventEmitter\n```\t\n\n下面是一段调用这个库的客户端程序，我们想在程序中监听这些事件：\n\n``` javascript\nvar stream = new StreamLibrary('fooResource');\nstream.on('start', function() {\n    console.log('Reading has started');\n});\nstream.on('data', function(chunk) {\n    console.log('Received: ' + chunk);\n});\n```\t\n\n但是上面的代码中，将永远接收不到“start”事件，因为在这个库实例化的时候，“start”事件会被立刻触发执行，但此时事件的回调函数还没有准备好，所以在客户端根本无法接收到这个事件。同样，我们可以用process.nextTick()来改写事件触发的过程，下面是一个正确的版本：\n\n``` javascript\nfunction StreamLibrary(resourceName) {\n    var self = this;\n    process.nextTick(function() {\n        self.emit('start');\n    });\n    // read from the file, and for every chunk read, do:       \n    this.emit('data', chunkRead);\n}\n```\t","slug":"2017-04-04","published":1,"updated":"2017-08-19T13:21:33.000Z","_id":"cj1udxjnx0004g6ldsvzut13l","layout":"post","photos":[],"link":"","content":"<p>今天重新温习了下nodejs开发指南中的核心模块全局对象中的process进程模块，其实nextTick和我目前使用的vue中的nextTick方法有些异曲同工之妙，于是上网搜整理了一些资料，详细的了解下nextTick到底该如何理解并且在实际项目中哪些地方会用到这个方法。</p>\n<p>Node.js是单线程的，基于事件循环，非阻塞IO的。事件循环中使用一个事件队列，在每个时间点上，系统只会处理一个事件，即使电脑有多个CPU核心，也无法同时并行的处理多个事件。因此，node.js适合处理I／O型的应用，不适合那种CPU运算密集型的应用。在I／O型的应用中，给每一个输入输出定义一个回调函数，node.js会自动将其加入到事件轮询的处理队列里，当I／O操作完成后，这个回调函数会被触发，系统会继续处理其他的请求。</p>\n<a id=\"more\"></a>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的<strong>下一个同步方法执行完毕时或异步方法的事件回调函数开始执行时</strong>；与setTimeout(fn, 0) 函数的功能类似，但它的效率高多了。</p>\n<p>在这种处理模式下，process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行。我们来看一个例子。例子中有一个foo()，你想在下一个时间点上调用他，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">process.nextTick(foo);</div><div class=\"line\"><span class=\"built_in\">console</span>.error(<span class=\"string\">'bar'</span>);</div></pre></td></tr></table></figure>\n<p>运行上面的代码，你从下面终端打印的信息会看到，”bar”的输出在“foo”的前面。这就验证了上面的说法，foo()是在下一个时间点运行的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bar</div><div class=\"line\">foo</div></pre></td></tr></table></figure>\n<p>你也可以使用setTimeout()函数来达到貌似同样的执行效果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(foo, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</div></pre></td></tr></table></figure>\n<p>但在内部的处理机制上，process.nextTick()和setTimeout(fn, 0)是不同的，process.nextTick()不是一个单纯的延时。process.nextTick()定义的调用会创建一个新的队列。在当前的队列里，你可以执行任意多的操作。但一旦调用netxTick，函数就必须结束队列操作。然后事件轮询机制又重新等待处理新的事件，如果发现nextTick的调用，就会创建一个新的队列。</p>\n<h2 id=\"具体使用场景\"><a href=\"#具体使用场景\" class=\"headerlink\" title=\"具体使用场景\"></a>具体使用场景</h2><h4 id=\"在多个事件里交叉执行CPU运算密集型的任务\"><a href=\"#在多个事件里交叉执行CPU运算密集型的任务\" class=\"headerlink\" title=\"在多个事件里交叉执行CPU运算密集型的任务\"></a>在多个事件里交叉执行CPU运算密集型的任务</h4><p>在下面的例子里有一个compute()，我们希望这个函数尽可能持续的执行，来进行一些运算密集的任务。</p>\n<p>但与此同时，我们还希望系统不要被这个函数堵塞住，还需要能响应处理别的事件。这个应用模式就像一个单线程的web服务server。在这里我们就可以使用process.nextTick()来交叉执行compute()和正常的事件响应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// performs complicated calculations continuously</span></div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">    process.nextTick(compute);</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">     res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">     res.end(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">5000</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\">compute();</div></pre></td></tr></table></figure>\n<p>在这种模式下，我们不需要递归的调用compute()，我们只需要在事件循环中使用process.nextTick()定义compute()在下一个时间点执行即可。在这个过程中，如果有新的http请求进来，事件循环机制会先处理新的请求，然后再调用compute()。反之，如果你把compute()放在一个递归调用里，那系统就会一直阻塞在compute()里，无法处理新的http请求了。你可以自己试试。</p>\n<p>当然，我们无法通过process.nextTick()来获得多CPU下并行执行的真正好处，这只是模拟同一个应用在CPU上分段执行而已。</p>\n<h4 id=\"保持回调函数异步执行的原则\"><a href=\"#保持回调函数异步执行的原则\" class=\"headerlink\" title=\"保持回调函数异步执行的原则\"></a>保持回调函数异步执行的原则</h4><p>当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面我们看一个例子，例子中的回调违反了这一原则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maybeSync</span>(<span class=\"params\">arg, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (arg) &#123;</div><div class=\"line\">    cb();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  fs.stat(<span class=\"string\">'file'</span>, cb);</div><div class=\"line\">&#125;</div><div class=\"line\">maybeSync(<span class=\"literal\">true</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  foo();</div><div class=\"line\">&#125;);</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>这段代码不明确的地方是, 我们不清楚foo()和bar()哪个会被先调用，使用nextTick将回调函数变成异步的。这样写更好：</p>\n<pre><code class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definitelyAsync</span>(<span class=\"params\">arg, cb</span>) </span>{\n  <span class=\"keyword\">if</span> (arg) {\n    process.nextTick(cb);\n    <span class=\"keyword\">return</span>;\n  }\n\n  fs.stat(<span class=\"string\">'file'</span>, cb);\n}\n</code></pre>\n<h4 id=\"用在事件触发过程中\"><a href=\"#用在事件触发过程中\" class=\"headerlink\" title=\"用在事件触发过程中\"></a>用在事件触发过程中</h4><p>来看一个例子，你想写一个库实现这样的功能：从源文件里读取数据，当读取完毕后，触发一个事件同时传递读取的数据。可能你会这样写：</p>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StreamLibrary</span>(<span class=\"params\">resourceName</span>) </span>{ \n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'start'</span>);\n    <span class=\"comment\">// read from the file, and for every chunk read, do:       </span>\n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'data'</span>, chunkRead);      \n}\nStreamLibrary.prototype.__proto__ = EventEmitter.prototype;   <span class=\"comment\">// inherit from EventEmitter</span>\n</code></pre>\n<p>下面是一段调用这个库的客户端程序，我们想在程序中监听这些事件：</p>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> StreamLibrary(<span class=\"string\">'fooResource'</span>);\nstream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Reading has started'</span>);\n});\nstream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received: '</span> + chunk);\n});\n</code></pre>\n<p>但是上面的代码中，将永远接收不到“start”事件，因为在这个库实例化的时候，“start”事件会被立刻触发执行，但此时事件的回调函数还没有准备好，所以在客户端根本无法接收到这个事件。同样，我们可以用process.nextTick()来改写事件触发的过程，下面是一个正确的版本：</p>\n<pre><code class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StreamLibrary</span>(<span class=\"params\">resourceName</span>) </span>{\n    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;\n    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n        self.emit(<span class=\"string\">'start'</span>);\n    });\n    <span class=\"comment\">// read from the file, and for every chunk read, do:       </span>\n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'data'</span>, chunkRead);\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>今天重新温习了下nodejs开发指南中的核心模块全局对象中的process进程模块，其实nextTick和我目前使用的vue中的nextTick方法有些异曲同工之妙，于是上网搜整理了一些资料，详细的了解下nextTick到底该如何理解并且在实际项目中哪些地方会用到这个方法。</p>\n<p>Node.js是单线程的，基于事件循环，非阻塞IO的。事件循环中使用一个事件队列，在每个时间点上，系统只会处理一个事件，即使电脑有多个CPU核心，也无法同时并行的处理多个事件。因此，node.js适合处理I／O型的应用，不适合那种CPU运算密集型的应用。在I／O型的应用中，给每一个输入输出定义一个回调函数，node.js会自动将其加入到事件轮询的处理队列里，当I／O操作完成后，这个回调函数会被触发，系统会继续处理其他的请求。</p>","more":"<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>在事件循环的下一次循环中调用 callback 回调函数。效果是将一个函数推迟到代码书写的<strong>下一个同步方法执行完毕时或异步方法的事件回调函数开始执行时</strong>；与setTimeout(fn, 0) 函数的功能类似，但它的效率高多了。</p>\n<p>在这种处理模式下，process.nextTick()的意思就是定义出一个动作，并且让这个动作在下一个事件轮询的时间点上执行。我们来看一个例子。例子中有一个foo()，你想在下一个时间点上调用他，可以这么做：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">process.nextTick(foo);</div><div class=\"line\"><span class=\"built_in\">console</span>.error(<span class=\"string\">'bar'</span>);</div></pre></td></tr></table></figure>\n<p>运行上面的代码，你从下面终端打印的信息会看到，”bar”的输出在“foo”的前面。这就验证了上面的说法，foo()是在下一个时间点运行的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bar</div><div class=\"line\">foo</div></pre></td></tr></table></figure>\n<p>你也可以使用setTimeout()函数来达到貌似同样的执行效果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(foo, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</div></pre></td></tr></table></figure>\n<p>但在内部的处理机制上，process.nextTick()和setTimeout(fn, 0)是不同的，process.nextTick()不是一个单纯的延时。process.nextTick()定义的调用会创建一个新的队列。在当前的队列里，你可以执行任意多的操作。但一旦调用netxTick，函数就必须结束队列操作。然后事件轮询机制又重新等待处理新的事件，如果发现nextTick的调用，就会创建一个新的队列。</p>\n<h2 id=\"具体使用场景\"><a href=\"#具体使用场景\" class=\"headerlink\" title=\"具体使用场景\"></a>具体使用场景</h2><h4 id=\"在多个事件里交叉执行CPU运算密集型的任务\"><a href=\"#在多个事件里交叉执行CPU运算密集型的任务\" class=\"headerlink\" title=\"在多个事件里交叉执行CPU运算密集型的任务\"></a>在多个事件里交叉执行CPU运算密集型的任务</h4><p>在下面的例子里有一个compute()，我们希望这个函数尽可能持续的执行，来进行一些运算密集的任务。</p>\n<p>但与此同时，我们还希望系统不要被这个函数堵塞住，还需要能响应处理别的事件。这个应用模式就像一个单线程的web服务server。在这里我们就可以使用process.nextTick()来交叉执行compute()和正常的事件响应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// performs complicated calculations continuously</span></div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">    process.nextTick(compute);</div><div class=\"line\">&#125;</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">     res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">     res.end(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">5000</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\">compute();</div></pre></td></tr></table></figure>\n<p>在这种模式下，我们不需要递归的调用compute()，我们只需要在事件循环中使用process.nextTick()定义compute()在下一个时间点执行即可。在这个过程中，如果有新的http请求进来，事件循环机制会先处理新的请求，然后再调用compute()。反之，如果你把compute()放在一个递归调用里，那系统就会一直阻塞在compute()里，无法处理新的http请求了。你可以自己试试。</p>\n<p>当然，我们无法通过process.nextTick()来获得多CPU下并行执行的真正好处，这只是模拟同一个应用在CPU上分段执行而已。</p>\n<h4 id=\"保持回调函数异步执行的原则\"><a href=\"#保持回调函数异步执行的原则\" class=\"headerlink\" title=\"保持回调函数异步执行的原则\"></a>保持回调函数异步执行的原则</h4><p>当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面我们看一个例子，例子中的回调违反了这一原则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maybeSync</span>(<span class=\"params\">arg, cb</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (arg) &#123;</div><div class=\"line\">    cb();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  fs.stat(<span class=\"string\">'file'</span>, cb);</div><div class=\"line\">&#125;</div><div class=\"line\">maybeSync(<span class=\"literal\">true</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  foo();</div><div class=\"line\">&#125;);</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>这段代码不明确的地方是, 我们不清楚foo()和bar()哪个会被先调用，使用nextTick将回调函数变成异步的。这样写更好：</p>\n<pre><code class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definitelyAsync</span>(<span class=\"params\">arg, cb</span>) </span>{\n  <span class=\"keyword\">if</span> (arg) {\n    process.nextTick(cb);\n    <span class=\"keyword\">return</span>;\n  }\n\n  fs.stat(<span class=\"string\">'file'</span>, cb);\n}\n</code></pre>\n<h4 id=\"用在事件触发过程中\"><a href=\"#用在事件触发过程中\" class=\"headerlink\" title=\"用在事件触发过程中\"></a>用在事件触发过程中</h4><p>来看一个例子，你想写一个库实现这样的功能：从源文件里读取数据，当读取完毕后，触发一个事件同时传递读取的数据。可能你会这样写：</p>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StreamLibrary</span>(<span class=\"params\">resourceName</span>) </span>{ \n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'start'</span>);\n    <span class=\"comment\">// read from the file, and for every chunk read, do:       </span>\n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'data'</span>, chunkRead);      \n}\nStreamLibrary.prototype.__proto__ = EventEmitter.prototype;   <span class=\"comment\">// inherit from EventEmitter</span>\n</code></pre>\n<p>下面是一段调用这个库的客户端程序，我们想在程序中监听这些事件：</p>\n<pre><code class=\"javascript\"><span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> StreamLibrary(<span class=\"string\">'fooResource'</span>);\nstream.on(<span class=\"string\">'start'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Reading has started'</span>);\n});\nstream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>{\n    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Received: '</span> + chunk);\n});\n</code></pre>\n<p>但是上面的代码中，将永远接收不到“start”事件，因为在这个库实例化的时候，“start”事件会被立刻触发执行，但此时事件的回调函数还没有准备好，所以在客户端根本无法接收到这个事件。同样，我们可以用process.nextTick()来改写事件触发的过程，下面是一个正确的版本：</p>\n<pre><code class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StreamLibrary</span>(<span class=\"params\">resourceName</span>) </span>{\n    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;\n    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n        self.emit(<span class=\"string\">'start'</span>);\n    });\n    <span class=\"comment\">// read from the file, and for every chunk read, do:       </span>\n    <span class=\"keyword\">this</span>.emit(<span class=\"string\">'data'</span>, chunkRead);\n}\n</code></pre>"},{"title":"ajax如何截取302响应","comments":1,"_content":"在ajax请求中，如果服务器端的响应是302 Found，在ajax的回调函数中能够获取这个状态码吗？能够从Response Headers中得到Location的值进行重定向吗？让我们来一起看看实际情况。\n\n##### 使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：\n\n``` javascript\n$.ajax({\nurl: '/oauth/respond',\ntype: 'post',\ndata: data,\ncomplete: function(jqXHR){\n    console.log(jqXHR.status);\n},\nerror: function (xhr) {\n    console.log(xhr.status);\n}\n});\n```\n<!-- more -->\n\n##### 当服务器端返回302 Found的响应时，浏览器中的运行结果如下：\n![111](ajax/111.png)\n\n在ajax的complete()与error()回调函数中得到的状态码都是404，而不是302。 \n为什么呢？在stackoverflow上找到了答案：\n\n原来，当服务器将302响应发给浏览器时，浏览器并不是直接进行ajax回调处理，而是先执行302重定向——从Response Headers中读取Location信息，然后向Location中的Url发出请求，在收到这个请求的响应后才会进行ajax回调处理。大致流程如下：\n\najax -> browser -> server -> 302 -> browser(redirect) -> server -> browser -> ajax callback\n\n而在我们的测试程序中，由于302返回的重定向URL在服务器上没有相应的处理程序，所以在ajax回调函数中得到的是404状态码；如果存在对应的URL，得到的状态码就是200。\n\n所以，如果你想在ajax请求中根据302响应通过location.href进行重定向是不可行的。\n\n#### 如何解决？\n\n#### 【方法一】\n\n继续用ajax，修改服务器端代码，将原来的302响应改为json响应，比如下面的ASP.NET MVC示例代码：\n\n``` javascript\nreturn Json(new { status = 302, location = \"/oauth/respond\" });\n\najax代码稍作修改即可：\n\n$.ajax({\n    url: '/oauth/respond',\n    type: 'post',\n    data: data,\n    dataType: 'json',\n    success: function (data) {\n        if (data.status == 302) {\n            location.href = data.location;\n        }\n    }\n}); \n```\n#### 【方法二】\n\n不用ajax，改用form。\n\n``` javascript\n\n<form method=\"post\" action=\"/oauth/respond\"></form>\n\n```\n","source":"_posts/ajax.md","raw":"---\ntitle: ajax如何截取302响应\ncomments: true\ncategories: \"javascript\"\ntags: \n    - 'javascript'\n    - 'ajax'\n    - '302'\n---\n在ajax请求中，如果服务器端的响应是302 Found，在ajax的回调函数中能够获取这个状态码吗？能够从Response Headers中得到Location的值进行重定向吗？让我们来一起看看实际情况。\n\n##### 使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：\n\n``` javascript\n$.ajax({\nurl: '/oauth/respond',\ntype: 'post',\ndata: data,\ncomplete: function(jqXHR){\n    console.log(jqXHR.status);\n},\nerror: function (xhr) {\n    console.log(xhr.status);\n}\n});\n```\n<!-- more -->\n\n##### 当服务器端返回302 Found的响应时，浏览器中的运行结果如下：\n![111](ajax/111.png)\n\n在ajax的complete()与error()回调函数中得到的状态码都是404，而不是302。 \n为什么呢？在stackoverflow上找到了答案：\n\n原来，当服务器将302响应发给浏览器时，浏览器并不是直接进行ajax回调处理，而是先执行302重定向——从Response Headers中读取Location信息，然后向Location中的Url发出请求，在收到这个请求的响应后才会进行ajax回调处理。大致流程如下：\n\najax -> browser -> server -> 302 -> browser(redirect) -> server -> browser -> ajax callback\n\n而在我们的测试程序中，由于302返回的重定向URL在服务器上没有相应的处理程序，所以在ajax回调函数中得到的是404状态码；如果存在对应的URL，得到的状态码就是200。\n\n所以，如果你想在ajax请求中根据302响应通过location.href进行重定向是不可行的。\n\n#### 如何解决？\n\n#### 【方法一】\n\n继续用ajax，修改服务器端代码，将原来的302响应改为json响应，比如下面的ASP.NET MVC示例代码：\n\n``` javascript\nreturn Json(new { status = 302, location = \"/oauth/respond\" });\n\najax代码稍作修改即可：\n\n$.ajax({\n    url: '/oauth/respond',\n    type: 'post',\n    data: data,\n    dataType: 'json',\n    success: function (data) {\n        if (data.status == 302) {\n            location.href = data.location;\n        }\n    }\n}); \n```\n#### 【方法二】\n\n不用ajax，改用form。\n\n``` javascript\n\n<form method=\"post\" action=\"/oauth/respond\"></form>\n\n```\n","slug":"ajax","published":1,"date":"2017-04-02T00:01:13.000Z","updated":"2017-08-19T13:21:49.000Z","_id":"cj1udxjo10005g6ld0f0j2gej","layout":"post","photos":[],"link":"","content":"<p>在ajax请求中，如果服务器端的响应是302 Found，在ajax的回调函数中能够获取这个状态码吗？能够从Response Headers中得到Location的值进行重定向吗？让我们来一起看看实际情况。</p>\n<h5 id=\"使用jQuery的-ajax-发起ajax请求的JavaScript代码如下：\"><a href=\"#使用jQuery的-ajax-发起ajax请求的JavaScript代码如下：\" class=\"headerlink\" title=\"使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：\"></a>使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">url: <span class=\"string\">'/oauth/respond'</span>,</div><div class=\"line\">type: <span class=\"string\">'post'</span>,</div><div class=\"line\">data: data,</div><div class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(jqXHR.status);</div><div class=\"line\">&#125;,</div><div class=\"line\">error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.status);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"当服务器端返回302-Found的响应时，浏览器中的运行结果如下：\"><a href=\"#当服务器端返回302-Found的响应时，浏览器中的运行结果如下：\" class=\"headerlink\" title=\"当服务器端返回302 Found的响应时，浏览器中的运行结果如下：\"></a>当服务器端返回302 Found的响应时，浏览器中的运行结果如下：</h5><p><img src=\"/ajax/111.png\" alt=\"111\"></p>\n<p>在ajax的complete()与error()回调函数中得到的状态码都是404，而不是302。<br>为什么呢？在stackoverflow上找到了答案：</p>\n<p>原来，当服务器将302响应发给浏览器时，浏览器并不是直接进行ajax回调处理，而是先执行302重定向——从Response Headers中读取Location信息，然后向Location中的Url发出请求，在收到这个请求的响应后才会进行ajax回调处理。大致流程如下：</p>\n<p>ajax -&gt; browser -&gt; server -&gt; 302 -&gt; browser(redirect) -&gt; server -&gt; browser -&gt; ajax callback</p>\n<p>而在我们的测试程序中，由于302返回的重定向URL在服务器上没有相应的处理程序，所以在ajax回调函数中得到的是404状态码；如果存在对应的URL，得到的状态码就是200。</p>\n<p>所以，如果你想在ajax请求中根据302响应通过location.href进行重定向是不可行的。</p>\n<h4 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h4><h4 id=\"【方法一】\"><a href=\"#【方法一】\" class=\"headerlink\" title=\"【方法一】\"></a>【方法一】</h4><p>继续用ajax，修改服务器端代码，将原来的302响应改为json响应，比如下面的ASP.NET MVC示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; status = <span class=\"number\">302</span>, location = <span class=\"string\">\"/oauth/respond\"</span> &#125;);</div><div class=\"line\"></div><div class=\"line\">ajax代码稍作修改即可：</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    url: <span class=\"string\">'/oauth/respond'</span>,</div><div class=\"line\">    type: <span class=\"string\">'post'</span>,</div><div class=\"line\">    data: data,</div><div class=\"line\">    dataType: <span class=\"string\">'json'</span>,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.status == <span class=\"number\">302</span>) &#123;</div><div class=\"line\">            location.href = data.location;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"【方法二】\"><a href=\"#【方法二】\" class=\"headerlink\" title=\"【方法二】\"></a>【方法二】</h4><p>不用ajax，改用form。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;form method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/oauth/respond\"</span>&gt;&lt;/form&gt;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在ajax请求中，如果服务器端的响应是302 Found，在ajax的回调函数中能够获取这个状态码吗？能够从Response Headers中得到Location的值进行重定向吗？让我们来一起看看实际情况。</p>\n<h5 id=\"使用jQuery的-ajax-发起ajax请求的JavaScript代码如下：\"><a href=\"#使用jQuery的-ajax-发起ajax请求的JavaScript代码如下：\" class=\"headerlink\" title=\"使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：\"></a>使用jQuery的$.ajax()发起ajax请求的JavaScript代码如下：</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">url: <span class=\"string\">'/oauth/respond'</span>,</div><div class=\"line\">type: <span class=\"string\">'post'</span>,</div><div class=\"line\">data: data,</div><div class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jqXHR</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(jqXHR.status);</div><div class=\"line\">&#125;,</div><div class=\"line\">error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.status);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","more":"<h5 id=\"当服务器端返回302-Found的响应时，浏览器中的运行结果如下：\"><a href=\"#当服务器端返回302-Found的响应时，浏览器中的运行结果如下：\" class=\"headerlink\" title=\"当服务器端返回302 Found的响应时，浏览器中的运行结果如下：\"></a>当服务器端返回302 Found的响应时，浏览器中的运行结果如下：</h5><p><img src=\"/ajax/111.png\" alt=\"111\"></p>\n<p>在ajax的complete()与error()回调函数中得到的状态码都是404，而不是302。<br>为什么呢？在stackoverflow上找到了答案：</p>\n<p>原来，当服务器将302响应发给浏览器时，浏览器并不是直接进行ajax回调处理，而是先执行302重定向——从Response Headers中读取Location信息，然后向Location中的Url发出请求，在收到这个请求的响应后才会进行ajax回调处理。大致流程如下：</p>\n<p>ajax -&gt; browser -&gt; server -&gt; 302 -&gt; browser(redirect) -&gt; server -&gt; browser -&gt; ajax callback</p>\n<p>而在我们的测试程序中，由于302返回的重定向URL在服务器上没有相应的处理程序，所以在ajax回调函数中得到的是404状态码；如果存在对应的URL，得到的状态码就是200。</p>\n<p>所以，如果你想在ajax请求中根据302响应通过location.href进行重定向是不可行的。</p>\n<h4 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h4><h4 id=\"【方法一】\"><a href=\"#【方法一】\" class=\"headerlink\" title=\"【方法一】\"></a>【方法一】</h4><p>继续用ajax，修改服务器端代码，将原来的302响应改为json响应，比如下面的ASP.NET MVC示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; status = <span class=\"number\">302</span>, location = <span class=\"string\">\"/oauth/respond\"</span> &#125;);</div><div class=\"line\"></div><div class=\"line\">ajax代码稍作修改即可：</div><div class=\"line\"></div><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    url: <span class=\"string\">'/oauth/respond'</span>,</div><div class=\"line\">    type: <span class=\"string\">'post'</span>,</div><div class=\"line\">    data: data,</div><div class=\"line\">    dataType: <span class=\"string\">'json'</span>,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (data.status == <span class=\"number\">302</span>) &#123;</div><div class=\"line\">            location.href = data.location;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"【方法二】\"><a href=\"#【方法二】\" class=\"headerlink\" title=\"【方法二】\"></a>【方法二】</h4><p>不用ajax，改用form。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;form method=<span class=\"string\">\"post\"</span> action=<span class=\"string\">\"/oauth/respond\"</span>&gt;&lt;/form&gt;</div></pre></td></tr></table></figure>"},{"title":"浅谈webworker的使用场景","comments":1,"date":"2017-05-07T13:09:11.000Z","_content":"\n### 一、webWorker之初体验\n\n在\"setTimeout那些事儿\"中，说到JavaScript是单线程。也就是同一时间只能做同一事情。\n\n也好理解，作为浏览器脚本语言，如果JavaScript不是单线程，那么就有点棘手了。比如，与用户交互或者对DOM进行操作时，在一个线程上修改某个DOM，另外的线程删除DOM，这时浏览器该如何抉择呢?\n\n所以，JavaScript是单线程也是有背景的。\n\n<!-- more -->\n\n\n如下：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>singleThread</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    </head>\n    <body>\n        <script>\n            //添加到任务队列中，待同步任务所处的‘执行栈’执行完毕，1秒后执行任务队列中的这个匿名函数\n            setTimeout(function(){\n                console.log('come on');\n            },1000);\n            //只要不关闭该alert，‘执行栈’就没结束，从而也就不会进入到任务队列中\n            alert('waiting');\n        </script>\n    </body>\n</html>\n{% endcodeblock %}\n\n但，HTML5引入了一个工作线程（webWorker）的概念。它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。\n\n简而言之，就是允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。\n\n从而，可以用webWorker来处理一些比较耗时的计算。\n\n如下，主页面：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                //创建一个Worker对象，并向它传递将在新线程中执行的脚本url\n                var worker = new Worker('worker.js');\n                //接收worker传递过来的数据\n                worker.onmessage = function(event){\n                    document.getElementById('result').innerHTML+=event.data+\"<br/>\" ;\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        <div id=\"result\"></div>\n    </body>\n</html>\n{% endcodeblock %}\n\n下面是worker.js的内容:\n\n{% codeblock lang:javascript %}\nvar i = 0;\nfunction timedCount(){\n    for(var j = 0, sum = 0; j < 100; j++){\n        for(var i = 0; i < 100000000; i++){\n            sum+=i;\n        };\n    };\n    //将得到的sum发送回主线程\n    postMessage(sum);\n};\n//将执行timedCount前的时间，通过postMessage发送回主线程\npostMessage('Before computing, '+new Date());\ntimedCount();\n//结束timedCount后，将结束时间发送回主线程\npostMessage('After computing, ' +new Date());\n{% endcodeblock %}\n\n\n上面代码执行的流程是：创建的worker对象，并用onmessage方法接收worker.js里面postMessage传递过来的数据(event.data)，并将数据追加到div#result中。\n\n所以，执行上面的代码结果如下：\n\n![1](/webworker/1.png)\n\n待worker.js中的timedCount方法运算完后，执行postMessage操作，向主线程传数据，得图二。期间，并不影响主线程的运作。\n\n![2](webworker/2.png)\n\n\n\n### 二、webWorker之常用ＡＰＩ\n\n接下来，再来看看关于worker的常用API：\n\n#### 1、postMessage(data)\n\n子线程与主线程之间互相通信使用方法，传递的data为任意值。\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\n//worker.postMessage传递给子线程数据，对象\nworker.postMessage({first:1,second:2});\n\n//子线程中也可以使用postMessage，如传递字符串\npostMessage(‘test’);\n{% endcodeblock %}\n\n#### 2、terminate()\n\n主线程中终止worker，此后无法再利用其进行消息传递。注意：一旦terminate后，无法重新启用，只能另外创建。\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\nworker.terminate();\n{% endcodeblock %} \n\n如，主页面：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                var worker = new Worker('worker.js');\n                //每隔100毫秒，向子线程传递{name: 'monkey'}信息\n                setInterval(function(){\n                    worker.postMessage({name: 'monkey'});\n                },100);\n                //当主线程worker收到来自子线程的消息后，触发message事件\n                worker.onmessage = function(event){\n                    document.getElementById('result').innerHTML+=event.data+\"<br/>\" ;\n                    //主线程使用terminate方法中断与子线程来往，在浏览器中只能显示一次event.data\n                    worker.terminate();\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        <div id=\"result\"></div>\n    </body>\n</html>\n{% endcodeblock %} \n\n子线程worker.js代码：\n\n{% codeblock lang:javascript %}\n<script>\n//当主线程发来信息后，触发该message事件\nonmessage = function(event){\n    //向主线程发送event.data.name信息\n    postMessage(event.data.name);\n};\n</script>\n{% endcodeblock %} \n\n#### 3、message\n\n当有消息发送时，触发该事件。且，消息发送是双向的，消息内容可通过data来获取。\n\nmessage使用，可见terminate中的demo\n\n#### 4、error\n\n出错处理。且错误消息可以通过e.message来获取。\n\n如下：\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\nworker.onerror = function(e){\n    //打印出错消息\n    console.log(e.message);\n    //中断与子线程的联系\n    worker.terminate();\n}\n{% endcodeblock %} \n\n另：worker线程从上到下同步运行它的代码，然后进入异步阶段来对事件及计时器响应，如果worker注册了message事件处理程序，只要其有可能触发，worker就一直在内存中，不会退出，所以通信完毕后得手动在主线程中terminate或者子线程中close掉，但如果worker没有监听消息，那么当所有任务执行完毕（包括计数器）后，他就会退出。\n\n### 三、worker上下文\n先看下面这段代码：\n\n主页面：\n\n{% codeblock lang:javascript %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                var worker = new Worker('worker.js');\n                //接收消息事件\n                worker.onmessage = function(event){\n                    console.log(event.data);\n                };\n                //错误信息事件\n                worker.onerror = function(e){\n                    console.log('erro: ' + e.message);\n                    //终止线程\n                    worker.terminate();\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        \n    </body>\n</html>\n{% endcodeblock %}\n\nworker.js\n\n{% codeblock lang:javascript %}\n//window对象的alert方法\nalert(1);\nonmessage = function(event){\n    //向主线程发送event.data.name信息\n    postMessage(event.data.name);\n};\n{% endcodeblock %}\n\n执行上面代码结果：\n\n![3](webworker/3.png)\n\n\n为什么会这样呢？原因是alert为window对象的方法，所以会报错undefined。\n\nworker.js执行的上下文，与主页面html执行时的上下文并不相同，最顶层的对象并不是window，woker.js执行的全局上下文，是个叫做WorkerGlobalScope的东东，所以无法访问window、与window相关的DOM API，但是可以与setTimeout、setInterval等协作。\nWorkerGlobalScope作用域下的常用属性、方法如下：\n\n#### 1、self\n\n　　我们可以使用 WorkerGlobalScope 的 self 属性来或者这个对象本身的引用\n\n#### 2、location\n\n　　location 属性返回当线程被创建出来的时候与之关联的 WorkerLocation 对象，它表示用于初始化这个工作线程的脚步资源的绝对 URL，即使页面被多次重定向后，这个 URL 资源位置也不会改变。\n\n#### 3、close\n\n　　关闭当前线程，与terminate作用类似\n\n#### 4、importScripts\n\n　　我们可以通过importScripts()方法通过url在worker中加载库函数\n\n#### 5、XMLHttpRequest\n\n　　有了它，才能发出Ajax请求\n\n#### 6、setTimeout/setInterval以及addEventListener/postMessage\n\n### 四、关于worker\n我们可以做什么：\n\n　　1.可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信\n\n　　2.可以在worker中通过importScripts(url)加载另外的脚本文件\n\n　　3.可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()\n\n　　4.可以使用XMLHttpRequest来发送请求\n\n　　5.可以访问navigator的部分属性\n\n局限性：\n\n　　1.不能跨域加载JS\n\n　　2.worker内代码不能访问DOM\n\n　　3.各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行\n\n　　4.IE这个新特性","source":"_posts/2017-05-07.md","raw":"---\ntitle: 浅谈webworker的使用场景\ncomments: true\ndate: 2017-05-07 21:09:11\ntags: \n    - 'javascript'\n---\n\n### 一、webWorker之初体验\n\n在\"setTimeout那些事儿\"中，说到JavaScript是单线程。也就是同一时间只能做同一事情。\n\n也好理解，作为浏览器脚本语言，如果JavaScript不是单线程，那么就有点棘手了。比如，与用户交互或者对DOM进行操作时，在一个线程上修改某个DOM，另外的线程删除DOM，这时浏览器该如何抉择呢?\n\n所以，JavaScript是单线程也是有背景的。\n\n<!-- more -->\n\n\n如下：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>singleThread</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    </head>\n    <body>\n        <script>\n            //添加到任务队列中，待同步任务所处的‘执行栈’执行完毕，1秒后执行任务队列中的这个匿名函数\n            setTimeout(function(){\n                console.log('come on');\n            },1000);\n            //只要不关闭该alert，‘执行栈’就没结束，从而也就不会进入到任务队列中\n            alert('waiting');\n        </script>\n    </body>\n</html>\n{% endcodeblock %}\n\n但，HTML5引入了一个工作线程（webWorker）的概念。它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。\n\n简而言之，就是允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。\n\n从而，可以用webWorker来处理一些比较耗时的计算。\n\n如下，主页面：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                //创建一个Worker对象，并向它传递将在新线程中执行的脚本url\n                var worker = new Worker('worker.js');\n                //接收worker传递过来的数据\n                worker.onmessage = function(event){\n                    document.getElementById('result').innerHTML+=event.data+\"<br/>\" ;\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        <div id=\"result\"></div>\n    </body>\n</html>\n{% endcodeblock %}\n\n下面是worker.js的内容:\n\n{% codeblock lang:javascript %}\nvar i = 0;\nfunction timedCount(){\n    for(var j = 0, sum = 0; j < 100; j++){\n        for(var i = 0; i < 100000000; i++){\n            sum+=i;\n        };\n    };\n    //将得到的sum发送回主线程\n    postMessage(sum);\n};\n//将执行timedCount前的时间，通过postMessage发送回主线程\npostMessage('Before computing, '+new Date());\ntimedCount();\n//结束timedCount后，将结束时间发送回主线程\npostMessage('After computing, ' +new Date());\n{% endcodeblock %}\n\n\n上面代码执行的流程是：创建的worker对象，并用onmessage方法接收worker.js里面postMessage传递过来的数据(event.data)，并将数据追加到div#result中。\n\n所以，执行上面的代码结果如下：\n\n![1](/webworker/1.png)\n\n待worker.js中的timedCount方法运算完后，执行postMessage操作，向主线程传数据，得图二。期间，并不影响主线程的运作。\n\n![2](webworker/2.png)\n\n\n\n### 二、webWorker之常用ＡＰＩ\n\n接下来，再来看看关于worker的常用API：\n\n#### 1、postMessage(data)\n\n子线程与主线程之间互相通信使用方法，传递的data为任意值。\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\n//worker.postMessage传递给子线程数据，对象\nworker.postMessage({first:1,second:2});\n\n//子线程中也可以使用postMessage，如传递字符串\npostMessage(‘test’);\n{% endcodeblock %}\n\n#### 2、terminate()\n\n主线程中终止worker，此后无法再利用其进行消息传递。注意：一旦terminate后，无法重新启用，只能另外创建。\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\nworker.terminate();\n{% endcodeblock %} \n\n如，主页面：\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                var worker = new Worker('worker.js');\n                //每隔100毫秒，向子线程传递{name: 'monkey'}信息\n                setInterval(function(){\n                    worker.postMessage({name: 'monkey'});\n                },100);\n                //当主线程worker收到来自子线程的消息后，触发message事件\n                worker.onmessage = function(event){\n                    document.getElementById('result').innerHTML+=event.data+\"<br/>\" ;\n                    //主线程使用terminate方法中断与子线程来往，在浏览器中只能显示一次event.data\n                    worker.terminate();\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        <div id=\"result\"></div>\n    </body>\n</html>\n{% endcodeblock %} \n\n子线程worker.js代码：\n\n{% codeblock lang:javascript %}\n<script>\n//当主线程发来信息后，触发该message事件\nonmessage = function(event){\n    //向主线程发送event.data.name信息\n    postMessage(event.data.name);\n};\n</script>\n{% endcodeblock %} \n\n#### 3、message\n\n当有消息发送时，触发该事件。且，消息发送是双向的，消息内容可通过data来获取。\n\nmessage使用，可见terminate中的demo\n\n#### 4、error\n\n出错处理。且错误消息可以通过e.message来获取。\n\n如下：\n\n{% codeblock lang:javascript %}\n//worker = new Worker('url');\nworker.onerror = function(e){\n    //打印出错消息\n    console.log(e.message);\n    //中断与子线程的联系\n    worker.terminate();\n}\n{% endcodeblock %} \n\n另：worker线程从上到下同步运行它的代码，然后进入异步阶段来对事件及计时器响应，如果worker注册了message事件处理程序，只要其有可能触发，worker就一直在内存中，不会退出，所以通信完毕后得手动在主线程中terminate或者子线程中close掉，但如果worker没有监听消息，那么当所有任务执行完毕（包括计数器）后，他就会退出。\n\n### 三、worker上下文\n先看下面这段代码：\n\n主页面：\n\n{% codeblock lang:javascript %}\n<!DOCTYPE html>\n    <head>\n        <title>worker</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <script>\n            function init(){\n                var worker = new Worker('worker.js');\n                //接收消息事件\n                worker.onmessage = function(event){\n                    console.log(event.data);\n                };\n                //错误信息事件\n                worker.onerror = function(e){\n                    console.log('erro: ' + e.message);\n                    //终止线程\n                    worker.terminate();\n                };\n            };\n        </script>\n    </head>\n    <body onload = \"init()\">\n        \n    </body>\n</html>\n{% endcodeblock %}\n\nworker.js\n\n{% codeblock lang:javascript %}\n//window对象的alert方法\nalert(1);\nonmessage = function(event){\n    //向主线程发送event.data.name信息\n    postMessage(event.data.name);\n};\n{% endcodeblock %}\n\n执行上面代码结果：\n\n![3](webworker/3.png)\n\n\n为什么会这样呢？原因是alert为window对象的方法，所以会报错undefined。\n\nworker.js执行的上下文，与主页面html执行时的上下文并不相同，最顶层的对象并不是window，woker.js执行的全局上下文，是个叫做WorkerGlobalScope的东东，所以无法访问window、与window相关的DOM API，但是可以与setTimeout、setInterval等协作。\nWorkerGlobalScope作用域下的常用属性、方法如下：\n\n#### 1、self\n\n　　我们可以使用 WorkerGlobalScope 的 self 属性来或者这个对象本身的引用\n\n#### 2、location\n\n　　location 属性返回当线程被创建出来的时候与之关联的 WorkerLocation 对象，它表示用于初始化这个工作线程的脚步资源的绝对 URL，即使页面被多次重定向后，这个 URL 资源位置也不会改变。\n\n#### 3、close\n\n　　关闭当前线程，与terminate作用类似\n\n#### 4、importScripts\n\n　　我们可以通过importScripts()方法通过url在worker中加载库函数\n\n#### 5、XMLHttpRequest\n\n　　有了它，才能发出Ajax请求\n\n#### 6、setTimeout/setInterval以及addEventListener/postMessage\n\n### 四、关于worker\n我们可以做什么：\n\n　　1.可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信\n\n　　2.可以在worker中通过importScripts(url)加载另外的脚本文件\n\n　　3.可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()\n\n　　4.可以使用XMLHttpRequest来发送请求\n\n　　5.可以访问navigator的部分属性\n\n局限性：\n\n　　1.不能跨域加载JS\n\n　　2.worker内代码不能访问DOM\n\n　　3.各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行\n\n　　4.IE这个新特性","slug":"2017-05-07","published":1,"updated":"2017-08-19T13:21:45.000Z","_id":"cj2eptg190001bzldopopap0c","layout":"post","photos":[],"link":"","content":"<h3 id=\"一、webWorker之初体验\"><a href=\"#一、webWorker之初体验\" class=\"headerlink\" title=\"一、webWorker之初体验\"></a>一、webWorker之初体验</h3><p>在”setTimeout那些事儿”中，说到JavaScript是单线程。也就是同一时间只能做同一事情。</p>\n<p>也好理解，作为浏览器脚本语言，如果JavaScript不是单线程，那么就有点棘手了。比如，与用户交互或者对DOM进行操作时，在一个线程上修改某个DOM，另外的线程删除DOM，这时浏览器该如何抉择呢?</p>\n<p>所以，JavaScript是单线程也是有背景的。</p>\n<a id=\"more\"></a>\n<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>singleThread<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//添加到任务队列中，待同步任务所处的‘执行栈’执行完毕，1秒后执行任务队列中的这个匿名函数</span></span></div><div class=\"line\"><span class=\"javascript\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'come on'</span>);</span></div><div class=\"line\"><span class=\"undefined\">            &#125;,1000);</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//只要不关闭该alert，‘执行栈’就没结束，从而也就不会进入到任务队列中</span></span></div><div class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">'waiting'</span>);</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但，HTML5引入了一个工作线程（webWorker）的概念。它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。</p>\n<p>简而言之，就是允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。</p>\n<p>从而，可以用webWorker来处理一些比较耗时的计算。</p>\n<p>如下，主页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//创建一个Worker对象，并向它传递将在新线程中执行的脚本url</span></span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//接收worker传递过来的数据</span></span></div><div class=\"line\"><span class=\"javascript\">                worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML+=event.data+<span class=\"string\">\"&lt;br/&gt;\"</span> ;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;;</span></div><div class=\"line\"><span class=\"undefined\">            &#125;;</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span> = <span class=\"string\">\"init()\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>下面是worker.js的内容:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timedCount</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++)&#123;</div><div class=\"line\">            sum+=i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//将得到的sum发送回主线程</span></div><div class=\"line\">    postMessage(sum);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//将执行timedCount前的时间，通过postMessage发送回主线程</span></div><div class=\"line\">postMessage(<span class=\"string\">'Before computing, '</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">timedCount();</div><div class=\"line\"><span class=\"comment\">//结束timedCount后，将结束时间发送回主线程</span></div><div class=\"line\">postMessage(<span class=\"string\">'After computing, '</span> +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div></pre></td></tr></table></figure>\n<p>上面代码执行的流程是：创建的worker对象，并用onmessage方法接收worker.js里面postMessage传递过来的数据(event.data)，并将数据追加到div#result中。</p>\n<p>所以，执行上面的代码结果如下：</p>\n<p><img src=\"/webworker/1.png\" alt=\"1\"></p>\n<p>待worker.js中的timedCount方法运算完后，执行postMessage操作，向主线程传数据，得图二。期间，并不影响主线程的运作。</p>\n<p><img src=\"/2017-05-07/2.png\" alt=\"2\"></p>\n<h3 id=\"二、webWorker之常用API\"><a href=\"#二、webWorker之常用API\" class=\"headerlink\" title=\"二、webWorker之常用ＡＰＩ\"></a>二、webWorker之常用ＡＰＩ</h3><p>接下来，再来看看关于worker的常用API：</p>\n<h4 id=\"1、postMessage-data\"><a href=\"#1、postMessage-data\" class=\"headerlink\" title=\"1、postMessage(data)\"></a>1、postMessage(data)</h4><p>子线程与主线程之间互相通信使用方法，传递的data为任意值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\"><span class=\"comment\">//worker.postMessage传递给子线程数据，对象</span></div><div class=\"line\">worker.postMessage(&#123;<span class=\"attr\">first</span>:<span class=\"number\">1</span>,<span class=\"attr\">second</span>:<span class=\"number\">2</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子线程中也可以使用postMessage，如传递字符串</span></div><div class=\"line\">postMessage(‘test’);</div></pre></td></tr></table></figure>\n<h4 id=\"2、terminate\"><a href=\"#2、terminate\" class=\"headerlink\" title=\"2、terminate()\"></a>2、terminate()</h4><p>主线程中终止worker，此后无法再利用其进行消息传递。注意：一旦terminate后，无法重新启用，只能另外创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\">worker.terminate();</div></pre></td></tr></table></figure> \n<p>如，主页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//每隔100毫秒，向子线程传递&#123;name: 'monkey'&#125;信息</span></span></div><div class=\"line\"><span class=\"javascript\">                setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    worker.postMessage(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'monkey'</span>&#125;);</span></div><div class=\"line\"><span class=\"undefined\">                &#125;,100);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//当主线程worker收到来自子线程的消息后，触发message事件</span></span></div><div class=\"line\"><span class=\"javascript\">                worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML+=event.data+<span class=\"string\">\"&lt;br/&gt;\"</span> ;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"comment\">//主线程使用terminate方法中断与子线程来往，在浏览器中只能显示一次event.data</span></span></div><div class=\"line\"><span class=\"undefined\">                    worker.terminate();</span></div><div class=\"line\"><span class=\"undefined\">                &#125;;</span></div><div class=\"line\"><span class=\"undefined\">            &#125;;</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span> = <span class=\"string\">\"init()\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure> \n<p>子线程worker.js代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"comment\">//当主线程发来信息后，触发该message事件</span></div><div class=\"line\">onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//向主线程发送event.data.name信息</span></div><div class=\"line\">    postMessage(event.data.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure> \n<h4 id=\"3、message\"><a href=\"#3、message\" class=\"headerlink\" title=\"3、message\"></a>3、message</h4><p>当有消息发送时，触发该事件。且，消息发送是双向的，消息内容可通过data来获取。</p>\n<p>message使用，可见terminate中的demo</p>\n<h4 id=\"4、error\"><a href=\"#4、error\" class=\"headerlink\" title=\"4、error\"></a>4、error</h4><p>出错处理。且错误消息可以通过e.message来获取。</p>\n<p>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\">worker.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//打印出错消息</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">    <span class=\"comment\">//中断与子线程的联系</span></div><div class=\"line\">    worker.terminate();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>另：worker线程从上到下同步运行它的代码，然后进入异步阶段来对事件及计时器响应，如果worker注册了message事件处理程序，只要其有可能触发，worker就一直在内存中，不会退出，所以通信完毕后得手动在主线程中terminate或者子线程中close掉，但如果worker没有监听消息，那么当所有任务执行完毕（包括计数器）后，他就会退出。</p>\n<h3 id=\"三、worker上下文\"><a href=\"#三、worker上下文\" class=\"headerlink\" title=\"三、worker上下文\"></a>三、worker上下文</h3><p>先看下面这段代码：</p>\n<p>主页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;worker&lt;<span class=\"regexp\">/title&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/</span>html; charset=utf<span class=\"number\">-8</span><span class=\"string\">\"/&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;script&gt;</span></div><div class=\"line\"><span class=\"string\">            function init()&#123;</span></div><div class=\"line\"><span class=\"string\">                var worker = new Worker('worker.js');</span></div><div class=\"line\"><span class=\"string\">                //接收消息事件</span></div><div class=\"line\"><span class=\"string\">                worker.onmessage = function(event)&#123;</span></div><div class=\"line\"><span class=\"string\">                    console.log(event.data);</span></div><div class=\"line\"><span class=\"string\">                &#125;;</span></div><div class=\"line\"><span class=\"string\">                //错误信息事件</span></div><div class=\"line\"><span class=\"string\">                worker.onerror = function(e)&#123;</span></div><div class=\"line\"><span class=\"string\">                    console.log('erro: ' + e.message);</span></div><div class=\"line\"><span class=\"string\">                    //终止线程</span></div><div class=\"line\"><span class=\"string\">                    worker.terminate();</span></div><div class=\"line\"><span class=\"string\">                &#125;;</span></div><div class=\"line\"><span class=\"string\">            &#125;;</span></div><div class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;body onload = \"</span>init()<span class=\"string\">\"&gt;</span></div><div class=\"line\"><span class=\"string\">        </span></div><div class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">&lt;/html&gt;</span></div></pre></td></tr></table></figure>\n<p>worker.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//window对象的alert方法</span></div><div class=\"line\">alert(<span class=\"number\">1</span>);</div><div class=\"line\">onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//向主线程发送event.data.name信息</span></div><div class=\"line\">    postMessage(event.data.name);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>执行上面代码结果：</p>\n<p><img src=\"/2017-05-07/3.png\" alt=\"3\"></p>\n<p>为什么会这样呢？原因是alert为window对象的方法，所以会报错undefined。</p>\n<p>worker.js执行的上下文，与主页面html执行时的上下文并不相同，最顶层的对象并不是window，woker.js执行的全局上下文，是个叫做WorkerGlobalScope的东东，所以无法访问window、与window相关的DOM API，但是可以与setTimeout、setInterval等协作。<br>WorkerGlobalScope作用域下的常用属性、方法如下：</p>\n<h4 id=\"1、self\"><a href=\"#1、self\" class=\"headerlink\" title=\"1、self\"></a>1、self</h4><p>　　我们可以使用 WorkerGlobalScope 的 self 属性来或者这个对象本身的引用</p>\n<h4 id=\"2、location\"><a href=\"#2、location\" class=\"headerlink\" title=\"2、location\"></a>2、location</h4><p>　　location 属性返回当线程被创建出来的时候与之关联的 WorkerLocation 对象，它表示用于初始化这个工作线程的脚步资源的绝对 URL，即使页面被多次重定向后，这个 URL 资源位置也不会改变。</p>\n<h4 id=\"3、close\"><a href=\"#3、close\" class=\"headerlink\" title=\"3、close\"></a>3、close</h4><p>　　关闭当前线程，与terminate作用类似</p>\n<h4 id=\"4、importScripts\"><a href=\"#4、importScripts\" class=\"headerlink\" title=\"4、importScripts\"></a>4、importScripts</h4><p>　　我们可以通过importScripts()方法通过url在worker中加载库函数</p>\n<h4 id=\"5、XMLHttpRequest\"><a href=\"#5、XMLHttpRequest\" class=\"headerlink\" title=\"5、XMLHttpRequest\"></a>5、XMLHttpRequest</h4><p>　　有了它，才能发出Ajax请求</p>\n<h4 id=\"6、setTimeout-setInterval以及addEventListener-postMessage\"><a href=\"#6、setTimeout-setInterval以及addEventListener-postMessage\" class=\"headerlink\" title=\"6、setTimeout/setInterval以及addEventListener/postMessage\"></a>6、setTimeout/setInterval以及addEventListener/postMessage</h4><h3 id=\"四、关于worker\"><a href=\"#四、关于worker\" class=\"headerlink\" title=\"四、关于worker\"></a>四、关于worker</h3><p>我们可以做什么：</p>\n<p>　　1.可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信</p>\n<p>　　2.可以在worker中通过importScripts(url)加载另外的脚本文件</p>\n<p>　　3.可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()</p>\n<p>　　4.可以使用XMLHttpRequest来发送请求</p>\n<p>　　5.可以访问navigator的部分属性</p>\n<p>局限性：</p>\n<p>　　1.不能跨域加载JS</p>\n<p>　　2.worker内代码不能访问DOM</p>\n<p>　　3.各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行</p>\n<p>　　4.IE这个新特性</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、webWorker之初体验\"><a href=\"#一、webWorker之初体验\" class=\"headerlink\" title=\"一、webWorker之初体验\"></a>一、webWorker之初体验</h3><p>在”setTimeout那些事儿”中，说到JavaScript是单线程。也就是同一时间只能做同一事情。</p>\n<p>也好理解，作为浏览器脚本语言，如果JavaScript不是单线程，那么就有点棘手了。比如，与用户交互或者对DOM进行操作时，在一个线程上修改某个DOM，另外的线程删除DOM，这时浏览器该如何抉择呢?</p>\n<p>所以，JavaScript是单线程也是有背景的。</p>","more":"<p>如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>singleThread<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//添加到任务队列中，待同步任务所处的‘执行栈’执行完毕，1秒后执行任务队列中的这个匿名函数</span></span></div><div class=\"line\"><span class=\"javascript\">            setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'come on'</span>);</span></div><div class=\"line\"><span class=\"undefined\">            &#125;,1000);</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//只要不关闭该alert，‘执行栈’就没结束，从而也就不会进入到任务队列中</span></span></div><div class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">'waiting'</span>);</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>但，HTML5引入了一个工作线程（webWorker）的概念。它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。</p>\n<p>简而言之，就是允许JavaScript创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。</p>\n<p>从而，可以用webWorker来处理一些比较耗时的计算。</p>\n<p>如下，主页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//创建一个Worker对象，并向它传递将在新线程中执行的脚本url</span></span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//接收worker传递过来的数据</span></span></div><div class=\"line\"><span class=\"javascript\">                worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML+=event.data+<span class=\"string\">\"&lt;br/&gt;\"</span> ;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;;</span></div><div class=\"line\"><span class=\"undefined\">            &#125;;</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span> = <span class=\"string\">\"init()\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>下面是worker.js的内容:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timedCount</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100</span>; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++)&#123;</div><div class=\"line\">            sum+=i;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//将得到的sum发送回主线程</span></div><div class=\"line\">    postMessage(sum);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//将执行timedCount前的时间，通过postMessage发送回主线程</span></div><div class=\"line\">postMessage(<span class=\"string\">'Before computing, '</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">timedCount();</div><div class=\"line\"><span class=\"comment\">//结束timedCount后，将结束时间发送回主线程</span></div><div class=\"line\">postMessage(<span class=\"string\">'After computing, '</span> +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div></pre></td></tr></table></figure>\n<p>上面代码执行的流程是：创建的worker对象，并用onmessage方法接收worker.js里面postMessage传递过来的数据(event.data)，并将数据追加到div#result中。</p>\n<p>所以，执行上面的代码结果如下：</p>\n<p><img src=\"/webworker/1.png\" alt=\"1\"></p>\n<p>待worker.js中的timedCount方法运算完后，执行postMessage操作，向主线程传数据，得图二。期间，并不影响主线程的运作。</p>\n<p><img src=\"/2017-05-07/2.png\" alt=\"2\"></p>\n<h3 id=\"二、webWorker之常用API\"><a href=\"#二、webWorker之常用API\" class=\"headerlink\" title=\"二、webWorker之常用ＡＰＩ\"></a>二、webWorker之常用ＡＰＩ</h3><p>接下来，再来看看关于worker的常用API：</p>\n<h4 id=\"1、postMessage-data\"><a href=\"#1、postMessage-data\" class=\"headerlink\" title=\"1、postMessage(data)\"></a>1、postMessage(data)</h4><p>子线程与主线程之间互相通信使用方法，传递的data为任意值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\"><span class=\"comment\">//worker.postMessage传递给子线程数据，对象</span></div><div class=\"line\">worker.postMessage(&#123;<span class=\"attr\">first</span>:<span class=\"number\">1</span>,<span class=\"attr\">second</span>:<span class=\"number\">2</span>&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//子线程中也可以使用postMessage，如传递字符串</span></div><div class=\"line\">postMessage(‘test’);</div></pre></td></tr></table></figure>\n<h4 id=\"2、terminate\"><a href=\"#2、terminate\" class=\"headerlink\" title=\"2、terminate()\"></a>2、terminate()</h4><p>主线程中终止worker，此后无法再利用其进行消息传递。注意：一旦terminate后，无法重新启用，只能另外创建。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\">worker.terminate();</div></pre></td></tr></table></figure> \n<p>如，主页面：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>worker<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//每隔100毫秒，向子线程传递&#123;name: 'monkey'&#125;信息</span></span></div><div class=\"line\"><span class=\"javascript\">                setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    worker.postMessage(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'monkey'</span>&#125;);</span></div><div class=\"line\"><span class=\"undefined\">                &#125;,100);</span></div><div class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//当主线程worker收到来自子线程的消息后，触发message事件</span></span></div><div class=\"line\"><span class=\"javascript\">                worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).innerHTML+=event.data+<span class=\"string\">\"&lt;br/&gt;\"</span> ;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"comment\">//主线程使用terminate方法中断与子线程来往，在浏览器中只能显示一次event.data</span></span></div><div class=\"line\"><span class=\"undefined\">                    worker.terminate();</span></div><div class=\"line\"><span class=\"undefined\">                &#125;;</span></div><div class=\"line\"><span class=\"undefined\">            &#125;;</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span> = <span class=\"string\">\"init()\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure> \n<p>子线程worker.js代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"comment\">//当主线程发来信息后，触发该message事件</span></div><div class=\"line\">onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//向主线程发送event.data.name信息</span></div><div class=\"line\">    postMessage(event.data.name);</div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure> \n<h4 id=\"3、message\"><a href=\"#3、message\" class=\"headerlink\" title=\"3、message\"></a>3、message</h4><p>当有消息发送时，触发该事件。且，消息发送是双向的，消息内容可通过data来获取。</p>\n<p>message使用，可见terminate中的demo</p>\n<h4 id=\"4、error\"><a href=\"#4、error\" class=\"headerlink\" title=\"4、error\"></a>4、error</h4><p>出错处理。且错误消息可以通过e.message来获取。</p>\n<p>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker = new Worker('url');</span></div><div class=\"line\">worker.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//打印出错消息</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);</div><div class=\"line\">    <span class=\"comment\">//中断与子线程的联系</span></div><div class=\"line\">    worker.terminate();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>另：worker线程从上到下同步运行它的代码，然后进入异步阶段来对事件及计时器响应，如果worker注册了message事件处理程序，只要其有可能触发，worker就一直在内存中，不会退出，所以通信完毕后得手动在主线程中terminate或者子线程中close掉，但如果worker没有监听消息，那么当所有任务执行完毕（包括计数器）后，他就会退出。</p>\n<h3 id=\"三、worker上下文\"><a href=\"#三、worker上下文\" class=\"headerlink\" title=\"三、worker上下文\"></a>三、worker上下文</h3><p>先看下面这段代码：</p>\n<p>主页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;title&gt;worker&lt;<span class=\"regexp\">/title&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;meta http-equiv=\"Content-Type\" content=\"text/</span>html; charset=utf<span class=\"number\">-8</span><span class=\"string\">\"/&gt;</span></div><div class=\"line\"><span class=\"string\">        &lt;script&gt;</span></div><div class=\"line\"><span class=\"string\">            function init()&#123;</span></div><div class=\"line\"><span class=\"string\">                var worker = new Worker('worker.js');</span></div><div class=\"line\"><span class=\"string\">                //接收消息事件</span></div><div class=\"line\"><span class=\"string\">                worker.onmessage = function(event)&#123;</span></div><div class=\"line\"><span class=\"string\">                    console.log(event.data);</span></div><div class=\"line\"><span class=\"string\">                &#125;;</span></div><div class=\"line\"><span class=\"string\">                //错误信息事件</span></div><div class=\"line\"><span class=\"string\">                worker.onerror = function(e)&#123;</span></div><div class=\"line\"><span class=\"string\">                    console.log('erro: ' + e.message);</span></div><div class=\"line\"><span class=\"string\">                    //终止线程</span></div><div class=\"line\"><span class=\"string\">                    worker.terminate();</span></div><div class=\"line\"><span class=\"string\">                &#125;;</span></div><div class=\"line\"><span class=\"string\">            &#125;;</span></div><div class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></div><div class=\"line\"><span class=\"string\">    &lt;body onload = \"</span>init()<span class=\"string\">\"&gt;</span></div><div class=\"line\"><span class=\"string\">        </span></div><div class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></div><div class=\"line\"><span class=\"string\">&lt;/html&gt;</span></div></pre></td></tr></table></figure>\n<p>worker.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//window对象的alert方法</span></div><div class=\"line\">alert(<span class=\"number\">1</span>);</div><div class=\"line\">onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//向主线程发送event.data.name信息</span></div><div class=\"line\">    postMessage(event.data.name);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>执行上面代码结果：</p>\n<p><img src=\"/2017-05-07/3.png\" alt=\"3\"></p>\n<p>为什么会这样呢？原因是alert为window对象的方法，所以会报错undefined。</p>\n<p>worker.js执行的上下文，与主页面html执行时的上下文并不相同，最顶层的对象并不是window，woker.js执行的全局上下文，是个叫做WorkerGlobalScope的东东，所以无法访问window、与window相关的DOM API，但是可以与setTimeout、setInterval等协作。<br>WorkerGlobalScope作用域下的常用属性、方法如下：</p>\n<h4 id=\"1、self\"><a href=\"#1、self\" class=\"headerlink\" title=\"1、self\"></a>1、self</h4><p>　　我们可以使用 WorkerGlobalScope 的 self 属性来或者这个对象本身的引用</p>\n<h4 id=\"2、location\"><a href=\"#2、location\" class=\"headerlink\" title=\"2、location\"></a>2、location</h4><p>　　location 属性返回当线程被创建出来的时候与之关联的 WorkerLocation 对象，它表示用于初始化这个工作线程的脚步资源的绝对 URL，即使页面被多次重定向后，这个 URL 资源位置也不会改变。</p>\n<h4 id=\"3、close\"><a href=\"#3、close\" class=\"headerlink\" title=\"3、close\"></a>3、close</h4><p>　　关闭当前线程，与terminate作用类似</p>\n<h4 id=\"4、importScripts\"><a href=\"#4、importScripts\" class=\"headerlink\" title=\"4、importScripts\"></a>4、importScripts</h4><p>　　我们可以通过importScripts()方法通过url在worker中加载库函数</p>\n<h4 id=\"5、XMLHttpRequest\"><a href=\"#5、XMLHttpRequest\" class=\"headerlink\" title=\"5、XMLHttpRequest\"></a>5、XMLHttpRequest</h4><p>　　有了它，才能发出Ajax请求</p>\n<h4 id=\"6、setTimeout-setInterval以及addEventListener-postMessage\"><a href=\"#6、setTimeout-setInterval以及addEventListener-postMessage\" class=\"headerlink\" title=\"6、setTimeout/setInterval以及addEventListener/postMessage\"></a>6、setTimeout/setInterval以及addEventListener/postMessage</h4><h3 id=\"四、关于worker\"><a href=\"#四、关于worker\" class=\"headerlink\" title=\"四、关于worker\"></a>四、关于worker</h3><p>我们可以做什么：</p>\n<p>　　1.可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信</p>\n<p>　　2.可以在worker中通过importScripts(url)加载另外的脚本文件</p>\n<p>　　3.可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()</p>\n<p>　　4.可以使用XMLHttpRequest来发送请求</p>\n<p>　　5.可以访问navigator的部分属性</p>\n<p>局限性：</p>\n<p>　　1.不能跨域加载JS</p>\n<p>　　2.worker内代码不能访问DOM</p>\n<p>　　3.各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行</p>\n<p>　　4.IE这个新特性</p>"},{"title":"如何使用vue-ssr做服务端渲染初体验(-)","comments":1,"date":"2017-06-01T13:09:11.000Z","_content":"\n### 1、前言\n\n服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式：\n\n1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。\n2、服务渲染生成html代码块, 前端通过AJAX获取然后使用js动态添加。\n\t\n<!-- more -->\t\n\t\n\n### 2、服务端渲染的优劣\n\n服务端渲染能够解决两大问题：\n\n1、seo问题，有利于搜索引擎蜘蛛抓取网站内容，利于网站的收录和排名。\n2、首屏加载过慢问题，例如现在成熟的SPA项目中，打开首页需要加载很多资源，通过服务端渲染可以加速首屏渲染。\n\t\n同样服务端渲染也会有弊端，主要是根据自己的业务场景来选择适合方式，由于服务端渲染前端页面，必将会给服务器增加压力。\n\n\n### 3、SSR的实现原理\n\n客户端请求服务器，服务器根据请求地址获得匹配的组件，在调用匹配到的组件返回 Promise (官方是preFetch方法)来将需要的数据拿到。最后再通过\n\n{% codeblock lang:javascript %}\n<script>window.__initial_state=data</script>\n{% endcodeblock %} \n\n将其写入网页，最后将服务端渲染好的网页返回回去。\n\n接下来客户端会将vuex将写入的 __initial_state__ 替换为当前的全局状态树，再用这个状态树去检查服务端渲染好的数据有没有问题。遇到没被服务端渲染的组件，再去发异步请求拿数据。说白了就是一个类似React的 shouldComponentUpdate 的Diff操作。\n\nVue2使用的是单向数据流，用了它，就可以通过 SSR 返回唯一一个全局状态， 并确认某个组件是否已经SSR过了。\n\n### 4、vue后端渲染主要插件：vue-server-renderer\n\n由于virtual dom的引入，使得vue的服务端渲染成为了可能，下面是官方 vue-server-renderer提供的渲染流程图:\n\n![官方流程图](vue-ssr/11.png)\n\n可以看出vue的后端渲染分三个部分组成：页面的源码（source），node层的渲染部分和浏览器端的渲染部分。\n\nsource分为两种entry point,一个是前端页面的入口client entry,主要是实例化Vue对象，将其挂载到页面中；另外一个是后端渲染服务入口server entry,主要是控服务端渲染模块回调，返回一个Promise对象，最终返回一个Vue对象（经过测试，直接返回Vue对象也是可以的）;\n\n前面的source部分就是业务开发的代码，开发完成之后通过 webpack 进行构建，生成对应的bundle，这里不再赘述client bundle,就是一个可在浏览器端执行的打包文件；这里说下server bundle, vue2提供 vue-server-renderer模块，模块可以提供两种render: rendererer/bundleRenderer ,下面分别介绍下这两种render。\n\nrenderer接收一个vue对象 ，然后进行渲染，这种对于简单的vue对象,可以这么去做，但是对于复杂的项目，如果使用这种直接require一个vue对象，这个对于服务端代码的结构和逻辑都不太友好，首先模块的状态会一直延续在每个请求渲染请求，我们需要去管理和避免这次渲染请求的状态影响到后面的请求,因此vue-server-renderer提供了另外一种渲染模式，通过一个 bundleRenderer去做渲染。\n\nbundleRenderer是较为复杂项目进行服务端渲染官方推荐的方式，通过webpack以server entry按照一定的要求打包生成一个 server-bundle,它相当于一个可以给服务端用的app的打包压缩文件，每一次调用都会重新初始化 vue对象，保证了每次请求都是独立的，对于开发者来说，只需要专注于当前业务就可以，不用为服务端渲染开发更多的逻辑代码。\nrenderer生成完成之后，都存在两个接口，分别是renderToString和renderToStream，一个是一次性将页面渲染成字符串文件，另外一个是流式渲染，适用于支持流的web服务器，可以是请求服务的速度更快。\n\n### 5、项目基本结构如下\n\n![项目结构图](vue-ssr/22.jpeg)\n\n> 如何从零开始搭建适合自己的vue后端渲染框架？","source":"_posts/vue-ssr.md","raw":"---\ntitle: 如何使用vue-ssr做服务端渲染初体验(-)\ncomments: true\ndate: 2017-06-01 21:09:11\ntags: \n    - 'javascript'\n    - 'vue'\n---\n\n### 1、前言\n\n服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式：\n\n1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。\n2、服务渲染生成html代码块, 前端通过AJAX获取然后使用js动态添加。\n\t\n<!-- more -->\t\n\t\n\n### 2、服务端渲染的优劣\n\n服务端渲染能够解决两大问题：\n\n1、seo问题，有利于搜索引擎蜘蛛抓取网站内容，利于网站的收录和排名。\n2、首屏加载过慢问题，例如现在成熟的SPA项目中，打开首页需要加载很多资源，通过服务端渲染可以加速首屏渲染。\n\t\n同样服务端渲染也会有弊端，主要是根据自己的业务场景来选择适合方式，由于服务端渲染前端页面，必将会给服务器增加压力。\n\n\n### 3、SSR的实现原理\n\n客户端请求服务器，服务器根据请求地址获得匹配的组件，在调用匹配到的组件返回 Promise (官方是preFetch方法)来将需要的数据拿到。最后再通过\n\n{% codeblock lang:javascript %}\n<script>window.__initial_state=data</script>\n{% endcodeblock %} \n\n将其写入网页，最后将服务端渲染好的网页返回回去。\n\n接下来客户端会将vuex将写入的 __initial_state__ 替换为当前的全局状态树，再用这个状态树去检查服务端渲染好的数据有没有问题。遇到没被服务端渲染的组件，再去发异步请求拿数据。说白了就是一个类似React的 shouldComponentUpdate 的Diff操作。\n\nVue2使用的是单向数据流，用了它，就可以通过 SSR 返回唯一一个全局状态， 并确认某个组件是否已经SSR过了。\n\n### 4、vue后端渲染主要插件：vue-server-renderer\n\n由于virtual dom的引入，使得vue的服务端渲染成为了可能，下面是官方 vue-server-renderer提供的渲染流程图:\n\n![官方流程图](vue-ssr/11.png)\n\n可以看出vue的后端渲染分三个部分组成：页面的源码（source），node层的渲染部分和浏览器端的渲染部分。\n\nsource分为两种entry point,一个是前端页面的入口client entry,主要是实例化Vue对象，将其挂载到页面中；另外一个是后端渲染服务入口server entry,主要是控服务端渲染模块回调，返回一个Promise对象，最终返回一个Vue对象（经过测试，直接返回Vue对象也是可以的）;\n\n前面的source部分就是业务开发的代码，开发完成之后通过 webpack 进行构建，生成对应的bundle，这里不再赘述client bundle,就是一个可在浏览器端执行的打包文件；这里说下server bundle, vue2提供 vue-server-renderer模块，模块可以提供两种render: rendererer/bundleRenderer ,下面分别介绍下这两种render。\n\nrenderer接收一个vue对象 ，然后进行渲染，这种对于简单的vue对象,可以这么去做，但是对于复杂的项目，如果使用这种直接require一个vue对象，这个对于服务端代码的结构和逻辑都不太友好，首先模块的状态会一直延续在每个请求渲染请求，我们需要去管理和避免这次渲染请求的状态影响到后面的请求,因此vue-server-renderer提供了另外一种渲染模式，通过一个 bundleRenderer去做渲染。\n\nbundleRenderer是较为复杂项目进行服务端渲染官方推荐的方式，通过webpack以server entry按照一定的要求打包生成一个 server-bundle,它相当于一个可以给服务端用的app的打包压缩文件，每一次调用都会重新初始化 vue对象，保证了每次请求都是独立的，对于开发者来说，只需要专注于当前业务就可以，不用为服务端渲染开发更多的逻辑代码。\nrenderer生成完成之后，都存在两个接口，分别是renderToString和renderToStream，一个是一次性将页面渲染成字符串文件，另外一个是流式渲染，适用于支持流的web服务器，可以是请求服务的速度更快。\n\n### 5、项目基本结构如下\n\n![项目结构图](vue-ssr/22.jpeg)\n\n> 如何从零开始搭建适合自己的vue后端渲染框架？","slug":"vue-ssr","published":1,"updated":"2017-08-19T13:21:53.000Z","_id":"cj6iy7ukx0000wqldxeu9thl7","layout":"post","photos":[],"link":"","content":"<h3 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h3><p>服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式：</p>\n<p>1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。<br>2、服务渲染生成html代码块, 前端通过AJAX获取然后使用js动态添加。</p>\n<a id=\"more\"></a>    \n<h3 id=\"2、服务端渲染的优劣\"><a href=\"#2、服务端渲染的优劣\" class=\"headerlink\" title=\"2、服务端渲染的优劣\"></a>2、服务端渲染的优劣</h3><p>服务端渲染能够解决两大问题：</p>\n<p>1、seo问题，有利于搜索引擎蜘蛛抓取网站内容，利于网站的收录和排名。<br>2、首屏加载过慢问题，例如现在成熟的SPA项目中，打开首页需要加载很多资源，通过服务端渲染可以加速首屏渲染。</p>\n<p>同样服务端渲染也会有弊端，主要是根据自己的业务场景来选择适合方式，由于服务端渲染前端页面，必将会给服务器增加压力。</p>\n<h3 id=\"3、SSR的实现原理\"><a href=\"#3、SSR的实现原理\" class=\"headerlink\" title=\"3、SSR的实现原理\"></a>3、SSR的实现原理</h3><p>客户端请求服务器，服务器根据请求地址获得匹配的组件，在调用匹配到的组件返回 Promise (官方是preFetch方法)来将需要的数据拿到。最后再通过</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;<span class=\"built_in\">window</span>.__initial_state=data&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure> \n<p>将其写入网页，最后将服务端渲染好的网页返回回去。</p>\n<p>接下来客户端会将vuex将写入的 <strong>initial_state</strong> 替换为当前的全局状态树，再用这个状态树去检查服务端渲染好的数据有没有问题。遇到没被服务端渲染的组件，再去发异步请求拿数据。说白了就是一个类似React的 shouldComponentUpdate 的Diff操作。</p>\n<p>Vue2使用的是单向数据流，用了它，就可以通过 SSR 返回唯一一个全局状态， 并确认某个组件是否已经SSR过了。</p>\n<h3 id=\"4、vue后端渲染主要插件：vue-server-renderer\"><a href=\"#4、vue后端渲染主要插件：vue-server-renderer\" class=\"headerlink\" title=\"4、vue后端渲染主要插件：vue-server-renderer\"></a>4、vue后端渲染主要插件：vue-server-renderer</h3><p>由于virtual dom的引入，使得vue的服务端渲染成为了可能，下面是官方 vue-server-renderer提供的渲染流程图:</p>\n<p><img src=\"/vue-ssr/11.png\" alt=\"官方流程图\"></p>\n<p>可以看出vue的后端渲染分三个部分组成：页面的源码（source），node层的渲染部分和浏览器端的渲染部分。</p>\n<p>source分为两种entry point,一个是前端页面的入口client entry,主要是实例化Vue对象，将其挂载到页面中；另外一个是后端渲染服务入口server entry,主要是控服务端渲染模块回调，返回一个Promise对象，最终返回一个Vue对象（经过测试，直接返回Vue对象也是可以的）;</p>\n<p>前面的source部分就是业务开发的代码，开发完成之后通过 webpack 进行构建，生成对应的bundle，这里不再赘述client bundle,就是一个可在浏览器端执行的打包文件；这里说下server bundle, vue2提供 vue-server-renderer模块，模块可以提供两种render: rendererer/bundleRenderer ,下面分别介绍下这两种render。</p>\n<p>renderer接收一个vue对象 ，然后进行渲染，这种对于简单的vue对象,可以这么去做，但是对于复杂的项目，如果使用这种直接require一个vue对象，这个对于服务端代码的结构和逻辑都不太友好，首先模块的状态会一直延续在每个请求渲染请求，我们需要去管理和避免这次渲染请求的状态影响到后面的请求,因此vue-server-renderer提供了另外一种渲染模式，通过一个 bundleRenderer去做渲染。</p>\n<p>bundleRenderer是较为复杂项目进行服务端渲染官方推荐的方式，通过webpack以server entry按照一定的要求打包生成一个 server-bundle,它相当于一个可以给服务端用的app的打包压缩文件，每一次调用都会重新初始化 vue对象，保证了每次请求都是独立的，对于开发者来说，只需要专注于当前业务就可以，不用为服务端渲染开发更多的逻辑代码。<br>renderer生成完成之后，都存在两个接口，分别是renderToString和renderToStream，一个是一次性将页面渲染成字符串文件，另外一个是流式渲染，适用于支持流的web服务器，可以是请求服务的速度更快。</p>\n<h3 id=\"5、项目基本结构如下\"><a href=\"#5、项目基本结构如下\" class=\"headerlink\" title=\"5、项目基本结构如下\"></a>5、项目基本结构如下</h3><p><img src=\"/vue-ssr/22.jpeg\" alt=\"项目结构图\"></p>\n<blockquote>\n<p>如何从零开始搭建适合自己的vue后端渲染框架？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h3><p>服务端渲染实现原理机制：在服务端拿数据进行解析渲染，直接生成html片段返回给前端。然后前端可以通过解析后端返回的html片段到前端页面，大致有以下两种形式：</p>\n<p>1、服务器通过模版引擎直接渲染整个页面，例如java后端的vm模版引擎，php后端的smarty模版引擎。<br>2、服务渲染生成html代码块, 前端通过AJAX获取然后使用js动态添加。</p>","more":"<h3 id=\"2、服务端渲染的优劣\"><a href=\"#2、服务端渲染的优劣\" class=\"headerlink\" title=\"2、服务端渲染的优劣\"></a>2、服务端渲染的优劣</h3><p>服务端渲染能够解决两大问题：</p>\n<p>1、seo问题，有利于搜索引擎蜘蛛抓取网站内容，利于网站的收录和排名。<br>2、首屏加载过慢问题，例如现在成熟的SPA项目中，打开首页需要加载很多资源，通过服务端渲染可以加速首屏渲染。</p>\n<p>同样服务端渲染也会有弊端，主要是根据自己的业务场景来选择适合方式，由于服务端渲染前端页面，必将会给服务器增加压力。</p>\n<h3 id=\"3、SSR的实现原理\"><a href=\"#3、SSR的实现原理\" class=\"headerlink\" title=\"3、SSR的实现原理\"></a>3、SSR的实现原理</h3><p>客户端请求服务器，服务器根据请求地址获得匹配的组件，在调用匹配到的组件返回 Promise (官方是preFetch方法)来将需要的数据拿到。最后再通过</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;<span class=\"built_in\">window</span>.__initial_state=data&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure> \n<p>将其写入网页，最后将服务端渲染好的网页返回回去。</p>\n<p>接下来客户端会将vuex将写入的 <strong>initial_state</strong> 替换为当前的全局状态树，再用这个状态树去检查服务端渲染好的数据有没有问题。遇到没被服务端渲染的组件，再去发异步请求拿数据。说白了就是一个类似React的 shouldComponentUpdate 的Diff操作。</p>\n<p>Vue2使用的是单向数据流，用了它，就可以通过 SSR 返回唯一一个全局状态， 并确认某个组件是否已经SSR过了。</p>\n<h3 id=\"4、vue后端渲染主要插件：vue-server-renderer\"><a href=\"#4、vue后端渲染主要插件：vue-server-renderer\" class=\"headerlink\" title=\"4、vue后端渲染主要插件：vue-server-renderer\"></a>4、vue后端渲染主要插件：vue-server-renderer</h3><p>由于virtual dom的引入，使得vue的服务端渲染成为了可能，下面是官方 vue-server-renderer提供的渲染流程图:</p>\n<p><img src=\"/vue-ssr/11.png\" alt=\"官方流程图\"></p>\n<p>可以看出vue的后端渲染分三个部分组成：页面的源码（source），node层的渲染部分和浏览器端的渲染部分。</p>\n<p>source分为两种entry point,一个是前端页面的入口client entry,主要是实例化Vue对象，将其挂载到页面中；另外一个是后端渲染服务入口server entry,主要是控服务端渲染模块回调，返回一个Promise对象，最终返回一个Vue对象（经过测试，直接返回Vue对象也是可以的）;</p>\n<p>前面的source部分就是业务开发的代码，开发完成之后通过 webpack 进行构建，生成对应的bundle，这里不再赘述client bundle,就是一个可在浏览器端执行的打包文件；这里说下server bundle, vue2提供 vue-server-renderer模块，模块可以提供两种render: rendererer/bundleRenderer ,下面分别介绍下这两种render。</p>\n<p>renderer接收一个vue对象 ，然后进行渲染，这种对于简单的vue对象,可以这么去做，但是对于复杂的项目，如果使用这种直接require一个vue对象，这个对于服务端代码的结构和逻辑都不太友好，首先模块的状态会一直延续在每个请求渲染请求，我们需要去管理和避免这次渲染请求的状态影响到后面的请求,因此vue-server-renderer提供了另外一种渲染模式，通过一个 bundleRenderer去做渲染。</p>\n<p>bundleRenderer是较为复杂项目进行服务端渲染官方推荐的方式，通过webpack以server entry按照一定的要求打包生成一个 server-bundle,它相当于一个可以给服务端用的app的打包压缩文件，每一次调用都会重新初始化 vue对象，保证了每次请求都是独立的，对于开发者来说，只需要专注于当前业务就可以，不用为服务端渲染开发更多的逻辑代码。<br>renderer生成完成之后，都存在两个接口，分别是renderToString和renderToStream，一个是一次性将页面渲染成字符串文件，另外一个是流式渲染，适用于支持流的web服务器，可以是请求服务的速度更快。</p>\n<h3 id=\"5、项目基本结构如下\"><a href=\"#5、项目基本结构如下\" class=\"headerlink\" title=\"5、项目基本结构如下\"></a>5、项目基本结构如下</h3><p><img src=\"/vue-ssr/22.jpeg\" alt=\"项目结构图\"></p>\n<blockquote>\n<p>如何从零开始搭建适合自己的vue后端渲染框架？</p>\n</blockquote>"},{"title":"如何使用vue-ssr做服务端渲染初体验(二)","comments":1,"date":"2017-06-02T12:09:11.000Z","_content":"\n### 1、前言\n\n上一节我们大致讲了为什么需要使用vue后端渲染，以及vue后端渲染的基本原理，这节内容我们将从零开始搭建属于自己的vue后端渲染脚手架，当然不能不参考官方页面响应的实例<font color=\"#0078d8\">vue-hackernews-2.0</font>，从零开始搭建项目,源码在将在下节与大家共享。\n\n### 2、前期准备\n\n基本环境要求：node版本6.10.1以上，npm版本3.10.10以上，本机环境是这样的，建议升级到官方最新版本。\n\n使用的技术栈：\n\n<!-- more -->\n\n1、vue 2.4.2\n2、vuex 2.3.1\n3、vue-router 2.7.0\n4、vue-server-renderer 2.4.2\n5、express 4.15.4\n6、axios 0.16.2\n7、q https://github.com/kriskowal/q.git\n8、webpack 3.5.0\n9、mockjs 1.0.1-beta3\n10、babel \n\n以上是主要是用的技术栈，在构建过程中会是用相应的插件依赖包来配合进行压缩打包，以下是npm init后package.json文件所要添加的依赖包。\n\n![文件依赖](vue-ssr2/1.jpeg)\t\n\n### 3、项目主目录搭建\n\n基本目录结构如下：\n\n![项目主目录结构](vue-ssr2/2.jpeg)\n\n> 文件目录基本介绍：\n\t\ncomponents 主要存放组件代码，里面可以根据业务场景再次细分模块组件等。\nlib 主要存放第三方库文件，方便用户直接引入使用\npublic 主要存放公共组件代码和项目使用的公共文件代码，例如后期我们将axios封装成公共的api库文件等等。\nrouter 主要存放前端路由配置文件，写法规范按照vue-router官方例子即可。\nstore 主要是存放共享状态文件，里面包含action.js,getter.js,mutationtype.js,state.js等，后期会根据模块再细分这些。\napp.js 是项目入口文件\nApp.vue 是项目入口文件\nentry-client和entry-server分别是客户端入口文件和服务端的入口文件\nindex.template.html是整个项目的模版文件\n\n#### 开始编写app.js项目入口代码\n\n使用vue开发项目入口文件一般都会如下写法：\n{% codeblock lang:javascript %}\nimport Vue from 'vue';\nimport App from './index.vue';\nimport router from './router'\nimport store from './store';\n\nnew Vue({\n\tel: '#app',\n\tstore,\n\trouter,\n\trender: (h) => h(App)\n});\n{% endcodeblock %} \n\n这种写法是程序共享一个vue实例，但是在后端渲染中很容易导致交叉请求状态污染，导致数据流被污染了。\n\n> 所以，避免状态单例,我们不应该直接创建一个应用程序实例，而是应该暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例，同样router和store入口文件也需要重新创建一个实例。\n\n为了配合webpack动态加载路由配置，这里会改写常规路由引入写法，这样可以根据路由路径来判断加载相应的组件代码：\n\n{% codeblock lang:javascript %}\nimport Home from '../components/Home.vue'\n// 改写成\ncomponent: () => ('../components/Home.vue')\n{% endcodeblock %} \n\n\n以下是路由的基本写法router，对外会抛出一个createRouter方法来创建一个新的路由实例：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport Router from 'vue-router';\nVue.use(Router)\nexport function createRouter() {\n    return new Router({\n        mode: 'history',\n        routes: [{\n            name:'home',\n            path: '/',\n            component: () =>\n                import ('../components/Home.vue')\n        }]\n    })\n}\n{% endcodeblock %} \n\n以下是store状态管理的基本写法，对外暴露了一个createStore方法，方便每次访问创建一个新的实例：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport actions from './actions'\nimport getters from './getters'\n// 按照组件的复杂度是否使用modules\nimport Home from './modules/Home'\nVue.use(Vuex)\nexport function createStore() {\n  return new Vuex.Store({\n    actions,\n    getters,\n    modules:{\n      Home\n    },\n  })\n}\n{% endcodeblock %} \n\n\n\n结合写好的router和store入口文件代码来编写整个项目的入口文件app.js代码内容，同样最终也会对外暴露一个createApp方法，在每次创建app的时候保证router，store，app都是新创建的实例，这里还引入了一个vue路由插件vuex-router-sync，主要作用是同步路由状态(route state)到 store，以下是app.js完整代码：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport App from './App.vue'\nimport { createRouter } from './router'\nimport { createStore } from './store'\nimport { sync } from 'vuex-router-sync'\nexport function createApp () {\n  // 创建 router 和 store 实例\n  const router = createRouter()\n  const store = createStore()\n  // 同步路由状态(route state)到 store\n  sync(store, router)\n  // 创建应用程序实例，将 router 和 store 注入\n  const app = new Vue({\n    router,\n    store,\n    render: h => h(App)\n  })\n  // 暴露 app, router 和 store。\n  return { app, router, store }\n}\n{% endcodeblock %} \n\n#### entry-client.js代码编写：\n\n首页引入从app文件中暴露出来的createApp方法，在每次调用客户端的时候，重新创建一个新的app，router，store，部分代码如下：\n\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nconst { app, router, store } = createApp()\n{% endcodeblock %}\n\n这里我们会使用到onReady方法，此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候，例子代码如下：\n\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nconst { app, router, store } = createApp()\nrouter.onReady(() => {\n  app.$mount('#app')\n})\n{% endcodeblock %}\n\n\n我们会调用一个新方法beforeResolve，只有在router2.5.0以上的版本才会有的方法，注册一个类似于全局路由保护router.beforeEach()，除了在导航确认之后，在所有其他保护和异步组件已解决之后调用。基本写法如下：\n\n{% codeblock lang:javascript %}\nrouter.beforeResolve((to, from, next) => {\n\t// to 和 from 都是 路由信息对象\n\t// 返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。\n\tconst matched = router.getMatchedComponents(to)\n    const prevMatched = router.getMatchedComponents(from)\n})\n{% endcodeblock %}\n\n服务端把要给客户端的 state 放在了 window.__INITIAL_STATE__ 这个全局变量上面。前后端的 HTML 结构应该是一致的。然后要把 store 的状态树写入一个全局变量（__INITIAL_STATE__），这样客户端初始化 render 的时候能够校验服务器生成的 HTML 结构，并且同步到初始化状态，然后整个页面被客户端接管。基本代码如下：\n{% codeblock lang:javascript %}\n// 将服务端渲染时候的状态写入vuex中\nif (window.__INITIAL_STATE__) {\n  store.replaceState(window.__INITIAL_STATE__)\n}\n{% endcodeblock %}\n\n接下来贴出来完整的客户端代码，这里的Q也可以不用引入，直接使用babel就能编译es6自带的Promise，因为本人使用习惯了，这里可以根据自身的需求是否安装：\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nimport Q from 'q';\nconst { app, router, store } = createApp()\nrouter.onReady(() => {\n  router.beforeResolve((to, from, next) => {\n      const matched = router.getMatchedComponents(to)\n      const prevMatched = router.getMatchedComponents(from)\n      // 我们只关心之前没有渲染的组件\n      // 所以我们对比它们，找出两个匹配列表的差异组件\n      let diffed = false\n      const activated = matched.filter((c, i) => {\n        return diffed || (diffed = (prevMatched[i] !== c))\n      })\n      if (!activated.length) {\n        return next()\n      }\n      // 这里如果有加载指示器(loading indicator)，就触发\n      Q.all(activated.map(c => {\n        if (c.asyncData) {\n          return c.asyncData({ store, route: to })\n        }\n      })).then(() => {\n        // 停止加载指示器(loading indicator)\n        next()\n      }).catch(next)\n    })\n    app.$mount('#app')\n})\n// 将服务端渲染时候的状态写入vuex中\nif (window.__INITIAL_STATE__) {\n  store.replaceState(window.__INITIAL_STATE__)\n}\n{% endcodeblock %}\n\n#### entry-server.js代码编写：\n\n基本编写和客户端的差不多，因为这是服务端渲染，涉及到与后端数据交互定义的问题，我们需要在这里定义好各组件与后端交互使用的方法名称，这样方便在组件内部直接使用，这里根我们常规在组件直接使用ajax获取数据有些不一样，代码片段如下：\n{% codeblock lang:javascript %}\n//直接定义组件内部asyncData方法来触发相应的ajax获取数据\nif (Component.asyncData) {\n  return Component.asyncData({\n    store,\n    route: router.currentRoute\n  })\n}\n{% endcodeblock %}\n\n以下是完整的服务端代码：\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nimport Q from 'q'\nexport default context => {\n  return new Q.Promise((resolve, reject) => {\n    const { app, router, store } = createApp()\n    router.push(context.url)\n    router.onReady(() => {\n      const matchedComponents = router.getMatchedComponents()\n      if (!matchedComponents.length) {\n        return reject({ code: 404 })\n      }\n      // 对所有匹配的路由组件调用 `asyncData()`\n      Q.all(matchedComponents.map(Component => {\n        if (Component.asyncData) {\n          return Component.asyncData({\n            store,\n            route: router.currentRoute\n          })\n        }\n      })).then(() => {\n        // 在所有预取钩子(preFetch hook) resolve 后，\n        // 我们的 store 现在已经填充入渲染应用程序所需的状态。\n        // 当我们将状态附加到上下文，\n        // 并且 `template` 选项用于 renderer 时，\n        // 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。\n        context.state = store.state\n        resolve(app)\n      }).catch(reject)\n    }, reject)\n  })\n}\n{% endcodeblock %}\n\n### 4、脚手架其他目录介绍：\n\n到这里src下面主要的几个文件代码已经编写完成，接下里介绍下整个项目的目录结构如下：\n\n![整个目录结构](vue-ssr2/3.jpeg)\n\n主要几个文件介绍如下：\nbuild 主要存放webpack打包配置文件\ndist webpack打包后生成的目录\nlog 使用pm2监控进程存放的日志文件目录\nserver.js node服务器启动文件\npmlog.json pm2配置文件\n\n#### server.js入口文件编写\n\n我们还需要编写在服务端启动服务的代码server.js，我们会使用到部分node原生提供的api，片段代码如下：\n{% codeblock lang:javascript %}\nconst Vue = require('vue')\nconst express = require('express')\nconst path = require('path')\nconst LRU = require('lru-cache')\nconst { createBundleRenderer } = require('vue-server-renderer')\nconst fs = require('fs')\nconst net = require('net')\n{% endcodeblock %}\n\n大致思路是，引入前端模版页面index.template.html，使用express启动服务，引入webpack打包项目代码的dist文件，引入缓存模块（这里不做深入介绍，后期会单独详细介绍），判断端口是否被占用，自动启动其他接口服务。\n\n引入前端模版文件并且设置环境变量为production，片段代码如下：\n{% codeblock lang:javascript %}\nconst template = fs.readFileSync('./src/index.template.html', 'utf-8')\nconst isProd = process.env.NODE_ENV === 'production'\n{% endcodeblock %}\n\nvue-server-renderer插件的具体使用，通过读取dist文件夹下的目录文件，来创建createBundleRenderer函数，并且使用LRU来设置缓存的时间，通过判断是生产环境还是开发环境，调用不同的方法，代码片段如下：\n{% codeblock lang:javascript %}\nconst resolve = file => path.resolve(__dirname, file)\nfunction createRenderer (bundle, options) {\n  return createBundleRenderer(bundle, Object.assign(options, {\n    template,\n    cache: LRU({\n      max: 1000,\n      maxAge: 1000 * 60 * 15\n    }),\n    basedir: resolve('./dist'),\n    runInNewContext: false\n  }))\n}\nlet renderer;\nlet readyPromise\nif (isProd) {\n  const bundle = require('./dist/vue-ssr-server-bundle.json')\n  const clientManifest = require('./dist/vue-ssr-client-manifest.json')\n  renderer = createRenderer(bundle, {\n    clientManifest\n  })\n} else {\n  readyPromise = require('./build/setup-dev-server')(server, (bundle, options) => {\n    renderer = createRenderer(bundle, options)\n  })\n}\n{% endcodeblock %}\n\n使用express启动服务，代码片段如下：\n{% codeblock lang:javascript %}\nconst server = express()；\n\n//定义在启动服务钱先判断中间件中的缓存是否过期，是否直接调用dist文件。\nconst serve = (path, cache) => express.static(resolve(path), {\n  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0\n})\nserver.use('/dist', serve('./dist', true))\nserver.get('*', (req, res) => {\n  const context = {\n    title: 'hello',\n    url: req.url\n  }\n  renderer.renderToString(context, (err, html) => {\n    if (err) {\n      res.status(500).end('Internal Server Error')\n      return\n    }\n    res.end(html)\n  })\n})\n{% endcodeblock %}\n\n判断端口是否被占用，片段代码如下：\n{% codeblock lang:javascript %}\nfunction probe(port, callback) {\n\n    var servers = net.createServer().listen(port)\n\n    var calledOnce = false\n\n    var timeoutRef = setTimeout(function() {\n        calledOnce = true\n        callback(false, port)\n    }, 2000)\n\n    timeoutRef.unref()\n\n    var connected = false\n\n    servers.on('listening', function() {\n        clearTimeout(timeoutRef)\n\n        if (servers)\n            servers.close()\n\n        if (!calledOnce) {\n            calledOnce = true\n            callback(true, port)\n        }\n    })\n\n    servers.on('error', function(err) {\n        clearTimeout(timeoutRef)\n\n        var result = true\n        if (err.code === 'EADDRINUSE')\n            result = false\n\n        if (!calledOnce) {\n            calledOnce = true\n            callback(result, port)\n        }\n    })\n}\nvar checkPortPromise = new Promise((resolve) => {\n    (function serverport(_port) {\n        var pt = _port || 8080;\n        probe(pt, function(bl, _pt) {\n            // 端口被占用 bl 返回false\n            // _pt：传入的端口号\n            if (bl === true) {\n                // console.log(\"\\n  Static file server running at\" + \"\\n\\n=> http://localhost:\" + _pt + '\\n');\n                resolve(_pt);\n            } else {\n                serverport(_pt + 1)\n            }\n        })\n    })()\n\n})\ncheckPortPromise.then(data => {\n    uri = 'http://localhost:' + data;\n    console.log('启动服务路径'+uri)\n    server.listen(data);\n});\n{% endcodeblock %}\n\n到这里，基本的代码已经编写完成，webpack打包配置文件基本和官方保持不变，接下来可以尝试启动本地的项目服务，查看基本的demo展示。\n![demo](vue-ssr2/4.jpeg)\n\n>下节，我将介绍下mockjs，axios怎么封装成公共函数便于使用\n\t\n","source":"_posts/vue-ssr2.md","raw":"---\ntitle: 如何使用vue-ssr做服务端渲染初体验(二)\ncomments: true\ndate: 2017-06-02 20:09:11\ntags: \n    - 'javascript'\n    - 'vue'\n---\n\n### 1、前言\n\n上一节我们大致讲了为什么需要使用vue后端渲染，以及vue后端渲染的基本原理，这节内容我们将从零开始搭建属于自己的vue后端渲染脚手架，当然不能不参考官方页面响应的实例<font color=\"#0078d8\">vue-hackernews-2.0</font>，从零开始搭建项目,源码在将在下节与大家共享。\n\n### 2、前期准备\n\n基本环境要求：node版本6.10.1以上，npm版本3.10.10以上，本机环境是这样的，建议升级到官方最新版本。\n\n使用的技术栈：\n\n<!-- more -->\n\n1、vue 2.4.2\n2、vuex 2.3.1\n3、vue-router 2.7.0\n4、vue-server-renderer 2.4.2\n5、express 4.15.4\n6、axios 0.16.2\n7、q https://github.com/kriskowal/q.git\n8、webpack 3.5.0\n9、mockjs 1.0.1-beta3\n10、babel \n\n以上是主要是用的技术栈，在构建过程中会是用相应的插件依赖包来配合进行压缩打包，以下是npm init后package.json文件所要添加的依赖包。\n\n![文件依赖](vue-ssr2/1.jpeg)\t\n\n### 3、项目主目录搭建\n\n基本目录结构如下：\n\n![项目主目录结构](vue-ssr2/2.jpeg)\n\n> 文件目录基本介绍：\n\t\ncomponents 主要存放组件代码，里面可以根据业务场景再次细分模块组件等。\nlib 主要存放第三方库文件，方便用户直接引入使用\npublic 主要存放公共组件代码和项目使用的公共文件代码，例如后期我们将axios封装成公共的api库文件等等。\nrouter 主要存放前端路由配置文件，写法规范按照vue-router官方例子即可。\nstore 主要是存放共享状态文件，里面包含action.js,getter.js,mutationtype.js,state.js等，后期会根据模块再细分这些。\napp.js 是项目入口文件\nApp.vue 是项目入口文件\nentry-client和entry-server分别是客户端入口文件和服务端的入口文件\nindex.template.html是整个项目的模版文件\n\n#### 开始编写app.js项目入口代码\n\n使用vue开发项目入口文件一般都会如下写法：\n{% codeblock lang:javascript %}\nimport Vue from 'vue';\nimport App from './index.vue';\nimport router from './router'\nimport store from './store';\n\nnew Vue({\n\tel: '#app',\n\tstore,\n\trouter,\n\trender: (h) => h(App)\n});\n{% endcodeblock %} \n\n这种写法是程序共享一个vue实例，但是在后端渲染中很容易导致交叉请求状态污染，导致数据流被污染了。\n\n> 所以，避免状态单例,我们不应该直接创建一个应用程序实例，而是应该暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例，同样router和store入口文件也需要重新创建一个实例。\n\n为了配合webpack动态加载路由配置，这里会改写常规路由引入写法，这样可以根据路由路径来判断加载相应的组件代码：\n\n{% codeblock lang:javascript %}\nimport Home from '../components/Home.vue'\n// 改写成\ncomponent: () => ('../components/Home.vue')\n{% endcodeblock %} \n\n\n以下是路由的基本写法router，对外会抛出一个createRouter方法来创建一个新的路由实例：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport Router from 'vue-router';\nVue.use(Router)\nexport function createRouter() {\n    return new Router({\n        mode: 'history',\n        routes: [{\n            name:'home',\n            path: '/',\n            component: () =>\n                import ('../components/Home.vue')\n        }]\n    })\n}\n{% endcodeblock %} \n\n以下是store状态管理的基本写法，对外暴露了一个createStore方法，方便每次访问创建一个新的实例：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport actions from './actions'\nimport getters from './getters'\n// 按照组件的复杂度是否使用modules\nimport Home from './modules/Home'\nVue.use(Vuex)\nexport function createStore() {\n  return new Vuex.Store({\n    actions,\n    getters,\n    modules:{\n      Home\n    },\n  })\n}\n{% endcodeblock %} \n\n\n\n结合写好的router和store入口文件代码来编写整个项目的入口文件app.js代码内容，同样最终也会对外暴露一个createApp方法，在每次创建app的时候保证router，store，app都是新创建的实例，这里还引入了一个vue路由插件vuex-router-sync，主要作用是同步路由状态(route state)到 store，以下是app.js完整代码：\n\n{% codeblock lang:javascript %}\nimport Vue from 'vue'\nimport App from './App.vue'\nimport { createRouter } from './router'\nimport { createStore } from './store'\nimport { sync } from 'vuex-router-sync'\nexport function createApp () {\n  // 创建 router 和 store 实例\n  const router = createRouter()\n  const store = createStore()\n  // 同步路由状态(route state)到 store\n  sync(store, router)\n  // 创建应用程序实例，将 router 和 store 注入\n  const app = new Vue({\n    router,\n    store,\n    render: h => h(App)\n  })\n  // 暴露 app, router 和 store。\n  return { app, router, store }\n}\n{% endcodeblock %} \n\n#### entry-client.js代码编写：\n\n首页引入从app文件中暴露出来的createApp方法，在每次调用客户端的时候，重新创建一个新的app，router，store，部分代码如下：\n\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nconst { app, router, store } = createApp()\n{% endcodeblock %}\n\n这里我们会使用到onReady方法，此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候，例子代码如下：\n\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nconst { app, router, store } = createApp()\nrouter.onReady(() => {\n  app.$mount('#app')\n})\n{% endcodeblock %}\n\n\n我们会调用一个新方法beforeResolve，只有在router2.5.0以上的版本才会有的方法，注册一个类似于全局路由保护router.beforeEach()，除了在导航确认之后，在所有其他保护和异步组件已解决之后调用。基本写法如下：\n\n{% codeblock lang:javascript %}\nrouter.beforeResolve((to, from, next) => {\n\t// to 和 from 都是 路由信息对象\n\t// 返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。\n\tconst matched = router.getMatchedComponents(to)\n    const prevMatched = router.getMatchedComponents(from)\n})\n{% endcodeblock %}\n\n服务端把要给客户端的 state 放在了 window.__INITIAL_STATE__ 这个全局变量上面。前后端的 HTML 结构应该是一致的。然后要把 store 的状态树写入一个全局变量（__INITIAL_STATE__），这样客户端初始化 render 的时候能够校验服务器生成的 HTML 结构，并且同步到初始化状态，然后整个页面被客户端接管。基本代码如下：\n{% codeblock lang:javascript %}\n// 将服务端渲染时候的状态写入vuex中\nif (window.__INITIAL_STATE__) {\n  store.replaceState(window.__INITIAL_STATE__)\n}\n{% endcodeblock %}\n\n接下来贴出来完整的客户端代码，这里的Q也可以不用引入，直接使用babel就能编译es6自带的Promise，因为本人使用习惯了，这里可以根据自身的需求是否安装：\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nimport Q from 'q';\nconst { app, router, store } = createApp()\nrouter.onReady(() => {\n  router.beforeResolve((to, from, next) => {\n      const matched = router.getMatchedComponents(to)\n      const prevMatched = router.getMatchedComponents(from)\n      // 我们只关心之前没有渲染的组件\n      // 所以我们对比它们，找出两个匹配列表的差异组件\n      let diffed = false\n      const activated = matched.filter((c, i) => {\n        return diffed || (diffed = (prevMatched[i] !== c))\n      })\n      if (!activated.length) {\n        return next()\n      }\n      // 这里如果有加载指示器(loading indicator)，就触发\n      Q.all(activated.map(c => {\n        if (c.asyncData) {\n          return c.asyncData({ store, route: to })\n        }\n      })).then(() => {\n        // 停止加载指示器(loading indicator)\n        next()\n      }).catch(next)\n    })\n    app.$mount('#app')\n})\n// 将服务端渲染时候的状态写入vuex中\nif (window.__INITIAL_STATE__) {\n  store.replaceState(window.__INITIAL_STATE__)\n}\n{% endcodeblock %}\n\n#### entry-server.js代码编写：\n\n基本编写和客户端的差不多，因为这是服务端渲染，涉及到与后端数据交互定义的问题，我们需要在这里定义好各组件与后端交互使用的方法名称，这样方便在组件内部直接使用，这里根我们常规在组件直接使用ajax获取数据有些不一样，代码片段如下：\n{% codeblock lang:javascript %}\n//直接定义组件内部asyncData方法来触发相应的ajax获取数据\nif (Component.asyncData) {\n  return Component.asyncData({\n    store,\n    route: router.currentRoute\n  })\n}\n{% endcodeblock %}\n\n以下是完整的服务端代码：\n{% codeblock lang:javascript %}\nimport { createApp } from './app'\nimport Q from 'q'\nexport default context => {\n  return new Q.Promise((resolve, reject) => {\n    const { app, router, store } = createApp()\n    router.push(context.url)\n    router.onReady(() => {\n      const matchedComponents = router.getMatchedComponents()\n      if (!matchedComponents.length) {\n        return reject({ code: 404 })\n      }\n      // 对所有匹配的路由组件调用 `asyncData()`\n      Q.all(matchedComponents.map(Component => {\n        if (Component.asyncData) {\n          return Component.asyncData({\n            store,\n            route: router.currentRoute\n          })\n        }\n      })).then(() => {\n        // 在所有预取钩子(preFetch hook) resolve 后，\n        // 我们的 store 现在已经填充入渲染应用程序所需的状态。\n        // 当我们将状态附加到上下文，\n        // 并且 `template` 选项用于 renderer 时，\n        // 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。\n        context.state = store.state\n        resolve(app)\n      }).catch(reject)\n    }, reject)\n  })\n}\n{% endcodeblock %}\n\n### 4、脚手架其他目录介绍：\n\n到这里src下面主要的几个文件代码已经编写完成，接下里介绍下整个项目的目录结构如下：\n\n![整个目录结构](vue-ssr2/3.jpeg)\n\n主要几个文件介绍如下：\nbuild 主要存放webpack打包配置文件\ndist webpack打包后生成的目录\nlog 使用pm2监控进程存放的日志文件目录\nserver.js node服务器启动文件\npmlog.json pm2配置文件\n\n#### server.js入口文件编写\n\n我们还需要编写在服务端启动服务的代码server.js，我们会使用到部分node原生提供的api，片段代码如下：\n{% codeblock lang:javascript %}\nconst Vue = require('vue')\nconst express = require('express')\nconst path = require('path')\nconst LRU = require('lru-cache')\nconst { createBundleRenderer } = require('vue-server-renderer')\nconst fs = require('fs')\nconst net = require('net')\n{% endcodeblock %}\n\n大致思路是，引入前端模版页面index.template.html，使用express启动服务，引入webpack打包项目代码的dist文件，引入缓存模块（这里不做深入介绍，后期会单独详细介绍），判断端口是否被占用，自动启动其他接口服务。\n\n引入前端模版文件并且设置环境变量为production，片段代码如下：\n{% codeblock lang:javascript %}\nconst template = fs.readFileSync('./src/index.template.html', 'utf-8')\nconst isProd = process.env.NODE_ENV === 'production'\n{% endcodeblock %}\n\nvue-server-renderer插件的具体使用，通过读取dist文件夹下的目录文件，来创建createBundleRenderer函数，并且使用LRU来设置缓存的时间，通过判断是生产环境还是开发环境，调用不同的方法，代码片段如下：\n{% codeblock lang:javascript %}\nconst resolve = file => path.resolve(__dirname, file)\nfunction createRenderer (bundle, options) {\n  return createBundleRenderer(bundle, Object.assign(options, {\n    template,\n    cache: LRU({\n      max: 1000,\n      maxAge: 1000 * 60 * 15\n    }),\n    basedir: resolve('./dist'),\n    runInNewContext: false\n  }))\n}\nlet renderer;\nlet readyPromise\nif (isProd) {\n  const bundle = require('./dist/vue-ssr-server-bundle.json')\n  const clientManifest = require('./dist/vue-ssr-client-manifest.json')\n  renderer = createRenderer(bundle, {\n    clientManifest\n  })\n} else {\n  readyPromise = require('./build/setup-dev-server')(server, (bundle, options) => {\n    renderer = createRenderer(bundle, options)\n  })\n}\n{% endcodeblock %}\n\n使用express启动服务，代码片段如下：\n{% codeblock lang:javascript %}\nconst server = express()；\n\n//定义在启动服务钱先判断中间件中的缓存是否过期，是否直接调用dist文件。\nconst serve = (path, cache) => express.static(resolve(path), {\n  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0\n})\nserver.use('/dist', serve('./dist', true))\nserver.get('*', (req, res) => {\n  const context = {\n    title: 'hello',\n    url: req.url\n  }\n  renderer.renderToString(context, (err, html) => {\n    if (err) {\n      res.status(500).end('Internal Server Error')\n      return\n    }\n    res.end(html)\n  })\n})\n{% endcodeblock %}\n\n判断端口是否被占用，片段代码如下：\n{% codeblock lang:javascript %}\nfunction probe(port, callback) {\n\n    var servers = net.createServer().listen(port)\n\n    var calledOnce = false\n\n    var timeoutRef = setTimeout(function() {\n        calledOnce = true\n        callback(false, port)\n    }, 2000)\n\n    timeoutRef.unref()\n\n    var connected = false\n\n    servers.on('listening', function() {\n        clearTimeout(timeoutRef)\n\n        if (servers)\n            servers.close()\n\n        if (!calledOnce) {\n            calledOnce = true\n            callback(true, port)\n        }\n    })\n\n    servers.on('error', function(err) {\n        clearTimeout(timeoutRef)\n\n        var result = true\n        if (err.code === 'EADDRINUSE')\n            result = false\n\n        if (!calledOnce) {\n            calledOnce = true\n            callback(result, port)\n        }\n    })\n}\nvar checkPortPromise = new Promise((resolve) => {\n    (function serverport(_port) {\n        var pt = _port || 8080;\n        probe(pt, function(bl, _pt) {\n            // 端口被占用 bl 返回false\n            // _pt：传入的端口号\n            if (bl === true) {\n                // console.log(\"\\n  Static file server running at\" + \"\\n\\n=> http://localhost:\" + _pt + '\\n');\n                resolve(_pt);\n            } else {\n                serverport(_pt + 1)\n            }\n        })\n    })()\n\n})\ncheckPortPromise.then(data => {\n    uri = 'http://localhost:' + data;\n    console.log('启动服务路径'+uri)\n    server.listen(data);\n});\n{% endcodeblock %}\n\n到这里，基本的代码已经编写完成，webpack打包配置文件基本和官方保持不变，接下来可以尝试启动本地的项目服务，查看基本的demo展示。\n![demo](vue-ssr2/4.jpeg)\n\n>下节，我将介绍下mockjs，axios怎么封装成公共函数便于使用\n\t\n","slug":"vue-ssr2","published":1,"updated":"2017-08-20T04:49:00.000Z","_id":"cj6jzrreq0000bjld4ranx2ql","layout":"post","photos":[],"link":"","content":"<h3 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h3><p>上一节我们大致讲了为什么需要使用vue后端渲染，以及vue后端渲染的基本原理，这节内容我们将从零开始搭建属于自己的vue后端渲染脚手架，当然不能不参考官方页面响应的实例<font color=\"#0078d8\">vue-hackernews-2.0</font>，从零开始搭建项目,源码在将在下节与大家共享。</p>\n<h3 id=\"2、前期准备\"><a href=\"#2、前期准备\" class=\"headerlink\" title=\"2、前期准备\"></a>2、前期准备</h3><p>基本环境要求：node版本6.10.1以上，npm版本3.10.10以上，本机环境是这样的，建议升级到官方最新版本。</p>\n<p>使用的技术栈：</p>\n<a id=\"more\"></a>\n<p>1、vue 2.4.2<br>2、vuex 2.3.1<br>3、vue-router 2.7.0<br>4、vue-server-renderer 2.4.2<br>5、express 4.15.4<br>6、axios 0.16.2<br>7、q <a href=\"https://github.com/kriskowal/q.git\" target=\"_blank\" rel=\"external\">https://github.com/kriskowal/q.git</a><br>8、webpack 3.5.0<br>9、mockjs 1.0.1-beta3<br>10、babel </p>\n<p>以上是主要是用的技术栈，在构建过程中会是用相应的插件依赖包来配合进行压缩打包，以下是npm init后package.json文件所要添加的依赖包。</p>\n<p><img src=\"/vue-ssr2/1.jpeg\" alt=\"文件依赖\">    </p>\n<h3 id=\"3、项目主目录搭建\"><a href=\"#3、项目主目录搭建\" class=\"headerlink\" title=\"3、项目主目录搭建\"></a>3、项目主目录搭建</h3><p>基本目录结构如下：</p>\n<p><img src=\"/vue-ssr2/2.jpeg\" alt=\"项目主目录结构\"></p>\n<blockquote>\n<p>文件目录基本介绍：</p>\n</blockquote>\n<p>components 主要存放组件代码，里面可以根据业务场景再次细分模块组件等。<br>lib 主要存放第三方库文件，方便用户直接引入使用<br>public 主要存放公共组件代码和项目使用的公共文件代码，例如后期我们将axios封装成公共的api库文件等等。<br>router 主要存放前端路由配置文件，写法规范按照vue-router官方例子即可。<br>store 主要是存放共享状态文件，里面包含action.js,getter.js,mutationtype.js,state.js等，后期会根据模块再细分这些。<br>app.js 是项目入口文件<br>App.vue 是项目入口文件<br>entry-client和entry-server分别是客户端入口文件和服务端的入口文件<br>index.template.html是整个项目的模版文件</p>\n<h4 id=\"开始编写app-js项目入口代码\"><a href=\"#开始编写app-js项目入口代码\" class=\"headerlink\" title=\"开始编写app.js项目入口代码\"></a>开始编写app.js项目入口代码</h4><p>使用vue开发项目入口文件一般都会如下写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./index.vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\tel: <span class=\"string\">'#app'</span>,</div><div class=\"line\">\tstore,</div><div class=\"line\">\trouter,</div><div class=\"line\">\trender: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure> </p>\n<p>这种写法是程序共享一个vue实例，但是在后端渲染中很容易导致交叉请求状态污染，导致数据流被污染了。</p>\n<blockquote>\n<p>所以，避免状态单例,我们不应该直接创建一个应用程序实例，而是应该暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例，同样router和store入口文件也需要重新创建一个实例。</p>\n</blockquote>\n<p>为了配合webpack动态加载路由配置，这里会改写常规路由引入写法，这样可以根据路由路径来判断加载相应的组件代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../components/Home.vue'</span></div><div class=\"line\"><span class=\"comment\">// 改写成</span></div><div class=\"line\">component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (<span class=\"string\">'../components/Home.vue'</span>)</div></pre></td></tr></table></figure> \n<p>以下是路由的基本写法router，对外会抛出一个createRouter方法来创建一个新的路由实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRouter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">        mode: <span class=\"string\">'history'</span>,</div><div class=\"line\">        routes: [&#123;</div><div class=\"line\">            name:<span class=\"string\">'home'</span>,</div><div class=\"line\">            path: <span class=\"string\">'/'</span>,</div><div class=\"line\">            component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">                <span class=\"keyword\">import</span> (<span class=\"string\">'../components/Home.vue'</span>)</div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>以下是store状态管理的基本写法，对外暴露了一个createStore方法，方便每次访问创建一个新的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> getters <span class=\"keyword\">from</span> <span class=\"string\">'./getters'</span></div><div class=\"line\"><span class=\"comment\">// 按照组件的复杂度是否使用modules</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Home'</span></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    actions,</div><div class=\"line\">    getters,</div><div class=\"line\">    modules:&#123;</div><div class=\"line\">      Home</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>结合写好的router和store入口文件代码来编写整个项目的入口文件app.js代码内容，同样最终也会对外暴露一个createApp方法，在每次创建app的时候保证router，store，app都是新创建的实例，这里还引入了一个vue路由插件vuex-router-sync，主要作用是同步路由状态(route state)到 store，以下是app.js完整代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; sync &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex-router-sync'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createApp</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 创建 router 和 store 实例</span></div><div class=\"line\">  <span class=\"keyword\">const</span> router = createRouter()</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore()</div><div class=\"line\">  <span class=\"comment\">// 同步路由状态(route state)到 store</span></div><div class=\"line\">  sync(store, router)</div><div class=\"line\">  <span class=\"comment\">// 创建应用程序实例，将 router 和 store 注入</span></div><div class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    router,</div><div class=\"line\">    store,</div><div class=\"line\">    render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// 暴露 app, router 和 store。</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; app, router, store &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<h4 id=\"entry-client-js代码编写：\"><a href=\"#entry-client-js代码编写：\" class=\"headerlink\" title=\"entry-client.js代码编写：\"></a>entry-client.js代码编写：</h4><p>首页引入从app文件中暴露出来的createApp方法，在每次调用客户端的时候，重新创建一个新的app，router，store，部分代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div></pre></td></tr></table></figure>\n<p>这里我们会使用到onReady方法，此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候，例子代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  app.$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>我们会调用一个新方法beforeResolve，只有在router2.5.0以上的版本才会有的方法，注册一个类似于全局路由保护router.beforeEach()，除了在导航确认之后，在所有其他保护和异步组件已解决之后调用。基本写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.beforeResolve(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// to 和 from 都是 路由信息对象</span></div><div class=\"line\">\t<span class=\"comment\">// 返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> matched = router.getMatchedComponents(to)</div><div class=\"line\">    <span class=\"keyword\">const</span> prevMatched = router.getMatchedComponents(<span class=\"keyword\">from</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>服务端把要给客户端的 state 放在了 window.<strong>INITIAL_STATE</strong> 这个全局变量上面。前后端的 HTML 结构应该是一致的。然后要把 store 的状态树写入一个全局变量（<strong>INITIAL_STATE</strong>），这样客户端初始化 render 的时候能够校验服务器生成的 HTML 结构，并且同步到初始化状态，然后整个页面被客户端接管。基本代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将服务端渲染时候的状态写入vuex中</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.__INITIAL_STATE__) &#123;</div><div class=\"line\">  store.replaceState(<span class=\"built_in\">window</span>.__INITIAL_STATE__)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来贴出来完整的客户端代码，这里的Q也可以不用引入，直接使用babel就能编译es6自带的Promise，因为本人使用习惯了，这里可以根据自身的需求是否安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Q <span class=\"keyword\">from</span> <span class=\"string\">'q'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  router.beforeResolve(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> matched = router.getMatchedComponents(to)</div><div class=\"line\">      <span class=\"keyword\">const</span> prevMatched = router.getMatchedComponents(<span class=\"keyword\">from</span>)</div><div class=\"line\">      <span class=\"comment\">// 我们只关心之前没有渲染的组件</span></div><div class=\"line\">      <span class=\"comment\">// 所以我们对比它们，找出两个匹配列表的差异组件</span></div><div class=\"line\">      <span class=\"keyword\">let</span> diffed = <span class=\"literal\">false</span></div><div class=\"line\">      <span class=\"keyword\">const</span> activated = matched.filter(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> diffed || (diffed = (prevMatched[i] !== c))</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">if</span> (!activated.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> next()</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 这里如果有加载指示器(loading indicator)，就触发</span></div><div class=\"line\">      Q.all(activated.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (c.asyncData) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> c.asyncData(&#123; store, <span class=\"attr\">route</span>: to &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 停止加载指示器(loading indicator)</span></div><div class=\"line\">        next()</div><div class=\"line\">      &#125;).catch(next)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    app.$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 将服务端渲染时候的状态写入vuex中</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.__INITIAL_STATE__) &#123;</div><div class=\"line\">  store.replaceState(<span class=\"built_in\">window</span>.__INITIAL_STATE__)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"entry-server-js代码编写：\"><a href=\"#entry-server-js代码编写：\" class=\"headerlink\" title=\"entry-server.js代码编写：\"></a>entry-server.js代码编写：</h4><p>基本编写和客户端的差不多，因为这是服务端渲染，涉及到与后端数据交互定义的问题，我们需要在这里定义好各组件与后端交互使用的方法名称，这样方便在组件内部直接使用，这里根我们常规在组件直接使用ajax获取数据有些不一样，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//直接定义组件内部asyncData方法来触发相应的ajax获取数据</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Component.asyncData) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> Component.asyncData(&#123;</div><div class=\"line\">    store,</div><div class=\"line\">    route: router.currentRoute</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以下是完整的服务端代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Q <span class=\"keyword\">from</span> <span class=\"string\">'q'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> context =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Q.Promise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">    router.push(context.url)</div><div class=\"line\">    router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> matchedComponents = router.getMatchedComponents()</div><div class=\"line\">      <span class=\"keyword\">if</span> (!matchedComponents.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> reject(&#123; <span class=\"attr\">code</span>: <span class=\"number\">404</span> &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 对所有匹配的路由组件调用 `asyncData()`</span></div><div class=\"line\">      Q.all(matchedComponents.map(<span class=\"function\"><span class=\"params\">Component</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Component.asyncData) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> Component.asyncData(&#123;</div><div class=\"line\">            store,</div><div class=\"line\">            route: router.currentRoute</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 在所有预取钩子(preFetch hook) resolve 后，</span></div><div class=\"line\">        <span class=\"comment\">// 我们的 store 现在已经填充入渲染应用程序所需的状态。</span></div><div class=\"line\">        <span class=\"comment\">// 当我们将状态附加到上下文，</span></div><div class=\"line\">        <span class=\"comment\">// 并且 `template` 选项用于 renderer 时，</span></div><div class=\"line\">        <span class=\"comment\">// 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。</span></div><div class=\"line\">        context.state = store.state</div><div class=\"line\">        resolve(app)</div><div class=\"line\">      &#125;).catch(reject)</div><div class=\"line\">    &#125;, reject)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4、脚手架其他目录介绍：\"><a href=\"#4、脚手架其他目录介绍：\" class=\"headerlink\" title=\"4、脚手架其他目录介绍：\"></a>4、脚手架其他目录介绍：</h3><p>到这里src下面主要的几个文件代码已经编写完成，接下里介绍下整个项目的目录结构如下：</p>\n<p><img src=\"/vue-ssr2/3.jpeg\" alt=\"整个目录结构\"></p>\n<p>主要几个文件介绍如下：<br>build 主要存放webpack打包配置文件<br>dist webpack打包后生成的目录<br>log 使用pm2监控进程存放的日志文件目录<br>server.js node服务器启动文件<br>pmlog.json pm2配置文件</p>\n<h4 id=\"server-js入口文件编写\"><a href=\"#server-js入口文件编写\" class=\"headerlink\" title=\"server.js入口文件编写\"></a>server.js入口文件编写</h4><p>我们还需要编写在服务端启动服务的代码server.js，我们会使用到部分node原生提供的api，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> LRU = <span class=\"built_in\">require</span>(<span class=\"string\">'lru-cache'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createBundleRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>)</div></pre></td></tr></table></figure></p>\n<p>大致思路是，引入前端模版页面index.template.html，使用express启动服务，引入webpack打包项目代码的dist文件，引入缓存模块（这里不做深入介绍，后期会单独详细介绍），判断端口是否被占用，自动启动其他接口服务。</p>\n<p>引入前端模版文件并且设置环境变量为production，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(<span class=\"string\">'./src/index.template.html'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> isProd = process.env.NODE_ENV === <span class=\"string\">'production'</span></div></pre></td></tr></table></figure></p>\n<p>vue-server-renderer插件的具体使用，通过读取dist文件夹下的目录文件，来创建createBundleRenderer函数，并且使用LRU来设置缓存的时间，通过判断是生产环境还是开发环境，调用不同的方法，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">file</span> =&gt;</span> path.resolve(__dirname, file)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRenderer</span> (<span class=\"params\">bundle, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createBundleRenderer(bundle, <span class=\"built_in\">Object</span>.assign(options, &#123;</div><div class=\"line\">    template,</div><div class=\"line\">    cache: LRU(&#123;</div><div class=\"line\">      max: <span class=\"number\">1000</span>,</div><div class=\"line\">      maxAge: <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">15</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    basedir: resolve(<span class=\"string\">'./dist'</span>),</div><div class=\"line\">    runInNewContext: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;))</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> renderer;</div><div class=\"line\"><span class=\"keyword\">let</span> readyPromise</div><div class=\"line\"><span class=\"keyword\">if</span> (isProd) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> bundle = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/vue-ssr-server-bundle.json'</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> clientManifest = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/vue-ssr-client-manifest.json'</span>)</div><div class=\"line\">  renderer = createRenderer(bundle, &#123;</div><div class=\"line\">    clientManifest</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  readyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">'./build/setup-dev-server'</span>)(server, (bundle, options) =&gt; &#123;</div><div class=\"line\">    renderer = createRenderer(bundle, options)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用express启动服务，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> server = express()；</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义在启动服务钱先判断中间件中的缓存是否过期，是否直接调用dist文件。</span></div><div class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"function\">(<span class=\"params\">path, cache</span>) =&gt;</span> express.static(resolve(path), &#123;</div><div class=\"line\">  maxAge: cache &amp;&amp; isProd ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">30</span> : <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\">server.use(<span class=\"string\">'/dist'</span>, serve(<span class=\"string\">'./dist'</span>, <span class=\"literal\">true</span>))</div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> context = &#123;</div><div class=\"line\">    title: <span class=\"string\">'hello'</span>,</div><div class=\"line\">    url: req.url</div><div class=\"line\">  &#125;</div><div class=\"line\">  renderer.renderToString(context, (err, html) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      res.status(<span class=\"number\">500</span>).end(<span class=\"string\">'Internal Server Error'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    res.end(html)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>判断端口是否被占用，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">probe</span>(<span class=\"params\">port, callback</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> servers = net.createServer().listen(port)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> calledOnce = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> timeoutRef = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">        callback(<span class=\"literal\">false</span>, port)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\"></div><div class=\"line\">    timeoutRef.unref()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> connected = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    servers.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        clearTimeout(timeoutRef)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (servers)</div><div class=\"line\">            servers.close()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!calledOnce) &#123;</div><div class=\"line\">            calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">            callback(<span class=\"literal\">true</span>, port)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    servers.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        clearTimeout(timeoutRef)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"literal\">true</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'EADDRINUSE'</span>)</div><div class=\"line\">            result = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!calledOnce) &#123;</div><div class=\"line\">            calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">            callback(result, port)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> checkPortPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serverport</span>(<span class=\"params\">_port</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> pt = _port || <span class=\"number\">8080</span>;</div><div class=\"line\">        probe(pt, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bl, _pt</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 端口被占用 bl 返回false</span></div><div class=\"line\">            <span class=\"comment\">// _pt：传入的端口号</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (bl === <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// console.log(\"\\n  Static file server running at\" + \"\\n\\n=&gt; http://localhost:\" + _pt + '\\n');</span></div><div class=\"line\">                resolve(_pt);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                serverport(_pt + <span class=\"number\">1</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)()</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">checkPortPromise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    uri = <span class=\"string\">'http://localhost:'</span> + data;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动服务路径'</span>+uri)</div><div class=\"line\">    server.listen(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>到这里，基本的代码已经编写完成，webpack打包配置文件基本和官方保持不变，接下来可以尝试启动本地的项目服务，查看基本的demo展示。<br><img src=\"/vue-ssr2/4.jpeg\" alt=\"demo\"></p>\n<blockquote>\n<p>下节，我将介绍下mockjs，axios怎么封装成公共函数便于使用</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、前言\"><a href=\"#1、前言\" class=\"headerlink\" title=\"1、前言\"></a>1、前言</h3><p>上一节我们大致讲了为什么需要使用vue后端渲染，以及vue后端渲染的基本原理，这节内容我们将从零开始搭建属于自己的vue后端渲染脚手架，当然不能不参考官方页面响应的实例<font color=\"#0078d8\">vue-hackernews-2.0</font>，从零开始搭建项目,源码在将在下节与大家共享。</p>\n<h3 id=\"2、前期准备\"><a href=\"#2、前期准备\" class=\"headerlink\" title=\"2、前期准备\"></a>2、前期准备</h3><p>基本环境要求：node版本6.10.1以上，npm版本3.10.10以上，本机环境是这样的，建议升级到官方最新版本。</p>\n<p>使用的技术栈：</p>","more":"<p>1、vue 2.4.2<br>2、vuex 2.3.1<br>3、vue-router 2.7.0<br>4、vue-server-renderer 2.4.2<br>5、express 4.15.4<br>6、axios 0.16.2<br>7、q <a href=\"https://github.com/kriskowal/q.git\" target=\"_blank\" rel=\"external\">https://github.com/kriskowal/q.git</a><br>8、webpack 3.5.0<br>9、mockjs 1.0.1-beta3<br>10、babel </p>\n<p>以上是主要是用的技术栈，在构建过程中会是用相应的插件依赖包来配合进行压缩打包，以下是npm init后package.json文件所要添加的依赖包。</p>\n<p><img src=\"/vue-ssr2/1.jpeg\" alt=\"文件依赖\">    </p>\n<h3 id=\"3、项目主目录搭建\"><a href=\"#3、项目主目录搭建\" class=\"headerlink\" title=\"3、项目主目录搭建\"></a>3、项目主目录搭建</h3><p>基本目录结构如下：</p>\n<p><img src=\"/vue-ssr2/2.jpeg\" alt=\"项目主目录结构\"></p>\n<blockquote>\n<p>文件目录基本介绍：</p>\n</blockquote>\n<p>components 主要存放组件代码，里面可以根据业务场景再次细分模块组件等。<br>lib 主要存放第三方库文件，方便用户直接引入使用<br>public 主要存放公共组件代码和项目使用的公共文件代码，例如后期我们将axios封装成公共的api库文件等等。<br>router 主要存放前端路由配置文件，写法规范按照vue-router官方例子即可。<br>store 主要是存放共享状态文件，里面包含action.js,getter.js,mutationtype.js,state.js等，后期会根据模块再细分这些。<br>app.js 是项目入口文件<br>App.vue 是项目入口文件<br>entry-client和entry-server分别是客户端入口文件和服务端的入口文件<br>index.template.html是整个项目的模版文件</p>\n<h4 id=\"开始编写app-js项目入口代码\"><a href=\"#开始编写app-js项目入口代码\" class=\"headerlink\" title=\"开始编写app.js项目入口代码\"></a>开始编写app.js项目入口代码</h4><p>使用vue开发项目入口文件一般都会如下写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./index.vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\tel: <span class=\"string\">'#app'</span>,</div><div class=\"line\">\tstore,</div><div class=\"line\">\trouter,</div><div class=\"line\">\trender: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> h(App)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure> </p>\n<p>这种写法是程序共享一个vue实例，但是在后端渲染中很容易导致交叉请求状态污染，导致数据流被污染了。</p>\n<blockquote>\n<p>所以，避免状态单例,我们不应该直接创建一个应用程序实例，而是应该暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例，同样router和store入口文件也需要重新创建一个实例。</p>\n</blockquote>\n<p>为了配合webpack动态加载路由配置，这里会改写常规路由引入写法，这样可以根据路由路径来判断加载相应的组件代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'../components/Home.vue'</span></div><div class=\"line\"><span class=\"comment\">// 改写成</span></div><div class=\"line\">component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (<span class=\"string\">'../components/Home.vue'</span>)</div></pre></td></tr></table></figure> \n<p>以下是路由的基本写法router，对外会抛出一个createRouter方法来创建一个新的路由实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</div><div class=\"line\">Vue.use(Router)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRouter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Router(&#123;</div><div class=\"line\">        mode: <span class=\"string\">'history'</span>,</div><div class=\"line\">        routes: [&#123;</div><div class=\"line\">            name:<span class=\"string\">'home'</span>,</div><div class=\"line\">            path: <span class=\"string\">'/'</span>,</div><div class=\"line\">            component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">                <span class=\"keyword\">import</span> (<span class=\"string\">'../components/Home.vue'</span>)</div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>以下是store状态管理的基本写法，对外暴露了一个createStore方法，方便每次访问创建一个新的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"><span class=\"keyword\">import</span> actions <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"keyword\">import</span> getters <span class=\"keyword\">from</span> <span class=\"string\">'./getters'</span></div><div class=\"line\"><span class=\"comment\">// 按照组件的复杂度是否使用modules</span></div><div class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">'./modules/Home'</span></div><div class=\"line\">Vue.use(Vuex)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStore</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</div><div class=\"line\">    actions,</div><div class=\"line\">    getters,</div><div class=\"line\">    modules:&#123;</div><div class=\"line\">      Home</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<p>结合写好的router和store入口文件代码来编写整个项目的入口文件app.js代码内容，同样最终也会对外暴露一个createApp方法，在每次创建app的时候保证router，store，app都是新创建的实例，这里还引入了一个vue路由插件vuex-router-sync，主要作用是同步路由状态(route state)到 store，以下是app.js完整代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; sync &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex-router-sync'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createApp</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 创建 router 和 store 实例</span></div><div class=\"line\">  <span class=\"keyword\">const</span> router = createRouter()</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore()</div><div class=\"line\">  <span class=\"comment\">// 同步路由状态(route state)到 store</span></div><div class=\"line\">  sync(store, router)</div><div class=\"line\">  <span class=\"comment\">// 创建应用程序实例，将 router 和 store 注入</span></div><div class=\"line\">  <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    router,</div><div class=\"line\">    store,</div><div class=\"line\">    render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"comment\">// 暴露 app, router 和 store。</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; app, router, store &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<h4 id=\"entry-client-js代码编写：\"><a href=\"#entry-client-js代码编写：\" class=\"headerlink\" title=\"entry-client.js代码编写：\"></a>entry-client.js代码编写：</h4><p>首页引入从app文件中暴露出来的createApp方法，在每次调用客户端的时候，重新创建一个新的app，router，store，部分代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div></pre></td></tr></table></figure>\n<p>这里我们会使用到onReady方法，此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候，例子代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  app.$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>我们会调用一个新方法beforeResolve，只有在router2.5.0以上的版本才会有的方法，注册一个类似于全局路由保护router.beforeEach()，除了在导航确认之后，在所有其他保护和异步组件已解决之后调用。基本写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.beforeResolve(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// to 和 from 都是 路由信息对象</span></div><div class=\"line\">\t<span class=\"comment\">// 返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</span></div><div class=\"line\">\t<span class=\"keyword\">const</span> matched = router.getMatchedComponents(to)</div><div class=\"line\">    <span class=\"keyword\">const</span> prevMatched = router.getMatchedComponents(<span class=\"keyword\">from</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>服务端把要给客户端的 state 放在了 window.<strong>INITIAL_STATE</strong> 这个全局变量上面。前后端的 HTML 结构应该是一致的。然后要把 store 的状态树写入一个全局变量（<strong>INITIAL_STATE</strong>），这样客户端初始化 render 的时候能够校验服务器生成的 HTML 结构，并且同步到初始化状态，然后整个页面被客户端接管。基本代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将服务端渲染时候的状态写入vuex中</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.__INITIAL_STATE__) &#123;</div><div class=\"line\">  store.replaceState(<span class=\"built_in\">window</span>.__INITIAL_STATE__)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来贴出来完整的客户端代码，这里的Q也可以不用引入，直接使用babel就能编译es6自带的Promise，因为本人使用习惯了，这里可以根据自身的需求是否安装：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Q <span class=\"keyword\">from</span> <span class=\"string\">'q'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  router.beforeResolve(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> matched = router.getMatchedComponents(to)</div><div class=\"line\">      <span class=\"keyword\">const</span> prevMatched = router.getMatchedComponents(<span class=\"keyword\">from</span>)</div><div class=\"line\">      <span class=\"comment\">// 我们只关心之前没有渲染的组件</span></div><div class=\"line\">      <span class=\"comment\">// 所以我们对比它们，找出两个匹配列表的差异组件</span></div><div class=\"line\">      <span class=\"keyword\">let</span> diffed = <span class=\"literal\">false</span></div><div class=\"line\">      <span class=\"keyword\">const</span> activated = matched.filter(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> diffed || (diffed = (prevMatched[i] !== c))</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">if</span> (!activated.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> next()</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 这里如果有加载指示器(loading indicator)，就触发</span></div><div class=\"line\">      Q.all(activated.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (c.asyncData) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> c.asyncData(&#123; store, <span class=\"attr\">route</span>: to &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 停止加载指示器(loading indicator)</span></div><div class=\"line\">        next()</div><div class=\"line\">      &#125;).catch(next)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    app.$mount(<span class=\"string\">'#app'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 将服务端渲染时候的状态写入vuex中</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.__INITIAL_STATE__) &#123;</div><div class=\"line\">  store.replaceState(<span class=\"built_in\">window</span>.__INITIAL_STATE__)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"entry-server-js代码编写：\"><a href=\"#entry-server-js代码编写：\" class=\"headerlink\" title=\"entry-server.js代码编写：\"></a>entry-server.js代码编写：</h4><p>基本编写和客户端的差不多，因为这是服务端渲染，涉及到与后端数据交互定义的问题，我们需要在这里定义好各组件与后端交互使用的方法名称，这样方便在组件内部直接使用，这里根我们常规在组件直接使用ajax获取数据有些不一样，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//直接定义组件内部asyncData方法来触发相应的ajax获取数据</span></div><div class=\"line\"><span class=\"keyword\">if</span> (Component.asyncData) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> Component.asyncData(&#123;</div><div class=\"line\">    store,</div><div class=\"line\">    route: router.currentRoute</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以下是完整的服务端代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Q <span class=\"keyword\">from</span> <span class=\"string\">'q'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> context =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Q.Promise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; app, router, store &#125; = createApp()</div><div class=\"line\">    router.push(context.url)</div><div class=\"line\">    router.onReady(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> matchedComponents = router.getMatchedComponents()</div><div class=\"line\">      <span class=\"keyword\">if</span> (!matchedComponents.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> reject(&#123; <span class=\"attr\">code</span>: <span class=\"number\">404</span> &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 对所有匹配的路由组件调用 `asyncData()`</span></div><div class=\"line\">      Q.all(matchedComponents.map(<span class=\"function\"><span class=\"params\">Component</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Component.asyncData) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> Component.asyncData(&#123;</div><div class=\"line\">            store,</div><div class=\"line\">            route: router.currentRoute</div><div class=\"line\">          &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 在所有预取钩子(preFetch hook) resolve 后，</span></div><div class=\"line\">        <span class=\"comment\">// 我们的 store 现在已经填充入渲染应用程序所需的状态。</span></div><div class=\"line\">        <span class=\"comment\">// 当我们将状态附加到上下文，</span></div><div class=\"line\">        <span class=\"comment\">// 并且 `template` 选项用于 renderer 时，</span></div><div class=\"line\">        <span class=\"comment\">// 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。</span></div><div class=\"line\">        context.state = store.state</div><div class=\"line\">        resolve(app)</div><div class=\"line\">      &#125;).catch(reject)</div><div class=\"line\">    &#125;, reject)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4、脚手架其他目录介绍：\"><a href=\"#4、脚手架其他目录介绍：\" class=\"headerlink\" title=\"4、脚手架其他目录介绍：\"></a>4、脚手架其他目录介绍：</h3><p>到这里src下面主要的几个文件代码已经编写完成，接下里介绍下整个项目的目录结构如下：</p>\n<p><img src=\"/vue-ssr2/3.jpeg\" alt=\"整个目录结构\"></p>\n<p>主要几个文件介绍如下：<br>build 主要存放webpack打包配置文件<br>dist webpack打包后生成的目录<br>log 使用pm2监控进程存放的日志文件目录<br>server.js node服务器启动文件<br>pmlog.json pm2配置文件</p>\n<h4 id=\"server-js入口文件编写\"><a href=\"#server-js入口文件编写\" class=\"headerlink\" title=\"server.js入口文件编写\"></a>server.js入口文件编写</h4><p>我们还需要编写在服务端启动服务的代码server.js，我们会使用到部分node原生提供的api，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> LRU = <span class=\"built_in\">require</span>(<span class=\"string\">'lru-cache'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> &#123; createBundleRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-server-renderer'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>)</div></pre></td></tr></table></figure></p>\n<p>大致思路是，引入前端模版页面index.template.html，使用express启动服务，引入webpack打包项目代码的dist文件，引入缓存模块（这里不做深入介绍，后期会单独详细介绍），判断端口是否被占用，自动启动其他接口服务。</p>\n<p>引入前端模版文件并且设置环境变量为production，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(<span class=\"string\">'./src/index.template.html'</span>, <span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> isProd = process.env.NODE_ENV === <span class=\"string\">'production'</span></div></pre></td></tr></table></figure></p>\n<p>vue-server-renderer插件的具体使用，通过读取dist文件夹下的目录文件，来创建createBundleRenderer函数，并且使用LRU来设置缓存的时间，通过判断是生产环境还是开发环境，调用不同的方法，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">file</span> =&gt;</span> path.resolve(__dirname, file)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createRenderer</span> (<span class=\"params\">bundle, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> createBundleRenderer(bundle, <span class=\"built_in\">Object</span>.assign(options, &#123;</div><div class=\"line\">    template,</div><div class=\"line\">    cache: LRU(&#123;</div><div class=\"line\">      max: <span class=\"number\">1000</span>,</div><div class=\"line\">      maxAge: <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">15</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    basedir: resolve(<span class=\"string\">'./dist'</span>),</div><div class=\"line\">    runInNewContext: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;))</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> renderer;</div><div class=\"line\"><span class=\"keyword\">let</span> readyPromise</div><div class=\"line\"><span class=\"keyword\">if</span> (isProd) &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> bundle = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/vue-ssr-server-bundle.json'</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> clientManifest = <span class=\"built_in\">require</span>(<span class=\"string\">'./dist/vue-ssr-client-manifest.json'</span>)</div><div class=\"line\">  renderer = createRenderer(bundle, &#123;</div><div class=\"line\">    clientManifest</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  readyPromise = <span class=\"built_in\">require</span>(<span class=\"string\">'./build/setup-dev-server'</span>)(server, (bundle, options) =&gt; &#123;</div><div class=\"line\">    renderer = createRenderer(bundle, options)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用express启动服务，代码片段如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> server = express()；</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义在启动服务钱先判断中间件中的缓存是否过期，是否直接调用dist文件。</span></div><div class=\"line\"><span class=\"keyword\">const</span> serve = <span class=\"function\">(<span class=\"params\">path, cache</span>) =&gt;</span> express.static(resolve(path), &#123;</div><div class=\"line\">  maxAge: cache &amp;&amp; isProd ? <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">30</span> : <span class=\"number\">0</span></div><div class=\"line\">&#125;)</div><div class=\"line\">server.use(<span class=\"string\">'/dist'</span>, serve(<span class=\"string\">'./dist'</span>, <span class=\"literal\">true</span>))</div><div class=\"line\">server.get(<span class=\"string\">'*'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> context = &#123;</div><div class=\"line\">    title: <span class=\"string\">'hello'</span>,</div><div class=\"line\">    url: req.url</div><div class=\"line\">  &#125;</div><div class=\"line\">  renderer.renderToString(context, (err, html) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      res.status(<span class=\"number\">500</span>).end(<span class=\"string\">'Internal Server Error'</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    res.end(html)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>判断端口是否被占用，片段代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">probe</span>(<span class=\"params\">port, callback</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> servers = net.createServer().listen(port)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> calledOnce = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> timeoutRef = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">        callback(<span class=\"literal\">false</span>, port)</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>)</div><div class=\"line\"></div><div class=\"line\">    timeoutRef.unref()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> connected = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">    servers.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        clearTimeout(timeoutRef)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (servers)</div><div class=\"line\">            servers.close()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!calledOnce) &#123;</div><div class=\"line\">            calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">            callback(<span class=\"literal\">true</span>, port)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    servers.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        clearTimeout(timeoutRef)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"literal\">true</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'EADDRINUSE'</span>)</div><div class=\"line\">            result = <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!calledOnce) &#123;</div><div class=\"line\">            calledOnce = <span class=\"literal\">true</span></div><div class=\"line\">            callback(result, port)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> checkPortPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serverport</span>(<span class=\"params\">_port</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> pt = _port || <span class=\"number\">8080</span>;</div><div class=\"line\">        probe(pt, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bl, _pt</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 端口被占用 bl 返回false</span></div><div class=\"line\">            <span class=\"comment\">// _pt：传入的端口号</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (bl === <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// console.log(\"\\n  Static file server running at\" + \"\\n\\n=&gt; http://localhost:\" + _pt + '\\n');</span></div><div class=\"line\">                resolve(_pt);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                serverport(_pt + <span class=\"number\">1</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)()</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">checkPortPromise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    uri = <span class=\"string\">'http://localhost:'</span> + data;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'启动服务路径'</span>+uri)</div><div class=\"line\">    server.listen(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>到这里，基本的代码已经编写完成，webpack打包配置文件基本和官方保持不变，接下来可以尝试启动本地的项目服务，查看基本的demo展示。<br><img src=\"/vue-ssr2/4.jpeg\" alt=\"demo\"></p>\n<blockquote>\n<p>下节，我将介绍下mockjs，axios怎么封装成公共函数便于使用</p>\n</blockquote>"}],"PostAsset":[{"_id":"source/_posts/ajax/111.png","slug":"111.png","post":"cj1udxjo10005g6ld0f0j2gej","modified":0,"renderable":0},{"_id":"source/_posts/2017-05-07/1.png","slug":"1.png","post":"cj2eptg190001bzldopopap0c","modified":0,"renderable":0},{"_id":"source/_posts/2017-05-07/2.png","slug":"2.png","post":"cj2eptg190001bzldopopap0c","modified":0,"renderable":0},{"_id":"source/_posts/2017-05-07/3.png","slug":"3.png","post":"cj2eptg190001bzldopopap0c","modified":0,"renderable":0},{"_id":"source/_posts/vue-ssr/11.png","slug":"11.png","post":"cj6iy7ukx0000wqldxeu9thl7","modified":0,"renderable":0},{"_id":"source/_posts/vue-ssr/22.jpeg","slug":"22.jpeg","post":"cj6iy7ukx0000wqldxeu9thl7","modified":0,"renderable":0},{"_id":"source/_posts/vue-ssr2/1.jpeg","slug":"1.jpeg","post":"cj6jzrreq0000bjld4ranx2ql","modified":0,"renderable":0},{"_id":"source/_posts/vue-ssr2/2.jpeg","slug":"2.jpeg","post":"cj6jzrreq0000bjld4ranx2ql","modified":1,"renderable":0},{"_id":"source/_posts/vue-ssr2/3.jpeg","slug":"3.jpeg","post":"cj6jzrreq0000bjld4ranx2ql","modified":1,"renderable":0},{"_id":"source/_posts/vue-ssr2/4.jpeg","slug":"4.jpeg","post":"cj6jzrreq0000bjld4ranx2ql","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj1udxjo10005g6ld0f0j2gej","category_id":"cj1udxjo50007g6ld3ftvchps","_id":"cj1udxjo8000cg6ld0w3tkh2d"}],"PostTag":[{"post_id":"cj1udxjnl0000g6ldjobm1u2z","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj1udxjo70009g6ldomjhhvbf"},{"post_id":"cj1udxjnl0000g6ldjobm1u2z","tag_id":"cj1udxjo40006g6ld9ofy4gxd","_id":"cj1udxjo7000ag6ldxnji3sjx"},{"post_id":"cj1udxjnr0002g6ldturlh7z6","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj1udxjo8000dg6ldk7sdiiqx"},{"post_id":"cj1udxjnx0004g6ldsvzut13l","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj1udxjo9000gg6ldx1915555"},{"post_id":"cj1udxjnx0004g6ldsvzut13l","tag_id":"cj1udxjo9000eg6ld0wkdq0do","_id":"cj1udxjoa000hg6ld45k1g4m3"},{"post_id":"cj1udxjo10005g6ld0f0j2gej","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj1udxjoc000jg6ldb4oxvj7v"},{"post_id":"cj1udxjo10005g6ld0f0j2gej","tag_id":"cj1udxjo9000fg6ld5k64qayy","_id":"cj1udxjoc000kg6ld4dug6rt2"},{"post_id":"cj1udxjo10005g6ld0f0j2gej","tag_id":"cj1udxjoa000ig6ld8msv85dy","_id":"cj1udxjoc000lg6ldydj5n7bs"},{"post_id":"cj2eptg190001bzldopopap0c","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj2eq9jxz0002bzld9f1vhjav"},{"post_id":"cj6iy7ukx0000wqldxeu9thl7","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj6j98zxs0001wqldqnmwl2cu"},{"post_id":"cj6iy7ukx0000wqldxeu9thl7","tag_id":"cj6j9tryb0000jhldjq1e8lih","_id":"cj6j9trys0001jhld50bvf96b"},{"post_id":"cj6jzrreq0000bjld4ranx2ql","tag_id":"cj1udxjnv0003g6ldr6asgxvz","_id":"cj6k02gtv0001bjld19feyrpi"},{"post_id":"cj6jzrreq0000bjld4ranx2ql","tag_id":"cj6j9tryb0000jhldjq1e8lih","_id":"cj6k02gtw0002bjldtb9ow972"}],"Tag":[{"name":"javascript","_id":"cj1udxjnv0003g6ldr6asgxvz"},{"name":"es6","_id":"cj1udxjo40006g6ld9ofy4gxd"},{"name":"node","_id":"cj1udxjo9000eg6ld0wkdq0do"},{"name":"ajax","_id":"cj1udxjo9000fg6ld5k64qayy"},{"name":"302","_id":"cj1udxjoa000ig6ld8msv85dy"},{"name":"vue","_id":"cj6j9tryb0000jhldjq1e8lih"}]}}